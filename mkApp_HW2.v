//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Feb 17 16:43:19 CST 2017
//
//
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1
// RDY_waitTillDone               O     1
// mc_ifcs_0_req_rsp_request_get  O   153
// RDY_mc_ifcs_0_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_0_req_rsp_response_put  O     1 reg
// mc_ifcs_0_flush_request_get    O     1 reg
// RDY_mc_ifcs_0_flush_request_get  O     1 reg
// RDY_mc_ifcs_0_flush_response_put  O     1 reg
// mc_ifcs_1_req_rsp_request_get  O   153
// RDY_mc_ifcs_1_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_1_req_rsp_response_put  O     1 reg
// mc_ifcs_1_flush_request_get    O     1 reg
// RDY_mc_ifcs_1_flush_request_get  O     1 reg
// RDY_mc_ifcs_1_flush_response_put  O     1 reg
// mc_ifcs_2_req_rsp_request_get  O   153
// RDY_mc_ifcs_2_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_2_req_rsp_response_put  O     1 reg
// mc_ifcs_2_flush_request_get    O     1 reg
// RDY_mc_ifcs_2_flush_request_get  O     1 reg
// RDY_mc_ifcs_2_flush_response_put  O     1 reg
// mc_ifcs_3_req_rsp_request_get  O   153
// RDY_mc_ifcs_3_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_3_req_rsp_response_put  O     1 reg
// mc_ifcs_3_flush_request_get    O     1 reg
// RDY_mc_ifcs_3_flush_request_get  O     1 reg
// RDY_mc_ifcs_3_flush_response_put  O     1 reg
// mc_ifcs_4_req_rsp_request_get  O   153
// RDY_mc_ifcs_4_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_4_req_rsp_response_put  O     1 reg
// mc_ifcs_4_flush_request_get    O     1 reg
// RDY_mc_ifcs_4_flush_request_get  O     1 reg
// RDY_mc_ifcs_4_flush_response_put  O     1 reg
// mc_ifcs_5_req_rsp_request_get  O   153
// RDY_mc_ifcs_5_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_5_req_rsp_response_put  O     1 reg
// mc_ifcs_5_flush_request_get    O     1 reg
// RDY_mc_ifcs_5_flush_request_get  O     1 reg
// RDY_mc_ifcs_5_flush_response_put  O     1 reg
// mc_ifcs_6_req_rsp_request_get  O   153
// RDY_mc_ifcs_6_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_6_req_rsp_response_put  O     1 reg
// mc_ifcs_6_flush_request_get    O     1 reg
// RDY_mc_ifcs_6_flush_request_get  O     1 reg
// RDY_mc_ifcs_6_flush_response_put  O     1 reg
// mc_ifcs_7_req_rsp_request_get  O   153
// RDY_mc_ifcs_7_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_7_req_rsp_response_put  O     1 reg
// mc_ifcs_7_flush_request_get    O     1 reg
// RDY_mc_ifcs_7_flush_request_get  O     1 reg
// RDY_mc_ifcs_7_flush_response_put  O     1 reg
// mc_ifcs_8_req_rsp_request_get  O   153
// RDY_mc_ifcs_8_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_8_req_rsp_response_put  O     1 reg
// mc_ifcs_8_flush_request_get    O     1 reg
// RDY_mc_ifcs_8_flush_request_get  O     1 reg
// RDY_mc_ifcs_8_flush_response_put  O     1 reg
// mc_ifcs_9_req_rsp_request_get  O   153
// RDY_mc_ifcs_9_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_9_req_rsp_response_put  O     1 reg
// mc_ifcs_9_flush_request_get    O     1 reg
// RDY_mc_ifcs_9_flush_request_get  O     1 reg
// RDY_mc_ifcs_9_flush_response_put  O     1 reg
// mc_ifcs_10_req_rsp_request_get  O   153
// RDY_mc_ifcs_10_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_10_req_rsp_response_put  O     1 reg
// mc_ifcs_10_flush_request_get   O     1 reg
// RDY_mc_ifcs_10_flush_request_get  O     1 reg
// RDY_mc_ifcs_10_flush_response_put  O     1 reg
// mc_ifcs_11_req_rsp_request_get  O   153
// RDY_mc_ifcs_11_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_11_req_rsp_response_put  O     1 reg
// mc_ifcs_11_flush_request_get   O     1 reg
// RDY_mc_ifcs_11_flush_request_get  O     1 reg
// RDY_mc_ifcs_11_flush_response_put  O     1 reg
// mc_ifcs_12_req_rsp_request_get  O   153
// RDY_mc_ifcs_12_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_12_req_rsp_response_put  O     1 reg
// mc_ifcs_12_flush_request_get   O     1 reg
// RDY_mc_ifcs_12_flush_request_get  O     1 reg
// RDY_mc_ifcs_12_flush_response_put  O     1 reg
// mc_ifcs_13_req_rsp_request_get  O   153
// RDY_mc_ifcs_13_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_13_req_rsp_response_put  O     1 reg
// mc_ifcs_13_flush_request_get   O     1 reg
// RDY_mc_ifcs_13_flush_request_get  O     1 reg
// RDY_mc_ifcs_13_flush_response_put  O     1 reg
// mc_ifcs_14_req_rsp_request_get  O   153
// RDY_mc_ifcs_14_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_14_req_rsp_response_put  O     1 reg
// mc_ifcs_14_flush_request_get   O     1 reg
// RDY_mc_ifcs_14_flush_request_get  O     1 reg
// RDY_mc_ifcs_14_flush_response_put  O     1 reg
// mc_ifcs_15_req_rsp_request_get  O   153
// RDY_mc_ifcs_15_req_rsp_request_get  O     1 reg
// RDY_mc_ifcs_15_req_rsp_response_put  O     1 reg
// mc_ifcs_15_flush_request_get   O     1 reg
// RDY_mc_ifcs_15_flush_request_get  O     1 reg
// RDY_mc_ifcs_15_flush_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// start_fpga_id                  I     2
// start_param_block_addr         I    64
// mc_ifcs_0_req_rsp_response_put  I   102
// mc_ifcs_0_flush_response_put   I     1 reg
// mc_ifcs_1_req_rsp_response_put  I   102
// mc_ifcs_1_flush_response_put   I     1 reg
// mc_ifcs_2_req_rsp_response_put  I   102
// mc_ifcs_2_flush_response_put   I     1 reg
// mc_ifcs_3_req_rsp_response_put  I   102
// mc_ifcs_3_flush_response_put   I     1 reg
// mc_ifcs_4_req_rsp_response_put  I   102
// mc_ifcs_4_flush_response_put   I     1 reg
// mc_ifcs_5_req_rsp_response_put  I   102
// mc_ifcs_5_flush_response_put   I     1 reg
// mc_ifcs_6_req_rsp_response_put  I   102
// mc_ifcs_6_flush_response_put   I     1 reg
// mc_ifcs_7_req_rsp_response_put  I   102
// mc_ifcs_7_flush_response_put   I     1 reg
// mc_ifcs_8_req_rsp_response_put  I   102
// mc_ifcs_8_flush_response_put   I     1 reg
// mc_ifcs_9_req_rsp_response_put  I   102
// mc_ifcs_9_flush_response_put   I     1 reg
// mc_ifcs_10_req_rsp_response_put  I   102
// mc_ifcs_10_flush_response_put  I     1 reg
// mc_ifcs_11_req_rsp_response_put  I   102
// mc_ifcs_11_flush_response_put  I     1 reg
// mc_ifcs_12_req_rsp_response_put  I   102
// mc_ifcs_12_flush_response_put  I     1 reg
// mc_ifcs_13_req_rsp_response_put  I   102
// mc_ifcs_13_flush_response_put  I     1 reg
// mc_ifcs_14_req_rsp_response_put  I   102
// mc_ifcs_14_flush_response_put  I     1 reg
// mc_ifcs_15_req_rsp_response_put  I   102
// mc_ifcs_15_flush_response_put  I     1 reg
// EN_start                       I     1
// EN_waitTillDone                I     1 unused
// EN_mc_ifcs_0_req_rsp_response_put  I     1
// EN_mc_ifcs_0_flush_response_put  I     1
// EN_mc_ifcs_1_req_rsp_response_put  I     1
// EN_mc_ifcs_1_flush_response_put  I     1
// EN_mc_ifcs_2_req_rsp_response_put  I     1
// EN_mc_ifcs_2_flush_response_put  I     1
// EN_mc_ifcs_3_req_rsp_response_put  I     1
// EN_mc_ifcs_3_flush_response_put  I     1
// EN_mc_ifcs_4_req_rsp_response_put  I     1
// EN_mc_ifcs_4_flush_response_put  I     1
// EN_mc_ifcs_5_req_rsp_response_put  I     1
// EN_mc_ifcs_5_flush_response_put  I     1
// EN_mc_ifcs_6_req_rsp_response_put  I     1
// EN_mc_ifcs_6_flush_response_put  I     1
// EN_mc_ifcs_7_req_rsp_response_put  I     1
// EN_mc_ifcs_7_flush_response_put  I     1
// EN_mc_ifcs_8_req_rsp_response_put  I     1
// EN_mc_ifcs_8_flush_response_put  I     1
// EN_mc_ifcs_9_req_rsp_response_put  I     1
// EN_mc_ifcs_9_flush_response_put  I     1
// EN_mc_ifcs_10_req_rsp_response_put  I     1
// EN_mc_ifcs_10_flush_response_put  I     1
// EN_mc_ifcs_11_req_rsp_response_put  I     1
// EN_mc_ifcs_11_flush_response_put  I     1
// EN_mc_ifcs_12_req_rsp_response_put  I     1
// EN_mc_ifcs_12_flush_response_put  I     1
// EN_mc_ifcs_13_req_rsp_response_put  I     1
// EN_mc_ifcs_13_flush_response_put  I     1
// EN_mc_ifcs_14_req_rsp_response_put  I     1
// EN_mc_ifcs_14_flush_response_put  I     1
// EN_mc_ifcs_15_req_rsp_response_put  I     1
// EN_mc_ifcs_15_flush_response_put  I     1
// EN_mc_ifcs_0_req_rsp_request_get  I     1
// EN_mc_ifcs_0_flush_request_get  I     1
// EN_mc_ifcs_1_req_rsp_request_get  I     1
// EN_mc_ifcs_1_flush_request_get  I     1
// EN_mc_ifcs_2_req_rsp_request_get  I     1
// EN_mc_ifcs_2_flush_request_get  I     1
// EN_mc_ifcs_3_req_rsp_request_get  I     1
// EN_mc_ifcs_3_flush_request_get  I     1
// EN_mc_ifcs_4_req_rsp_request_get  I     1
// EN_mc_ifcs_4_flush_request_get  I     1
// EN_mc_ifcs_5_req_rsp_request_get  I     1
// EN_mc_ifcs_5_flush_request_get  I     1
// EN_mc_ifcs_6_req_rsp_request_get  I     1
// EN_mc_ifcs_6_flush_request_get  I     1
// EN_mc_ifcs_7_req_rsp_request_get  I     1
// EN_mc_ifcs_7_flush_request_get  I     1
// EN_mc_ifcs_8_req_rsp_request_get  I     1
// EN_mc_ifcs_8_flush_request_get  I     1
// EN_mc_ifcs_9_req_rsp_request_get  I     1
// EN_mc_ifcs_9_flush_request_get  I     1
// EN_mc_ifcs_10_req_rsp_request_get  I     1
// EN_mc_ifcs_10_flush_request_get  I     1
// EN_mc_ifcs_11_req_rsp_request_get  I     1
// EN_mc_ifcs_11_flush_request_get  I     1
// EN_mc_ifcs_12_req_rsp_request_get  I     1
// EN_mc_ifcs_12_flush_request_get  I     1
// EN_mc_ifcs_13_req_rsp_request_get  I     1
// EN_mc_ifcs_13_flush_request_get  I     1
// EN_mc_ifcs_14_req_rsp_request_get  I     1
// EN_mc_ifcs_14_flush_request_get  I     1
// EN_mc_ifcs_15_req_rsp_request_get  I     1
// EN_mc_ifcs_15_flush_request_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkApp_HW2(CLK,
		 RST_N,

		 start_fpga_id,
		 start_param_block_addr,
		 EN_start,
		 RDY_start,

		 EN_waitTillDone,
		 RDY_waitTillDone,

		 EN_mc_ifcs_0_req_rsp_request_get,
		 mc_ifcs_0_req_rsp_request_get,
		 RDY_mc_ifcs_0_req_rsp_request_get,

		 mc_ifcs_0_req_rsp_response_put,
		 EN_mc_ifcs_0_req_rsp_response_put,
		 RDY_mc_ifcs_0_req_rsp_response_put,

		 EN_mc_ifcs_0_flush_request_get,
		 mc_ifcs_0_flush_request_get,
		 RDY_mc_ifcs_0_flush_request_get,

		 mc_ifcs_0_flush_response_put,
		 EN_mc_ifcs_0_flush_response_put,
		 RDY_mc_ifcs_0_flush_response_put,

		 EN_mc_ifcs_1_req_rsp_request_get,
		 mc_ifcs_1_req_rsp_request_get,
		 RDY_mc_ifcs_1_req_rsp_request_get,

		 mc_ifcs_1_req_rsp_response_put,
		 EN_mc_ifcs_1_req_rsp_response_put,
		 RDY_mc_ifcs_1_req_rsp_response_put,

		 EN_mc_ifcs_1_flush_request_get,
		 mc_ifcs_1_flush_request_get,
		 RDY_mc_ifcs_1_flush_request_get,

		 mc_ifcs_1_flush_response_put,
		 EN_mc_ifcs_1_flush_response_put,
		 RDY_mc_ifcs_1_flush_response_put,

		 EN_mc_ifcs_2_req_rsp_request_get,
		 mc_ifcs_2_req_rsp_request_get,
		 RDY_mc_ifcs_2_req_rsp_request_get,

		 mc_ifcs_2_req_rsp_response_put,
		 EN_mc_ifcs_2_req_rsp_response_put,
		 RDY_mc_ifcs_2_req_rsp_response_put,

		 EN_mc_ifcs_2_flush_request_get,
		 mc_ifcs_2_flush_request_get,
		 RDY_mc_ifcs_2_flush_request_get,

		 mc_ifcs_2_flush_response_put,
		 EN_mc_ifcs_2_flush_response_put,
		 RDY_mc_ifcs_2_flush_response_put,

		 EN_mc_ifcs_3_req_rsp_request_get,
		 mc_ifcs_3_req_rsp_request_get,
		 RDY_mc_ifcs_3_req_rsp_request_get,

		 mc_ifcs_3_req_rsp_response_put,
		 EN_mc_ifcs_3_req_rsp_response_put,
		 RDY_mc_ifcs_3_req_rsp_response_put,

		 EN_mc_ifcs_3_flush_request_get,
		 mc_ifcs_3_flush_request_get,
		 RDY_mc_ifcs_3_flush_request_get,

		 mc_ifcs_3_flush_response_put,
		 EN_mc_ifcs_3_flush_response_put,
		 RDY_mc_ifcs_3_flush_response_put,

		 EN_mc_ifcs_4_req_rsp_request_get,
		 mc_ifcs_4_req_rsp_request_get,
		 RDY_mc_ifcs_4_req_rsp_request_get,

		 mc_ifcs_4_req_rsp_response_put,
		 EN_mc_ifcs_4_req_rsp_response_put,
		 RDY_mc_ifcs_4_req_rsp_response_put,

		 EN_mc_ifcs_4_flush_request_get,
		 mc_ifcs_4_flush_request_get,
		 RDY_mc_ifcs_4_flush_request_get,

		 mc_ifcs_4_flush_response_put,
		 EN_mc_ifcs_4_flush_response_put,
		 RDY_mc_ifcs_4_flush_response_put,

		 EN_mc_ifcs_5_req_rsp_request_get,
		 mc_ifcs_5_req_rsp_request_get,
		 RDY_mc_ifcs_5_req_rsp_request_get,

		 mc_ifcs_5_req_rsp_response_put,
		 EN_mc_ifcs_5_req_rsp_response_put,
		 RDY_mc_ifcs_5_req_rsp_response_put,

		 EN_mc_ifcs_5_flush_request_get,
		 mc_ifcs_5_flush_request_get,
		 RDY_mc_ifcs_5_flush_request_get,

		 mc_ifcs_5_flush_response_put,
		 EN_mc_ifcs_5_flush_response_put,
		 RDY_mc_ifcs_5_flush_response_put,

		 EN_mc_ifcs_6_req_rsp_request_get,
		 mc_ifcs_6_req_rsp_request_get,
		 RDY_mc_ifcs_6_req_rsp_request_get,

		 mc_ifcs_6_req_rsp_response_put,
		 EN_mc_ifcs_6_req_rsp_response_put,
		 RDY_mc_ifcs_6_req_rsp_response_put,

		 EN_mc_ifcs_6_flush_request_get,
		 mc_ifcs_6_flush_request_get,
		 RDY_mc_ifcs_6_flush_request_get,

		 mc_ifcs_6_flush_response_put,
		 EN_mc_ifcs_6_flush_response_put,
		 RDY_mc_ifcs_6_flush_response_put,

		 EN_mc_ifcs_7_req_rsp_request_get,
		 mc_ifcs_7_req_rsp_request_get,
		 RDY_mc_ifcs_7_req_rsp_request_get,

		 mc_ifcs_7_req_rsp_response_put,
		 EN_mc_ifcs_7_req_rsp_response_put,
		 RDY_mc_ifcs_7_req_rsp_response_put,

		 EN_mc_ifcs_7_flush_request_get,
		 mc_ifcs_7_flush_request_get,
		 RDY_mc_ifcs_7_flush_request_get,

		 mc_ifcs_7_flush_response_put,
		 EN_mc_ifcs_7_flush_response_put,
		 RDY_mc_ifcs_7_flush_response_put,

		 EN_mc_ifcs_8_req_rsp_request_get,
		 mc_ifcs_8_req_rsp_request_get,
		 RDY_mc_ifcs_8_req_rsp_request_get,

		 mc_ifcs_8_req_rsp_response_put,
		 EN_mc_ifcs_8_req_rsp_response_put,
		 RDY_mc_ifcs_8_req_rsp_response_put,

		 EN_mc_ifcs_8_flush_request_get,
		 mc_ifcs_8_flush_request_get,
		 RDY_mc_ifcs_8_flush_request_get,

		 mc_ifcs_8_flush_response_put,
		 EN_mc_ifcs_8_flush_response_put,
		 RDY_mc_ifcs_8_flush_response_put,

		 EN_mc_ifcs_9_req_rsp_request_get,
		 mc_ifcs_9_req_rsp_request_get,
		 RDY_mc_ifcs_9_req_rsp_request_get,

		 mc_ifcs_9_req_rsp_response_put,
		 EN_mc_ifcs_9_req_rsp_response_put,
		 RDY_mc_ifcs_9_req_rsp_response_put,

		 EN_mc_ifcs_9_flush_request_get,
		 mc_ifcs_9_flush_request_get,
		 RDY_mc_ifcs_9_flush_request_get,

		 mc_ifcs_9_flush_response_put,
		 EN_mc_ifcs_9_flush_response_put,
		 RDY_mc_ifcs_9_flush_response_put,

		 EN_mc_ifcs_10_req_rsp_request_get,
		 mc_ifcs_10_req_rsp_request_get,
		 RDY_mc_ifcs_10_req_rsp_request_get,

		 mc_ifcs_10_req_rsp_response_put,
		 EN_mc_ifcs_10_req_rsp_response_put,
		 RDY_mc_ifcs_10_req_rsp_response_put,

		 EN_mc_ifcs_10_flush_request_get,
		 mc_ifcs_10_flush_request_get,
		 RDY_mc_ifcs_10_flush_request_get,

		 mc_ifcs_10_flush_response_put,
		 EN_mc_ifcs_10_flush_response_put,
		 RDY_mc_ifcs_10_flush_response_put,

		 EN_mc_ifcs_11_req_rsp_request_get,
		 mc_ifcs_11_req_rsp_request_get,
		 RDY_mc_ifcs_11_req_rsp_request_get,

		 mc_ifcs_11_req_rsp_response_put,
		 EN_mc_ifcs_11_req_rsp_response_put,
		 RDY_mc_ifcs_11_req_rsp_response_put,

		 EN_mc_ifcs_11_flush_request_get,
		 mc_ifcs_11_flush_request_get,
		 RDY_mc_ifcs_11_flush_request_get,

		 mc_ifcs_11_flush_response_put,
		 EN_mc_ifcs_11_flush_response_put,
		 RDY_mc_ifcs_11_flush_response_put,

		 EN_mc_ifcs_12_req_rsp_request_get,
		 mc_ifcs_12_req_rsp_request_get,
		 RDY_mc_ifcs_12_req_rsp_request_get,

		 mc_ifcs_12_req_rsp_response_put,
		 EN_mc_ifcs_12_req_rsp_response_put,
		 RDY_mc_ifcs_12_req_rsp_response_put,

		 EN_mc_ifcs_12_flush_request_get,
		 mc_ifcs_12_flush_request_get,
		 RDY_mc_ifcs_12_flush_request_get,

		 mc_ifcs_12_flush_response_put,
		 EN_mc_ifcs_12_flush_response_put,
		 RDY_mc_ifcs_12_flush_response_put,

		 EN_mc_ifcs_13_req_rsp_request_get,
		 mc_ifcs_13_req_rsp_request_get,
		 RDY_mc_ifcs_13_req_rsp_request_get,

		 mc_ifcs_13_req_rsp_response_put,
		 EN_mc_ifcs_13_req_rsp_response_put,
		 RDY_mc_ifcs_13_req_rsp_response_put,

		 EN_mc_ifcs_13_flush_request_get,
		 mc_ifcs_13_flush_request_get,
		 RDY_mc_ifcs_13_flush_request_get,

		 mc_ifcs_13_flush_response_put,
		 EN_mc_ifcs_13_flush_response_put,
		 RDY_mc_ifcs_13_flush_response_put,

		 EN_mc_ifcs_14_req_rsp_request_get,
		 mc_ifcs_14_req_rsp_request_get,
		 RDY_mc_ifcs_14_req_rsp_request_get,

		 mc_ifcs_14_req_rsp_response_put,
		 EN_mc_ifcs_14_req_rsp_response_put,
		 RDY_mc_ifcs_14_req_rsp_response_put,

		 EN_mc_ifcs_14_flush_request_get,
		 mc_ifcs_14_flush_request_get,
		 RDY_mc_ifcs_14_flush_request_get,

		 mc_ifcs_14_flush_response_put,
		 EN_mc_ifcs_14_flush_response_put,
		 RDY_mc_ifcs_14_flush_response_put,

		 EN_mc_ifcs_15_req_rsp_request_get,
		 mc_ifcs_15_req_rsp_request_get,
		 RDY_mc_ifcs_15_req_rsp_request_get,

		 mc_ifcs_15_req_rsp_response_put,
		 EN_mc_ifcs_15_req_rsp_response_put,
		 RDY_mc_ifcs_15_req_rsp_response_put,

		 EN_mc_ifcs_15_flush_request_get,
		 mc_ifcs_15_flush_request_get,
		 RDY_mc_ifcs_15_flush_request_get,

		 mc_ifcs_15_flush_response_put,
		 EN_mc_ifcs_15_flush_response_put,
		 RDY_mc_ifcs_15_flush_response_put);
  input  CLK;
  input  RST_N;

  // action method start
  input  [1 : 0] start_fpga_id;
  input  [63 : 0] start_param_block_addr;
  input  EN_start;
  output RDY_start;

  // action method waitTillDone
  input  EN_waitTillDone;
  output RDY_waitTillDone;

  // actionvalue method mc_ifcs_0_req_rsp_request_get
  input  EN_mc_ifcs_0_req_rsp_request_get;
  output [152 : 0] mc_ifcs_0_req_rsp_request_get;
  output RDY_mc_ifcs_0_req_rsp_request_get;

  // action method mc_ifcs_0_req_rsp_response_put
  input  [101 : 0] mc_ifcs_0_req_rsp_response_put;
  input  EN_mc_ifcs_0_req_rsp_response_put;
  output RDY_mc_ifcs_0_req_rsp_response_put;

  // actionvalue method mc_ifcs_0_flush_request_get
  input  EN_mc_ifcs_0_flush_request_get;
  output mc_ifcs_0_flush_request_get;
  output RDY_mc_ifcs_0_flush_request_get;

  // action method mc_ifcs_0_flush_response_put
  input  mc_ifcs_0_flush_response_put;
  input  EN_mc_ifcs_0_flush_response_put;
  output RDY_mc_ifcs_0_flush_response_put;

  // actionvalue method mc_ifcs_1_req_rsp_request_get
  input  EN_mc_ifcs_1_req_rsp_request_get;
  output [152 : 0] mc_ifcs_1_req_rsp_request_get;
  output RDY_mc_ifcs_1_req_rsp_request_get;

  // action method mc_ifcs_1_req_rsp_response_put
  input  [101 : 0] mc_ifcs_1_req_rsp_response_put;
  input  EN_mc_ifcs_1_req_rsp_response_put;
  output RDY_mc_ifcs_1_req_rsp_response_put;

  // actionvalue method mc_ifcs_1_flush_request_get
  input  EN_mc_ifcs_1_flush_request_get;
  output mc_ifcs_1_flush_request_get;
  output RDY_mc_ifcs_1_flush_request_get;

  // action method mc_ifcs_1_flush_response_put
  input  mc_ifcs_1_flush_response_put;
  input  EN_mc_ifcs_1_flush_response_put;
  output RDY_mc_ifcs_1_flush_response_put;

  // actionvalue method mc_ifcs_2_req_rsp_request_get
  input  EN_mc_ifcs_2_req_rsp_request_get;
  output [152 : 0] mc_ifcs_2_req_rsp_request_get;
  output RDY_mc_ifcs_2_req_rsp_request_get;

  // action method mc_ifcs_2_req_rsp_response_put
  input  [101 : 0] mc_ifcs_2_req_rsp_response_put;
  input  EN_mc_ifcs_2_req_rsp_response_put;
  output RDY_mc_ifcs_2_req_rsp_response_put;

  // actionvalue method mc_ifcs_2_flush_request_get
  input  EN_mc_ifcs_2_flush_request_get;
  output mc_ifcs_2_flush_request_get;
  output RDY_mc_ifcs_2_flush_request_get;

  // action method mc_ifcs_2_flush_response_put
  input  mc_ifcs_2_flush_response_put;
  input  EN_mc_ifcs_2_flush_response_put;
  output RDY_mc_ifcs_2_flush_response_put;

  // actionvalue method mc_ifcs_3_req_rsp_request_get
  input  EN_mc_ifcs_3_req_rsp_request_get;
  output [152 : 0] mc_ifcs_3_req_rsp_request_get;
  output RDY_mc_ifcs_3_req_rsp_request_get;

  // action method mc_ifcs_3_req_rsp_response_put
  input  [101 : 0] mc_ifcs_3_req_rsp_response_put;
  input  EN_mc_ifcs_3_req_rsp_response_put;
  output RDY_mc_ifcs_3_req_rsp_response_put;

  // actionvalue method mc_ifcs_3_flush_request_get
  input  EN_mc_ifcs_3_flush_request_get;
  output mc_ifcs_3_flush_request_get;
  output RDY_mc_ifcs_3_flush_request_get;

  // action method mc_ifcs_3_flush_response_put
  input  mc_ifcs_3_flush_response_put;
  input  EN_mc_ifcs_3_flush_response_put;
  output RDY_mc_ifcs_3_flush_response_put;

  // actionvalue method mc_ifcs_4_req_rsp_request_get
  input  EN_mc_ifcs_4_req_rsp_request_get;
  output [152 : 0] mc_ifcs_4_req_rsp_request_get;
  output RDY_mc_ifcs_4_req_rsp_request_get;

  // action method mc_ifcs_4_req_rsp_response_put
  input  [101 : 0] mc_ifcs_4_req_rsp_response_put;
  input  EN_mc_ifcs_4_req_rsp_response_put;
  output RDY_mc_ifcs_4_req_rsp_response_put;

  // actionvalue method mc_ifcs_4_flush_request_get
  input  EN_mc_ifcs_4_flush_request_get;
  output mc_ifcs_4_flush_request_get;
  output RDY_mc_ifcs_4_flush_request_get;

  // action method mc_ifcs_4_flush_response_put
  input  mc_ifcs_4_flush_response_put;
  input  EN_mc_ifcs_4_flush_response_put;
  output RDY_mc_ifcs_4_flush_response_put;

  // actionvalue method mc_ifcs_5_req_rsp_request_get
  input  EN_mc_ifcs_5_req_rsp_request_get;
  output [152 : 0] mc_ifcs_5_req_rsp_request_get;
  output RDY_mc_ifcs_5_req_rsp_request_get;

  // action method mc_ifcs_5_req_rsp_response_put
  input  [101 : 0] mc_ifcs_5_req_rsp_response_put;
  input  EN_mc_ifcs_5_req_rsp_response_put;
  output RDY_mc_ifcs_5_req_rsp_response_put;

  // actionvalue method mc_ifcs_5_flush_request_get
  input  EN_mc_ifcs_5_flush_request_get;
  output mc_ifcs_5_flush_request_get;
  output RDY_mc_ifcs_5_flush_request_get;

  // action method mc_ifcs_5_flush_response_put
  input  mc_ifcs_5_flush_response_put;
  input  EN_mc_ifcs_5_flush_response_put;
  output RDY_mc_ifcs_5_flush_response_put;

  // actionvalue method mc_ifcs_6_req_rsp_request_get
  input  EN_mc_ifcs_6_req_rsp_request_get;
  output [152 : 0] mc_ifcs_6_req_rsp_request_get;
  output RDY_mc_ifcs_6_req_rsp_request_get;

  // action method mc_ifcs_6_req_rsp_response_put
  input  [101 : 0] mc_ifcs_6_req_rsp_response_put;
  input  EN_mc_ifcs_6_req_rsp_response_put;
  output RDY_mc_ifcs_6_req_rsp_response_put;

  // actionvalue method mc_ifcs_6_flush_request_get
  input  EN_mc_ifcs_6_flush_request_get;
  output mc_ifcs_6_flush_request_get;
  output RDY_mc_ifcs_6_flush_request_get;

  // action method mc_ifcs_6_flush_response_put
  input  mc_ifcs_6_flush_response_put;
  input  EN_mc_ifcs_6_flush_response_put;
  output RDY_mc_ifcs_6_flush_response_put;

  // actionvalue method mc_ifcs_7_req_rsp_request_get
  input  EN_mc_ifcs_7_req_rsp_request_get;
  output [152 : 0] mc_ifcs_7_req_rsp_request_get;
  output RDY_mc_ifcs_7_req_rsp_request_get;

  // action method mc_ifcs_7_req_rsp_response_put
  input  [101 : 0] mc_ifcs_7_req_rsp_response_put;
  input  EN_mc_ifcs_7_req_rsp_response_put;
  output RDY_mc_ifcs_7_req_rsp_response_put;

  // actionvalue method mc_ifcs_7_flush_request_get
  input  EN_mc_ifcs_7_flush_request_get;
  output mc_ifcs_7_flush_request_get;
  output RDY_mc_ifcs_7_flush_request_get;

  // action method mc_ifcs_7_flush_response_put
  input  mc_ifcs_7_flush_response_put;
  input  EN_mc_ifcs_7_flush_response_put;
  output RDY_mc_ifcs_7_flush_response_put;

  // actionvalue method mc_ifcs_8_req_rsp_request_get
  input  EN_mc_ifcs_8_req_rsp_request_get;
  output [152 : 0] mc_ifcs_8_req_rsp_request_get;
  output RDY_mc_ifcs_8_req_rsp_request_get;

  // action method mc_ifcs_8_req_rsp_response_put
  input  [101 : 0] mc_ifcs_8_req_rsp_response_put;
  input  EN_mc_ifcs_8_req_rsp_response_put;
  output RDY_mc_ifcs_8_req_rsp_response_put;

  // actionvalue method mc_ifcs_8_flush_request_get
  input  EN_mc_ifcs_8_flush_request_get;
  output mc_ifcs_8_flush_request_get;
  output RDY_mc_ifcs_8_flush_request_get;

  // action method mc_ifcs_8_flush_response_put
  input  mc_ifcs_8_flush_response_put;
  input  EN_mc_ifcs_8_flush_response_put;
  output RDY_mc_ifcs_8_flush_response_put;

  // actionvalue method mc_ifcs_9_req_rsp_request_get
  input  EN_mc_ifcs_9_req_rsp_request_get;
  output [152 : 0] mc_ifcs_9_req_rsp_request_get;
  output RDY_mc_ifcs_9_req_rsp_request_get;

  // action method mc_ifcs_9_req_rsp_response_put
  input  [101 : 0] mc_ifcs_9_req_rsp_response_put;
  input  EN_mc_ifcs_9_req_rsp_response_put;
  output RDY_mc_ifcs_9_req_rsp_response_put;

  // actionvalue method mc_ifcs_9_flush_request_get
  input  EN_mc_ifcs_9_flush_request_get;
  output mc_ifcs_9_flush_request_get;
  output RDY_mc_ifcs_9_flush_request_get;

  // action method mc_ifcs_9_flush_response_put
  input  mc_ifcs_9_flush_response_put;
  input  EN_mc_ifcs_9_flush_response_put;
  output RDY_mc_ifcs_9_flush_response_put;

  // actionvalue method mc_ifcs_10_req_rsp_request_get
  input  EN_mc_ifcs_10_req_rsp_request_get;
  output [152 : 0] mc_ifcs_10_req_rsp_request_get;
  output RDY_mc_ifcs_10_req_rsp_request_get;

  // action method mc_ifcs_10_req_rsp_response_put
  input  [101 : 0] mc_ifcs_10_req_rsp_response_put;
  input  EN_mc_ifcs_10_req_rsp_response_put;
  output RDY_mc_ifcs_10_req_rsp_response_put;

  // actionvalue method mc_ifcs_10_flush_request_get
  input  EN_mc_ifcs_10_flush_request_get;
  output mc_ifcs_10_flush_request_get;
  output RDY_mc_ifcs_10_flush_request_get;

  // action method mc_ifcs_10_flush_response_put
  input  mc_ifcs_10_flush_response_put;
  input  EN_mc_ifcs_10_flush_response_put;
  output RDY_mc_ifcs_10_flush_response_put;

  // actionvalue method mc_ifcs_11_req_rsp_request_get
  input  EN_mc_ifcs_11_req_rsp_request_get;
  output [152 : 0] mc_ifcs_11_req_rsp_request_get;
  output RDY_mc_ifcs_11_req_rsp_request_get;

  // action method mc_ifcs_11_req_rsp_response_put
  input  [101 : 0] mc_ifcs_11_req_rsp_response_put;
  input  EN_mc_ifcs_11_req_rsp_response_put;
  output RDY_mc_ifcs_11_req_rsp_response_put;

  // actionvalue method mc_ifcs_11_flush_request_get
  input  EN_mc_ifcs_11_flush_request_get;
  output mc_ifcs_11_flush_request_get;
  output RDY_mc_ifcs_11_flush_request_get;

  // action method mc_ifcs_11_flush_response_put
  input  mc_ifcs_11_flush_response_put;
  input  EN_mc_ifcs_11_flush_response_put;
  output RDY_mc_ifcs_11_flush_response_put;

  // actionvalue method mc_ifcs_12_req_rsp_request_get
  input  EN_mc_ifcs_12_req_rsp_request_get;
  output [152 : 0] mc_ifcs_12_req_rsp_request_get;
  output RDY_mc_ifcs_12_req_rsp_request_get;

  // action method mc_ifcs_12_req_rsp_response_put
  input  [101 : 0] mc_ifcs_12_req_rsp_response_put;
  input  EN_mc_ifcs_12_req_rsp_response_put;
  output RDY_mc_ifcs_12_req_rsp_response_put;

  // actionvalue method mc_ifcs_12_flush_request_get
  input  EN_mc_ifcs_12_flush_request_get;
  output mc_ifcs_12_flush_request_get;
  output RDY_mc_ifcs_12_flush_request_get;

  // action method mc_ifcs_12_flush_response_put
  input  mc_ifcs_12_flush_response_put;
  input  EN_mc_ifcs_12_flush_response_put;
  output RDY_mc_ifcs_12_flush_response_put;

  // actionvalue method mc_ifcs_13_req_rsp_request_get
  input  EN_mc_ifcs_13_req_rsp_request_get;
  output [152 : 0] mc_ifcs_13_req_rsp_request_get;
  output RDY_mc_ifcs_13_req_rsp_request_get;

  // action method mc_ifcs_13_req_rsp_response_put
  input  [101 : 0] mc_ifcs_13_req_rsp_response_put;
  input  EN_mc_ifcs_13_req_rsp_response_put;
  output RDY_mc_ifcs_13_req_rsp_response_put;

  // actionvalue method mc_ifcs_13_flush_request_get
  input  EN_mc_ifcs_13_flush_request_get;
  output mc_ifcs_13_flush_request_get;
  output RDY_mc_ifcs_13_flush_request_get;

  // action method mc_ifcs_13_flush_response_put
  input  mc_ifcs_13_flush_response_put;
  input  EN_mc_ifcs_13_flush_response_put;
  output RDY_mc_ifcs_13_flush_response_put;

  // actionvalue method mc_ifcs_14_req_rsp_request_get
  input  EN_mc_ifcs_14_req_rsp_request_get;
  output [152 : 0] mc_ifcs_14_req_rsp_request_get;
  output RDY_mc_ifcs_14_req_rsp_request_get;

  // action method mc_ifcs_14_req_rsp_response_put
  input  [101 : 0] mc_ifcs_14_req_rsp_response_put;
  input  EN_mc_ifcs_14_req_rsp_response_put;
  output RDY_mc_ifcs_14_req_rsp_response_put;

  // actionvalue method mc_ifcs_14_flush_request_get
  input  EN_mc_ifcs_14_flush_request_get;
  output mc_ifcs_14_flush_request_get;
  output RDY_mc_ifcs_14_flush_request_get;

  // action method mc_ifcs_14_flush_response_put
  input  mc_ifcs_14_flush_response_put;
  input  EN_mc_ifcs_14_flush_response_put;
  output RDY_mc_ifcs_14_flush_response_put;

  // actionvalue method mc_ifcs_15_req_rsp_request_get
  input  EN_mc_ifcs_15_req_rsp_request_get;
  output [152 : 0] mc_ifcs_15_req_rsp_request_get;
  output RDY_mc_ifcs_15_req_rsp_request_get;

  // action method mc_ifcs_15_req_rsp_response_put
  input  [101 : 0] mc_ifcs_15_req_rsp_response_put;
  input  EN_mc_ifcs_15_req_rsp_response_put;
  output RDY_mc_ifcs_15_req_rsp_response_put;

  // actionvalue method mc_ifcs_15_flush_request_get
  input  EN_mc_ifcs_15_flush_request_get;
  output mc_ifcs_15_flush_request_get;
  output RDY_mc_ifcs_15_flush_request_get;

  // action method mc_ifcs_15_flush_response_put
  input  mc_ifcs_15_flush_response_put;
  input  EN_mc_ifcs_15_flush_response_put;
  output RDY_mc_ifcs_15_flush_response_put;

  // signals for module outputs
  wire [152 : 0] mc_ifcs_0_req_rsp_request_get,
		 mc_ifcs_10_req_rsp_request_get,
		 mc_ifcs_11_req_rsp_request_get,
		 mc_ifcs_12_req_rsp_request_get,
		 mc_ifcs_13_req_rsp_request_get,
		 mc_ifcs_14_req_rsp_request_get,
		 mc_ifcs_15_req_rsp_request_get,
		 mc_ifcs_1_req_rsp_request_get,
		 mc_ifcs_2_req_rsp_request_get,
		 mc_ifcs_3_req_rsp_request_get,
		 mc_ifcs_4_req_rsp_request_get,
		 mc_ifcs_5_req_rsp_request_get,
		 mc_ifcs_6_req_rsp_request_get,
		 mc_ifcs_7_req_rsp_request_get,
		 mc_ifcs_8_req_rsp_request_get,
		 mc_ifcs_9_req_rsp_request_get;
  wire RDY_mc_ifcs_0_flush_request_get,
       RDY_mc_ifcs_0_flush_response_put,
       RDY_mc_ifcs_0_req_rsp_request_get,
       RDY_mc_ifcs_0_req_rsp_response_put,
       RDY_mc_ifcs_10_flush_request_get,
       RDY_mc_ifcs_10_flush_response_put,
       RDY_mc_ifcs_10_req_rsp_request_get,
       RDY_mc_ifcs_10_req_rsp_response_put,
       RDY_mc_ifcs_11_flush_request_get,
       RDY_mc_ifcs_11_flush_response_put,
       RDY_mc_ifcs_11_req_rsp_request_get,
       RDY_mc_ifcs_11_req_rsp_response_put,
       RDY_mc_ifcs_12_flush_request_get,
       RDY_mc_ifcs_12_flush_response_put,
       RDY_mc_ifcs_12_req_rsp_request_get,
       RDY_mc_ifcs_12_req_rsp_response_put,
       RDY_mc_ifcs_13_flush_request_get,
       RDY_mc_ifcs_13_flush_response_put,
       RDY_mc_ifcs_13_req_rsp_request_get,
       RDY_mc_ifcs_13_req_rsp_response_put,
       RDY_mc_ifcs_14_flush_request_get,
       RDY_mc_ifcs_14_flush_response_put,
       RDY_mc_ifcs_14_req_rsp_request_get,
       RDY_mc_ifcs_14_req_rsp_response_put,
       RDY_mc_ifcs_15_flush_request_get,
       RDY_mc_ifcs_15_flush_response_put,
       RDY_mc_ifcs_15_req_rsp_request_get,
       RDY_mc_ifcs_15_req_rsp_response_put,
       RDY_mc_ifcs_1_flush_request_get,
       RDY_mc_ifcs_1_flush_response_put,
       RDY_mc_ifcs_1_req_rsp_request_get,
       RDY_mc_ifcs_1_req_rsp_response_put,
       RDY_mc_ifcs_2_flush_request_get,
       RDY_mc_ifcs_2_flush_response_put,
       RDY_mc_ifcs_2_req_rsp_request_get,
       RDY_mc_ifcs_2_req_rsp_response_put,
       RDY_mc_ifcs_3_flush_request_get,
       RDY_mc_ifcs_3_flush_response_put,
       RDY_mc_ifcs_3_req_rsp_request_get,
       RDY_mc_ifcs_3_req_rsp_response_put,
       RDY_mc_ifcs_4_flush_request_get,
       RDY_mc_ifcs_4_flush_response_put,
       RDY_mc_ifcs_4_req_rsp_request_get,
       RDY_mc_ifcs_4_req_rsp_response_put,
       RDY_mc_ifcs_5_flush_request_get,
       RDY_mc_ifcs_5_flush_response_put,
       RDY_mc_ifcs_5_req_rsp_request_get,
       RDY_mc_ifcs_5_req_rsp_response_put,
       RDY_mc_ifcs_6_flush_request_get,
       RDY_mc_ifcs_6_flush_response_put,
       RDY_mc_ifcs_6_req_rsp_request_get,
       RDY_mc_ifcs_6_req_rsp_response_put,
       RDY_mc_ifcs_7_flush_request_get,
       RDY_mc_ifcs_7_flush_response_put,
       RDY_mc_ifcs_7_req_rsp_request_get,
       RDY_mc_ifcs_7_req_rsp_response_put,
       RDY_mc_ifcs_8_flush_request_get,
       RDY_mc_ifcs_8_flush_response_put,
       RDY_mc_ifcs_8_req_rsp_request_get,
       RDY_mc_ifcs_8_req_rsp_response_put,
       RDY_mc_ifcs_9_flush_request_get,
       RDY_mc_ifcs_9_flush_response_put,
       RDY_mc_ifcs_9_req_rsp_request_get,
       RDY_mc_ifcs_9_req_rsp_response_put,
       RDY_start,
       RDY_waitTillDone,
       mc_ifcs_0_flush_request_get,
       mc_ifcs_10_flush_request_get,
       mc_ifcs_11_flush_request_get,
       mc_ifcs_12_flush_request_get,
       mc_ifcs_13_flush_request_get,
       mc_ifcs_14_flush_request_get,
       mc_ifcs_15_flush_request_get,
       mc_ifcs_1_flush_request_get,
       mc_ifcs_2_flush_request_get,
       mc_ifcs_3_flush_request_get,
       mc_ifcs_4_flush_request_get,
       mc_ifcs_5_flush_request_get,
       mc_ifcs_6_flush_request_get,
       mc_ifcs_7_flush_request_get,
       mc_ifcs_8_flush_request_get,
       mc_ifcs_9_flush_request_get;

  // inlined wires
  wire fsm_start_wire$whas, fsm_state_set_pw$whas;

  // register fsm_start_reg
  reg fsm_start_reg;
  wire fsm_start_reg$D_IN, fsm_start_reg$EN;

  // register fsm_start_reg_1
  reg fsm_start_reg_1;
  wire fsm_start_reg_1$D_IN, fsm_start_reg_1$EN;

  // register fsm_state_can_overlap
  reg fsm_state_can_overlap;
  wire fsm_state_can_overlap$D_IN, fsm_state_can_overlap$EN;

  // register fsm_state_fired
  reg fsm_state_fired;
  wire fsm_state_fired$D_IN, fsm_state_fired$EN;

  // register fsm_state_mkFSMstate
  reg [3 : 0] fsm_state_mkFSMstate;
  reg [3 : 0] fsm_state_mkFSMstate$D_IN;
  wire fsm_state_mkFSMstate$EN;

  // register rg_fpga_id
  reg [1 : 0] rg_fpga_id;
  wire [1 : 0] rg_fpga_id$D_IN;
  wire rg_fpga_id$EN;

  // register rg_mc
  reg [4 : 0] rg_mc;
  wire [4 : 0] rg_mc$D_IN;
  wire rg_mc$EN;

  // register rg_param_block_addr
  reg [47 : 0] rg_param_block_addr;
  wire [47 : 0] rg_param_block_addr$D_IN;
  wire rg_param_block_addr$EN;

  // register rg_partial_sum
  reg [63 : 0] rg_partial_sum;
  wire [63 : 0] rg_partial_sum$D_IN;
  wire rg_partial_sum$EN;

  // ports of submodule f_flush_reqs_0
  wire f_flush_reqs_0$CLR,
       f_flush_reqs_0$DEQ,
       f_flush_reqs_0$D_IN,
       f_flush_reqs_0$D_OUT,
       f_flush_reqs_0$EMPTY_N,
       f_flush_reqs_0$ENQ,
       f_flush_reqs_0$FULL_N;

  // ports of submodule f_flush_reqs_1
  wire f_flush_reqs_1$CLR,
       f_flush_reqs_1$DEQ,
       f_flush_reqs_1$D_IN,
       f_flush_reqs_1$D_OUT,
       f_flush_reqs_1$EMPTY_N,
       f_flush_reqs_1$ENQ,
       f_flush_reqs_1$FULL_N;

  // ports of submodule f_flush_reqs_10
  wire f_flush_reqs_10$CLR,
       f_flush_reqs_10$DEQ,
       f_flush_reqs_10$D_IN,
       f_flush_reqs_10$D_OUT,
       f_flush_reqs_10$EMPTY_N,
       f_flush_reqs_10$ENQ,
       f_flush_reqs_10$FULL_N;

  // ports of submodule f_flush_reqs_11
  wire f_flush_reqs_11$CLR,
       f_flush_reqs_11$DEQ,
       f_flush_reqs_11$D_IN,
       f_flush_reqs_11$D_OUT,
       f_flush_reqs_11$EMPTY_N,
       f_flush_reqs_11$ENQ,
       f_flush_reqs_11$FULL_N;

  // ports of submodule f_flush_reqs_12
  wire f_flush_reqs_12$CLR,
       f_flush_reqs_12$DEQ,
       f_flush_reqs_12$D_IN,
       f_flush_reqs_12$D_OUT,
       f_flush_reqs_12$EMPTY_N,
       f_flush_reqs_12$ENQ,
       f_flush_reqs_12$FULL_N;

  // ports of submodule f_flush_reqs_13
  wire f_flush_reqs_13$CLR,
       f_flush_reqs_13$DEQ,
       f_flush_reqs_13$D_IN,
       f_flush_reqs_13$D_OUT,
       f_flush_reqs_13$EMPTY_N,
       f_flush_reqs_13$ENQ,
       f_flush_reqs_13$FULL_N;

  // ports of submodule f_flush_reqs_14
  wire f_flush_reqs_14$CLR,
       f_flush_reqs_14$DEQ,
       f_flush_reqs_14$D_IN,
       f_flush_reqs_14$D_OUT,
       f_flush_reqs_14$EMPTY_N,
       f_flush_reqs_14$ENQ,
       f_flush_reqs_14$FULL_N;

  // ports of submodule f_flush_reqs_15
  wire f_flush_reqs_15$CLR,
       f_flush_reqs_15$DEQ,
       f_flush_reqs_15$D_IN,
       f_flush_reqs_15$D_OUT,
       f_flush_reqs_15$EMPTY_N,
       f_flush_reqs_15$ENQ,
       f_flush_reqs_15$FULL_N;

  // ports of submodule f_flush_reqs_2
  wire f_flush_reqs_2$CLR,
       f_flush_reqs_2$DEQ,
       f_flush_reqs_2$D_IN,
       f_flush_reqs_2$D_OUT,
       f_flush_reqs_2$EMPTY_N,
       f_flush_reqs_2$ENQ,
       f_flush_reqs_2$FULL_N;

  // ports of submodule f_flush_reqs_3
  wire f_flush_reqs_3$CLR,
       f_flush_reqs_3$DEQ,
       f_flush_reqs_3$D_IN,
       f_flush_reqs_3$D_OUT,
       f_flush_reqs_3$EMPTY_N,
       f_flush_reqs_3$ENQ,
       f_flush_reqs_3$FULL_N;

  // ports of submodule f_flush_reqs_4
  wire f_flush_reqs_4$CLR,
       f_flush_reqs_4$DEQ,
       f_flush_reqs_4$D_IN,
       f_flush_reqs_4$D_OUT,
       f_flush_reqs_4$EMPTY_N,
       f_flush_reqs_4$ENQ,
       f_flush_reqs_4$FULL_N;

  // ports of submodule f_flush_reqs_5
  wire f_flush_reqs_5$CLR,
       f_flush_reqs_5$DEQ,
       f_flush_reqs_5$D_IN,
       f_flush_reqs_5$D_OUT,
       f_flush_reqs_5$EMPTY_N,
       f_flush_reqs_5$ENQ,
       f_flush_reqs_5$FULL_N;

  // ports of submodule f_flush_reqs_6
  wire f_flush_reqs_6$CLR,
       f_flush_reqs_6$DEQ,
       f_flush_reqs_6$D_IN,
       f_flush_reqs_6$D_OUT,
       f_flush_reqs_6$EMPTY_N,
       f_flush_reqs_6$ENQ,
       f_flush_reqs_6$FULL_N;

  // ports of submodule f_flush_reqs_7
  wire f_flush_reqs_7$CLR,
       f_flush_reqs_7$DEQ,
       f_flush_reqs_7$D_IN,
       f_flush_reqs_7$D_OUT,
       f_flush_reqs_7$EMPTY_N,
       f_flush_reqs_7$ENQ,
       f_flush_reqs_7$FULL_N;

  // ports of submodule f_flush_reqs_8
  wire f_flush_reqs_8$CLR,
       f_flush_reqs_8$DEQ,
       f_flush_reqs_8$D_IN,
       f_flush_reqs_8$D_OUT,
       f_flush_reqs_8$EMPTY_N,
       f_flush_reqs_8$ENQ,
       f_flush_reqs_8$FULL_N;

  // ports of submodule f_flush_reqs_9
  wire f_flush_reqs_9$CLR,
       f_flush_reqs_9$DEQ,
       f_flush_reqs_9$D_IN,
       f_flush_reqs_9$D_OUT,
       f_flush_reqs_9$EMPTY_N,
       f_flush_reqs_9$ENQ,
       f_flush_reqs_9$FULL_N;

  // ports of submodule f_flush_rsps_0
  wire f_flush_rsps_0$CLR,
       f_flush_rsps_0$DEQ,
       f_flush_rsps_0$D_IN,
       f_flush_rsps_0$D_OUT,
       f_flush_rsps_0$EMPTY_N,
       f_flush_rsps_0$ENQ,
       f_flush_rsps_0$FULL_N;

  // ports of submodule f_flush_rsps_1
  wire f_flush_rsps_1$CLR,
       f_flush_rsps_1$DEQ,
       f_flush_rsps_1$D_IN,
       f_flush_rsps_1$D_OUT,
       f_flush_rsps_1$EMPTY_N,
       f_flush_rsps_1$ENQ,
       f_flush_rsps_1$FULL_N;

  // ports of submodule f_flush_rsps_10
  wire f_flush_rsps_10$CLR,
       f_flush_rsps_10$DEQ,
       f_flush_rsps_10$D_IN,
       f_flush_rsps_10$D_OUT,
       f_flush_rsps_10$EMPTY_N,
       f_flush_rsps_10$ENQ,
       f_flush_rsps_10$FULL_N;

  // ports of submodule f_flush_rsps_11
  wire f_flush_rsps_11$CLR,
       f_flush_rsps_11$DEQ,
       f_flush_rsps_11$D_IN,
       f_flush_rsps_11$D_OUT,
       f_flush_rsps_11$EMPTY_N,
       f_flush_rsps_11$ENQ,
       f_flush_rsps_11$FULL_N;

  // ports of submodule f_flush_rsps_12
  wire f_flush_rsps_12$CLR,
       f_flush_rsps_12$DEQ,
       f_flush_rsps_12$D_IN,
       f_flush_rsps_12$D_OUT,
       f_flush_rsps_12$EMPTY_N,
       f_flush_rsps_12$ENQ,
       f_flush_rsps_12$FULL_N;

  // ports of submodule f_flush_rsps_13
  wire f_flush_rsps_13$CLR,
       f_flush_rsps_13$DEQ,
       f_flush_rsps_13$D_IN,
       f_flush_rsps_13$D_OUT,
       f_flush_rsps_13$EMPTY_N,
       f_flush_rsps_13$ENQ,
       f_flush_rsps_13$FULL_N;

  // ports of submodule f_flush_rsps_14
  wire f_flush_rsps_14$CLR,
       f_flush_rsps_14$DEQ,
       f_flush_rsps_14$D_IN,
       f_flush_rsps_14$D_OUT,
       f_flush_rsps_14$EMPTY_N,
       f_flush_rsps_14$ENQ,
       f_flush_rsps_14$FULL_N;

  // ports of submodule f_flush_rsps_15
  wire f_flush_rsps_15$CLR,
       f_flush_rsps_15$DEQ,
       f_flush_rsps_15$D_IN,
       f_flush_rsps_15$D_OUT,
       f_flush_rsps_15$EMPTY_N,
       f_flush_rsps_15$ENQ,
       f_flush_rsps_15$FULL_N;

  // ports of submodule f_flush_rsps_2
  wire f_flush_rsps_2$CLR,
       f_flush_rsps_2$DEQ,
       f_flush_rsps_2$D_IN,
       f_flush_rsps_2$D_OUT,
       f_flush_rsps_2$EMPTY_N,
       f_flush_rsps_2$ENQ,
       f_flush_rsps_2$FULL_N;

  // ports of submodule f_flush_rsps_3
  wire f_flush_rsps_3$CLR,
       f_flush_rsps_3$DEQ,
       f_flush_rsps_3$D_IN,
       f_flush_rsps_3$D_OUT,
       f_flush_rsps_3$EMPTY_N,
       f_flush_rsps_3$ENQ,
       f_flush_rsps_3$FULL_N;

  // ports of submodule f_flush_rsps_4
  wire f_flush_rsps_4$CLR,
       f_flush_rsps_4$DEQ,
       f_flush_rsps_4$D_IN,
       f_flush_rsps_4$D_OUT,
       f_flush_rsps_4$EMPTY_N,
       f_flush_rsps_4$ENQ,
       f_flush_rsps_4$FULL_N;

  // ports of submodule f_flush_rsps_5
  wire f_flush_rsps_5$CLR,
       f_flush_rsps_5$DEQ,
       f_flush_rsps_5$D_IN,
       f_flush_rsps_5$D_OUT,
       f_flush_rsps_5$EMPTY_N,
       f_flush_rsps_5$ENQ,
       f_flush_rsps_5$FULL_N;

  // ports of submodule f_flush_rsps_6
  wire f_flush_rsps_6$CLR,
       f_flush_rsps_6$DEQ,
       f_flush_rsps_6$D_IN,
       f_flush_rsps_6$D_OUT,
       f_flush_rsps_6$EMPTY_N,
       f_flush_rsps_6$ENQ,
       f_flush_rsps_6$FULL_N;

  // ports of submodule f_flush_rsps_7
  wire f_flush_rsps_7$CLR,
       f_flush_rsps_7$DEQ,
       f_flush_rsps_7$D_IN,
       f_flush_rsps_7$D_OUT,
       f_flush_rsps_7$EMPTY_N,
       f_flush_rsps_7$ENQ,
       f_flush_rsps_7$FULL_N;

  // ports of submodule f_flush_rsps_8
  wire f_flush_rsps_8$CLR,
       f_flush_rsps_8$DEQ,
       f_flush_rsps_8$D_IN,
       f_flush_rsps_8$D_OUT,
       f_flush_rsps_8$EMPTY_N,
       f_flush_rsps_8$ENQ,
       f_flush_rsps_8$FULL_N;

  // ports of submodule f_flush_rsps_9
  wire f_flush_rsps_9$CLR,
       f_flush_rsps_9$DEQ,
       f_flush_rsps_9$D_IN,
       f_flush_rsps_9$D_OUT,
       f_flush_rsps_9$EMPTY_N,
       f_flush_rsps_9$ENQ,
       f_flush_rsps_9$FULL_N;

  // ports of submodule f_reqs_0
  wire [152 : 0] f_reqs_0$D_IN, f_reqs_0$D_OUT;
  wire f_reqs_0$CLR,
       f_reqs_0$DEQ,
       f_reqs_0$EMPTY_N,
       f_reqs_0$ENQ,
       f_reqs_0$FULL_N;

  // ports of submodule f_reqs_1
  wire [152 : 0] f_reqs_1$D_IN, f_reqs_1$D_OUT;
  wire f_reqs_1$CLR,
       f_reqs_1$DEQ,
       f_reqs_1$EMPTY_N,
       f_reqs_1$ENQ,
       f_reqs_1$FULL_N;

  // ports of submodule f_reqs_10
  wire [152 : 0] f_reqs_10$D_IN, f_reqs_10$D_OUT;
  wire f_reqs_10$CLR,
       f_reqs_10$DEQ,
       f_reqs_10$EMPTY_N,
       f_reqs_10$ENQ,
       f_reqs_10$FULL_N;

  // ports of submodule f_reqs_11
  wire [152 : 0] f_reqs_11$D_IN, f_reqs_11$D_OUT;
  wire f_reqs_11$CLR,
       f_reqs_11$DEQ,
       f_reqs_11$EMPTY_N,
       f_reqs_11$ENQ,
       f_reqs_11$FULL_N;

  // ports of submodule f_reqs_12
  wire [152 : 0] f_reqs_12$D_IN, f_reqs_12$D_OUT;
  wire f_reqs_12$CLR,
       f_reqs_12$DEQ,
       f_reqs_12$EMPTY_N,
       f_reqs_12$ENQ,
       f_reqs_12$FULL_N;

  // ports of submodule f_reqs_13
  wire [152 : 0] f_reqs_13$D_IN, f_reqs_13$D_OUT;
  wire f_reqs_13$CLR,
       f_reqs_13$DEQ,
       f_reqs_13$EMPTY_N,
       f_reqs_13$ENQ,
       f_reqs_13$FULL_N;

  // ports of submodule f_reqs_14
  wire [152 : 0] f_reqs_14$D_IN, f_reqs_14$D_OUT;
  wire f_reqs_14$CLR,
       f_reqs_14$DEQ,
       f_reqs_14$EMPTY_N,
       f_reqs_14$ENQ,
       f_reqs_14$FULL_N;

  // ports of submodule f_reqs_15
  wire [152 : 0] f_reqs_15$D_IN, f_reqs_15$D_OUT;
  wire f_reqs_15$CLR,
       f_reqs_15$DEQ,
       f_reqs_15$EMPTY_N,
       f_reqs_15$ENQ,
       f_reqs_15$FULL_N;

  // ports of submodule f_reqs_2
  wire [152 : 0] f_reqs_2$D_IN, f_reqs_2$D_OUT;
  wire f_reqs_2$CLR,
       f_reqs_2$DEQ,
       f_reqs_2$EMPTY_N,
       f_reqs_2$ENQ,
       f_reqs_2$FULL_N;

  // ports of submodule f_reqs_3
  wire [152 : 0] f_reqs_3$D_IN, f_reqs_3$D_OUT;
  wire f_reqs_3$CLR,
       f_reqs_3$DEQ,
       f_reqs_3$EMPTY_N,
       f_reqs_3$ENQ,
       f_reqs_3$FULL_N;

  // ports of submodule f_reqs_4
  wire [152 : 0] f_reqs_4$D_IN, f_reqs_4$D_OUT;
  wire f_reqs_4$CLR,
       f_reqs_4$DEQ,
       f_reqs_4$EMPTY_N,
       f_reqs_4$ENQ,
       f_reqs_4$FULL_N;

  // ports of submodule f_reqs_5
  wire [152 : 0] f_reqs_5$D_IN, f_reqs_5$D_OUT;
  wire f_reqs_5$CLR,
       f_reqs_5$DEQ,
       f_reqs_5$EMPTY_N,
       f_reqs_5$ENQ,
       f_reqs_5$FULL_N;

  // ports of submodule f_reqs_6
  wire [152 : 0] f_reqs_6$D_IN, f_reqs_6$D_OUT;
  wire f_reqs_6$CLR,
       f_reqs_6$DEQ,
       f_reqs_6$EMPTY_N,
       f_reqs_6$ENQ,
       f_reqs_6$FULL_N;

  // ports of submodule f_reqs_7
  wire [152 : 0] f_reqs_7$D_IN, f_reqs_7$D_OUT;
  wire f_reqs_7$CLR,
       f_reqs_7$DEQ,
       f_reqs_7$EMPTY_N,
       f_reqs_7$ENQ,
       f_reqs_7$FULL_N;

  // ports of submodule f_reqs_8
  wire [152 : 0] f_reqs_8$D_IN, f_reqs_8$D_OUT;
  wire f_reqs_8$CLR,
       f_reqs_8$DEQ,
       f_reqs_8$EMPTY_N,
       f_reqs_8$ENQ,
       f_reqs_8$FULL_N;

  // ports of submodule f_reqs_9
  wire [152 : 0] f_reqs_9$D_IN, f_reqs_9$D_OUT;
  wire f_reqs_9$CLR,
       f_reqs_9$DEQ,
       f_reqs_9$EMPTY_N,
       f_reqs_9$ENQ,
       f_reqs_9$FULL_N;

  // ports of submodule f_rsps_0
  wire [101 : 0] f_rsps_0$D_IN, f_rsps_0$D_OUT;
  wire f_rsps_0$CLR,
       f_rsps_0$DEQ,
       f_rsps_0$EMPTY_N,
       f_rsps_0$ENQ,
       f_rsps_0$FULL_N;

  // ports of submodule f_rsps_1
  wire [101 : 0] f_rsps_1$D_IN, f_rsps_1$D_OUT;
  wire f_rsps_1$CLR,
       f_rsps_1$DEQ,
       f_rsps_1$EMPTY_N,
       f_rsps_1$ENQ,
       f_rsps_1$FULL_N;

  // ports of submodule f_rsps_10
  wire [101 : 0] f_rsps_10$D_IN, f_rsps_10$D_OUT;
  wire f_rsps_10$CLR,
       f_rsps_10$DEQ,
       f_rsps_10$EMPTY_N,
       f_rsps_10$ENQ,
       f_rsps_10$FULL_N;

  // ports of submodule f_rsps_11
  wire [101 : 0] f_rsps_11$D_IN, f_rsps_11$D_OUT;
  wire f_rsps_11$CLR,
       f_rsps_11$DEQ,
       f_rsps_11$EMPTY_N,
       f_rsps_11$ENQ,
       f_rsps_11$FULL_N;

  // ports of submodule f_rsps_12
  wire [101 : 0] f_rsps_12$D_IN, f_rsps_12$D_OUT;
  wire f_rsps_12$CLR,
       f_rsps_12$DEQ,
       f_rsps_12$EMPTY_N,
       f_rsps_12$ENQ,
       f_rsps_12$FULL_N;

  // ports of submodule f_rsps_13
  wire [101 : 0] f_rsps_13$D_IN, f_rsps_13$D_OUT;
  wire f_rsps_13$CLR,
       f_rsps_13$DEQ,
       f_rsps_13$EMPTY_N,
       f_rsps_13$ENQ,
       f_rsps_13$FULL_N;

  // ports of submodule f_rsps_14
  wire [101 : 0] f_rsps_14$D_IN, f_rsps_14$D_OUT;
  wire f_rsps_14$CLR,
       f_rsps_14$DEQ,
       f_rsps_14$EMPTY_N,
       f_rsps_14$ENQ,
       f_rsps_14$FULL_N;

  // ports of submodule f_rsps_15
  wire [101 : 0] f_rsps_15$D_IN, f_rsps_15$D_OUT;
  wire f_rsps_15$CLR,
       f_rsps_15$DEQ,
       f_rsps_15$EMPTY_N,
       f_rsps_15$ENQ,
       f_rsps_15$FULL_N;

  // ports of submodule f_rsps_2
  wire [101 : 0] f_rsps_2$D_IN, f_rsps_2$D_OUT;
  wire f_rsps_2$CLR,
       f_rsps_2$DEQ,
       f_rsps_2$EMPTY_N,
       f_rsps_2$ENQ,
       f_rsps_2$FULL_N;

  // ports of submodule f_rsps_3
  wire [101 : 0] f_rsps_3$D_IN, f_rsps_3$D_OUT;
  wire f_rsps_3$CLR,
       f_rsps_3$DEQ,
       f_rsps_3$EMPTY_N,
       f_rsps_3$ENQ,
       f_rsps_3$FULL_N;

  // ports of submodule f_rsps_4
  wire [101 : 0] f_rsps_4$D_IN, f_rsps_4$D_OUT;
  wire f_rsps_4$CLR,
       f_rsps_4$DEQ,
       f_rsps_4$EMPTY_N,
       f_rsps_4$ENQ,
       f_rsps_4$FULL_N;

  // ports of submodule f_rsps_5
  wire [101 : 0] f_rsps_5$D_IN, f_rsps_5$D_OUT;
  wire f_rsps_5$CLR,
       f_rsps_5$DEQ,
       f_rsps_5$EMPTY_N,
       f_rsps_5$ENQ,
       f_rsps_5$FULL_N;

  // ports of submodule f_rsps_6
  wire [101 : 0] f_rsps_6$D_IN, f_rsps_6$D_OUT;
  wire f_rsps_6$CLR,
       f_rsps_6$DEQ,
       f_rsps_6$EMPTY_N,
       f_rsps_6$ENQ,
       f_rsps_6$FULL_N;

  // ports of submodule f_rsps_7
  wire [101 : 0] f_rsps_7$D_IN, f_rsps_7$D_OUT;
  wire f_rsps_7$CLR,
       f_rsps_7$DEQ,
       f_rsps_7$EMPTY_N,
       f_rsps_7$ENQ,
       f_rsps_7$FULL_N;

  // ports of submodule f_rsps_8
  wire [101 : 0] f_rsps_8$D_IN, f_rsps_8$D_OUT;
  wire f_rsps_8$CLR,
       f_rsps_8$DEQ,
       f_rsps_8$EMPTY_N,
       f_rsps_8$ENQ,
       f_rsps_8$FULL_N;

  // ports of submodule f_rsps_9
  wire [101 : 0] f_rsps_9$D_IN, f_rsps_9$D_OUT;
  wire f_rsps_9$CLR,
       f_rsps_9$DEQ,
       f_rsps_9$EMPTY_N,
       f_rsps_9$ENQ,
       f_rsps_9$FULL_N;

  // ports of submodule v_chanvadds_0
  wire [152 : 0] v_chanvadds_0$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_0$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_0$result;
  wire [47 : 0] v_chanvadds_0$start_rd_base_1,
		v_chanvadds_0$start_rd_base_2,
		v_chanvadds_0$start_rd_limit_1,
		v_chanvadds_0$start_rd_limit_2,
		v_chanvadds_0$start_wr_base,
		v_chanvadds_0$start_wr_limit;
  wire [2 : 0] v_chanvadds_0$start_chan;
  wire [1 : 0] v_chanvadds_0$start_aeid;
  wire v_chanvadds_0$EN_mc_client_flush_request_get,
       v_chanvadds_0$EN_mc_client_flush_response_put,
       v_chanvadds_0$EN_mc_client_req_rsp_request_get,
       v_chanvadds_0$EN_mc_client_req_rsp_response_put,
       v_chanvadds_0$EN_result,
       v_chanvadds_0$EN_start,
       v_chanvadds_0$RDY_mc_client_flush_request_get,
       v_chanvadds_0$RDY_mc_client_flush_response_put,
       v_chanvadds_0$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_0$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_0$RDY_result,
       v_chanvadds_0$RDY_start,
       v_chanvadds_0$mc_client_flush_request_get,
       v_chanvadds_0$mc_client_flush_response_put,
       v_chanvadds_0$start_evenNotOdd;

  // ports of submodule v_chanvadds_1
  wire [152 : 0] v_chanvadds_1$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_1$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_1$result;
  wire [47 : 0] v_chanvadds_1$start_rd_base_1,
		v_chanvadds_1$start_rd_base_2,
		v_chanvadds_1$start_rd_limit_1,
		v_chanvadds_1$start_rd_limit_2,
		v_chanvadds_1$start_wr_base,
		v_chanvadds_1$start_wr_limit;
  wire [2 : 0] v_chanvadds_1$start_chan;
  wire [1 : 0] v_chanvadds_1$start_aeid;
  wire v_chanvadds_1$EN_mc_client_flush_request_get,
       v_chanvadds_1$EN_mc_client_flush_response_put,
       v_chanvadds_1$EN_mc_client_req_rsp_request_get,
       v_chanvadds_1$EN_mc_client_req_rsp_response_put,
       v_chanvadds_1$EN_result,
       v_chanvadds_1$EN_start,
       v_chanvadds_1$RDY_mc_client_flush_request_get,
       v_chanvadds_1$RDY_mc_client_flush_response_put,
       v_chanvadds_1$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_1$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_1$RDY_result,
       v_chanvadds_1$RDY_start,
       v_chanvadds_1$mc_client_flush_request_get,
       v_chanvadds_1$mc_client_flush_response_put,
       v_chanvadds_1$start_evenNotOdd;

  // ports of submodule v_chanvadds_10
  wire [152 : 0] v_chanvadds_10$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_10$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_10$result;
  wire [47 : 0] v_chanvadds_10$start_rd_base_1,
		v_chanvadds_10$start_rd_base_2,
		v_chanvadds_10$start_rd_limit_1,
		v_chanvadds_10$start_rd_limit_2,
		v_chanvadds_10$start_wr_base,
		v_chanvadds_10$start_wr_limit;
  wire [2 : 0] v_chanvadds_10$start_chan;
  wire [1 : 0] v_chanvadds_10$start_aeid;
  wire v_chanvadds_10$EN_mc_client_flush_request_get,
       v_chanvadds_10$EN_mc_client_flush_response_put,
       v_chanvadds_10$EN_mc_client_req_rsp_request_get,
       v_chanvadds_10$EN_mc_client_req_rsp_response_put,
       v_chanvadds_10$EN_result,
       v_chanvadds_10$EN_start,
       v_chanvadds_10$RDY_mc_client_flush_request_get,
       v_chanvadds_10$RDY_mc_client_flush_response_put,
       v_chanvadds_10$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_10$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_10$RDY_result,
       v_chanvadds_10$RDY_start,
       v_chanvadds_10$mc_client_flush_request_get,
       v_chanvadds_10$mc_client_flush_response_put,
       v_chanvadds_10$start_evenNotOdd;

  // ports of submodule v_chanvadds_11
  wire [152 : 0] v_chanvadds_11$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_11$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_11$result;
  wire [47 : 0] v_chanvadds_11$start_rd_base_1,
		v_chanvadds_11$start_rd_base_2,
		v_chanvadds_11$start_rd_limit_1,
		v_chanvadds_11$start_rd_limit_2,
		v_chanvadds_11$start_wr_base,
		v_chanvadds_11$start_wr_limit;
  wire [2 : 0] v_chanvadds_11$start_chan;
  wire [1 : 0] v_chanvadds_11$start_aeid;
  wire v_chanvadds_11$EN_mc_client_flush_request_get,
       v_chanvadds_11$EN_mc_client_flush_response_put,
       v_chanvadds_11$EN_mc_client_req_rsp_request_get,
       v_chanvadds_11$EN_mc_client_req_rsp_response_put,
       v_chanvadds_11$EN_result,
       v_chanvadds_11$EN_start,
       v_chanvadds_11$RDY_mc_client_flush_request_get,
       v_chanvadds_11$RDY_mc_client_flush_response_put,
       v_chanvadds_11$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_11$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_11$RDY_result,
       v_chanvadds_11$RDY_start,
       v_chanvadds_11$mc_client_flush_request_get,
       v_chanvadds_11$mc_client_flush_response_put,
       v_chanvadds_11$start_evenNotOdd;

  // ports of submodule v_chanvadds_12
  wire [152 : 0] v_chanvadds_12$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_12$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_12$result;
  wire [47 : 0] v_chanvadds_12$start_rd_base_1,
		v_chanvadds_12$start_rd_base_2,
		v_chanvadds_12$start_rd_limit_1,
		v_chanvadds_12$start_rd_limit_2,
		v_chanvadds_12$start_wr_base,
		v_chanvadds_12$start_wr_limit;
  wire [2 : 0] v_chanvadds_12$start_chan;
  wire [1 : 0] v_chanvadds_12$start_aeid;
  wire v_chanvadds_12$EN_mc_client_flush_request_get,
       v_chanvadds_12$EN_mc_client_flush_response_put,
       v_chanvadds_12$EN_mc_client_req_rsp_request_get,
       v_chanvadds_12$EN_mc_client_req_rsp_response_put,
       v_chanvadds_12$EN_result,
       v_chanvadds_12$EN_start,
       v_chanvadds_12$RDY_mc_client_flush_request_get,
       v_chanvadds_12$RDY_mc_client_flush_response_put,
       v_chanvadds_12$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_12$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_12$RDY_result,
       v_chanvadds_12$RDY_start,
       v_chanvadds_12$mc_client_flush_request_get,
       v_chanvadds_12$mc_client_flush_response_put,
       v_chanvadds_12$start_evenNotOdd;

  // ports of submodule v_chanvadds_13
  wire [152 : 0] v_chanvadds_13$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_13$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_13$result;
  wire [47 : 0] v_chanvadds_13$start_rd_base_1,
		v_chanvadds_13$start_rd_base_2,
		v_chanvadds_13$start_rd_limit_1,
		v_chanvadds_13$start_rd_limit_2,
		v_chanvadds_13$start_wr_base,
		v_chanvadds_13$start_wr_limit;
  wire [2 : 0] v_chanvadds_13$start_chan;
  wire [1 : 0] v_chanvadds_13$start_aeid;
  wire v_chanvadds_13$EN_mc_client_flush_request_get,
       v_chanvadds_13$EN_mc_client_flush_response_put,
       v_chanvadds_13$EN_mc_client_req_rsp_request_get,
       v_chanvadds_13$EN_mc_client_req_rsp_response_put,
       v_chanvadds_13$EN_result,
       v_chanvadds_13$EN_start,
       v_chanvadds_13$RDY_mc_client_flush_request_get,
       v_chanvadds_13$RDY_mc_client_flush_response_put,
       v_chanvadds_13$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_13$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_13$RDY_result,
       v_chanvadds_13$RDY_start,
       v_chanvadds_13$mc_client_flush_request_get,
       v_chanvadds_13$mc_client_flush_response_put,
       v_chanvadds_13$start_evenNotOdd;

  // ports of submodule v_chanvadds_14
  wire [152 : 0] v_chanvadds_14$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_14$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_14$result;
  wire [47 : 0] v_chanvadds_14$start_rd_base_1,
		v_chanvadds_14$start_rd_base_2,
		v_chanvadds_14$start_rd_limit_1,
		v_chanvadds_14$start_rd_limit_2,
		v_chanvadds_14$start_wr_base,
		v_chanvadds_14$start_wr_limit;
  wire [2 : 0] v_chanvadds_14$start_chan;
  wire [1 : 0] v_chanvadds_14$start_aeid;
  wire v_chanvadds_14$EN_mc_client_flush_request_get,
       v_chanvadds_14$EN_mc_client_flush_response_put,
       v_chanvadds_14$EN_mc_client_req_rsp_request_get,
       v_chanvadds_14$EN_mc_client_req_rsp_response_put,
       v_chanvadds_14$EN_result,
       v_chanvadds_14$EN_start,
       v_chanvadds_14$RDY_mc_client_flush_request_get,
       v_chanvadds_14$RDY_mc_client_flush_response_put,
       v_chanvadds_14$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_14$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_14$RDY_result,
       v_chanvadds_14$RDY_start,
       v_chanvadds_14$mc_client_flush_request_get,
       v_chanvadds_14$mc_client_flush_response_put,
       v_chanvadds_14$start_evenNotOdd;

  // ports of submodule v_chanvadds_15
  wire [152 : 0] v_chanvadds_15$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_15$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_15$result;
  wire [47 : 0] v_chanvadds_15$start_rd_base_1,
		v_chanvadds_15$start_rd_base_2,
		v_chanvadds_15$start_rd_limit_1,
		v_chanvadds_15$start_rd_limit_2,
		v_chanvadds_15$start_wr_base,
		v_chanvadds_15$start_wr_limit;
  wire [2 : 0] v_chanvadds_15$start_chan;
  wire [1 : 0] v_chanvadds_15$start_aeid;
  wire v_chanvadds_15$EN_mc_client_flush_request_get,
       v_chanvadds_15$EN_mc_client_flush_response_put,
       v_chanvadds_15$EN_mc_client_req_rsp_request_get,
       v_chanvadds_15$EN_mc_client_req_rsp_response_put,
       v_chanvadds_15$EN_result,
       v_chanvadds_15$EN_start,
       v_chanvadds_15$RDY_mc_client_flush_request_get,
       v_chanvadds_15$RDY_mc_client_flush_response_put,
       v_chanvadds_15$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_15$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_15$RDY_result,
       v_chanvadds_15$RDY_start,
       v_chanvadds_15$mc_client_flush_request_get,
       v_chanvadds_15$mc_client_flush_response_put,
       v_chanvadds_15$start_evenNotOdd;

  // ports of submodule v_chanvadds_2
  wire [152 : 0] v_chanvadds_2$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_2$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_2$result;
  wire [47 : 0] v_chanvadds_2$start_rd_base_1,
		v_chanvadds_2$start_rd_base_2,
		v_chanvadds_2$start_rd_limit_1,
		v_chanvadds_2$start_rd_limit_2,
		v_chanvadds_2$start_wr_base,
		v_chanvadds_2$start_wr_limit;
  wire [2 : 0] v_chanvadds_2$start_chan;
  wire [1 : 0] v_chanvadds_2$start_aeid;
  wire v_chanvadds_2$EN_mc_client_flush_request_get,
       v_chanvadds_2$EN_mc_client_flush_response_put,
       v_chanvadds_2$EN_mc_client_req_rsp_request_get,
       v_chanvadds_2$EN_mc_client_req_rsp_response_put,
       v_chanvadds_2$EN_result,
       v_chanvadds_2$EN_start,
       v_chanvadds_2$RDY_mc_client_flush_request_get,
       v_chanvadds_2$RDY_mc_client_flush_response_put,
       v_chanvadds_2$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_2$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_2$RDY_result,
       v_chanvadds_2$RDY_start,
       v_chanvadds_2$mc_client_flush_request_get,
       v_chanvadds_2$mc_client_flush_response_put,
       v_chanvadds_2$start_evenNotOdd;

  // ports of submodule v_chanvadds_3
  wire [152 : 0] v_chanvadds_3$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_3$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_3$result;
  wire [47 : 0] v_chanvadds_3$start_rd_base_1,
		v_chanvadds_3$start_rd_base_2,
		v_chanvadds_3$start_rd_limit_1,
		v_chanvadds_3$start_rd_limit_2,
		v_chanvadds_3$start_wr_base,
		v_chanvadds_3$start_wr_limit;
  wire [2 : 0] v_chanvadds_3$start_chan;
  wire [1 : 0] v_chanvadds_3$start_aeid;
  wire v_chanvadds_3$EN_mc_client_flush_request_get,
       v_chanvadds_3$EN_mc_client_flush_response_put,
       v_chanvadds_3$EN_mc_client_req_rsp_request_get,
       v_chanvadds_3$EN_mc_client_req_rsp_response_put,
       v_chanvadds_3$EN_result,
       v_chanvadds_3$EN_start,
       v_chanvadds_3$RDY_mc_client_flush_request_get,
       v_chanvadds_3$RDY_mc_client_flush_response_put,
       v_chanvadds_3$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_3$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_3$RDY_result,
       v_chanvadds_3$RDY_start,
       v_chanvadds_3$mc_client_flush_request_get,
       v_chanvadds_3$mc_client_flush_response_put,
       v_chanvadds_3$start_evenNotOdd;

  // ports of submodule v_chanvadds_4
  wire [152 : 0] v_chanvadds_4$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_4$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_4$result;
  wire [47 : 0] v_chanvadds_4$start_rd_base_1,
		v_chanvadds_4$start_rd_base_2,
		v_chanvadds_4$start_rd_limit_1,
		v_chanvadds_4$start_rd_limit_2,
		v_chanvadds_4$start_wr_base,
		v_chanvadds_4$start_wr_limit;
  wire [2 : 0] v_chanvadds_4$start_chan;
  wire [1 : 0] v_chanvadds_4$start_aeid;
  wire v_chanvadds_4$EN_mc_client_flush_request_get,
       v_chanvadds_4$EN_mc_client_flush_response_put,
       v_chanvadds_4$EN_mc_client_req_rsp_request_get,
       v_chanvadds_4$EN_mc_client_req_rsp_response_put,
       v_chanvadds_4$EN_result,
       v_chanvadds_4$EN_start,
       v_chanvadds_4$RDY_mc_client_flush_request_get,
       v_chanvadds_4$RDY_mc_client_flush_response_put,
       v_chanvadds_4$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_4$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_4$RDY_result,
       v_chanvadds_4$RDY_start,
       v_chanvadds_4$mc_client_flush_request_get,
       v_chanvadds_4$mc_client_flush_response_put,
       v_chanvadds_4$start_evenNotOdd;

  // ports of submodule v_chanvadds_5
  wire [152 : 0] v_chanvadds_5$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_5$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_5$result;
  wire [47 : 0] v_chanvadds_5$start_rd_base_1,
		v_chanvadds_5$start_rd_base_2,
		v_chanvadds_5$start_rd_limit_1,
		v_chanvadds_5$start_rd_limit_2,
		v_chanvadds_5$start_wr_base,
		v_chanvadds_5$start_wr_limit;
  wire [2 : 0] v_chanvadds_5$start_chan;
  wire [1 : 0] v_chanvadds_5$start_aeid;
  wire v_chanvadds_5$EN_mc_client_flush_request_get,
       v_chanvadds_5$EN_mc_client_flush_response_put,
       v_chanvadds_5$EN_mc_client_req_rsp_request_get,
       v_chanvadds_5$EN_mc_client_req_rsp_response_put,
       v_chanvadds_5$EN_result,
       v_chanvadds_5$EN_start,
       v_chanvadds_5$RDY_mc_client_flush_request_get,
       v_chanvadds_5$RDY_mc_client_flush_response_put,
       v_chanvadds_5$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_5$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_5$RDY_result,
       v_chanvadds_5$RDY_start,
       v_chanvadds_5$mc_client_flush_request_get,
       v_chanvadds_5$mc_client_flush_response_put,
       v_chanvadds_5$start_evenNotOdd;

  // ports of submodule v_chanvadds_6
  wire [152 : 0] v_chanvadds_6$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_6$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_6$result;
  wire [47 : 0] v_chanvadds_6$start_rd_base_1,
		v_chanvadds_6$start_rd_base_2,
		v_chanvadds_6$start_rd_limit_1,
		v_chanvadds_6$start_rd_limit_2,
		v_chanvadds_6$start_wr_base,
		v_chanvadds_6$start_wr_limit;
  wire [2 : 0] v_chanvadds_6$start_chan;
  wire [1 : 0] v_chanvadds_6$start_aeid;
  wire v_chanvadds_6$EN_mc_client_flush_request_get,
       v_chanvadds_6$EN_mc_client_flush_response_put,
       v_chanvadds_6$EN_mc_client_req_rsp_request_get,
       v_chanvadds_6$EN_mc_client_req_rsp_response_put,
       v_chanvadds_6$EN_result,
       v_chanvadds_6$EN_start,
       v_chanvadds_6$RDY_mc_client_flush_request_get,
       v_chanvadds_6$RDY_mc_client_flush_response_put,
       v_chanvadds_6$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_6$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_6$RDY_result,
       v_chanvadds_6$RDY_start,
       v_chanvadds_6$mc_client_flush_request_get,
       v_chanvadds_6$mc_client_flush_response_put,
       v_chanvadds_6$start_evenNotOdd;

  // ports of submodule v_chanvadds_7
  wire [152 : 0] v_chanvadds_7$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_7$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_7$result;
  wire [47 : 0] v_chanvadds_7$start_rd_base_1,
		v_chanvadds_7$start_rd_base_2,
		v_chanvadds_7$start_rd_limit_1,
		v_chanvadds_7$start_rd_limit_2,
		v_chanvadds_7$start_wr_base,
		v_chanvadds_7$start_wr_limit;
  wire [2 : 0] v_chanvadds_7$start_chan;
  wire [1 : 0] v_chanvadds_7$start_aeid;
  wire v_chanvadds_7$EN_mc_client_flush_request_get,
       v_chanvadds_7$EN_mc_client_flush_response_put,
       v_chanvadds_7$EN_mc_client_req_rsp_request_get,
       v_chanvadds_7$EN_mc_client_req_rsp_response_put,
       v_chanvadds_7$EN_result,
       v_chanvadds_7$EN_start,
       v_chanvadds_7$RDY_mc_client_flush_request_get,
       v_chanvadds_7$RDY_mc_client_flush_response_put,
       v_chanvadds_7$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_7$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_7$RDY_result,
       v_chanvadds_7$RDY_start,
       v_chanvadds_7$mc_client_flush_request_get,
       v_chanvadds_7$mc_client_flush_response_put,
       v_chanvadds_7$start_evenNotOdd;

  // ports of submodule v_chanvadds_8
  wire [152 : 0] v_chanvadds_8$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_8$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_8$result;
  wire [47 : 0] v_chanvadds_8$start_rd_base_1,
		v_chanvadds_8$start_rd_base_2,
		v_chanvadds_8$start_rd_limit_1,
		v_chanvadds_8$start_rd_limit_2,
		v_chanvadds_8$start_wr_base,
		v_chanvadds_8$start_wr_limit;
  wire [2 : 0] v_chanvadds_8$start_chan;
  wire [1 : 0] v_chanvadds_8$start_aeid;
  wire v_chanvadds_8$EN_mc_client_flush_request_get,
       v_chanvadds_8$EN_mc_client_flush_response_put,
       v_chanvadds_8$EN_mc_client_req_rsp_request_get,
       v_chanvadds_8$EN_mc_client_req_rsp_response_put,
       v_chanvadds_8$EN_result,
       v_chanvadds_8$EN_start,
       v_chanvadds_8$RDY_mc_client_flush_request_get,
       v_chanvadds_8$RDY_mc_client_flush_response_put,
       v_chanvadds_8$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_8$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_8$RDY_result,
       v_chanvadds_8$RDY_start,
       v_chanvadds_8$mc_client_flush_request_get,
       v_chanvadds_8$mc_client_flush_response_put,
       v_chanvadds_8$start_evenNotOdd;

  // ports of submodule v_chanvadds_9
  wire [152 : 0] v_chanvadds_9$mc_client_req_rsp_request_get;
  wire [101 : 0] v_chanvadds_9$mc_client_req_rsp_response_put;
  wire [63 : 0] v_chanvadds_9$result;
  wire [47 : 0] v_chanvadds_9$start_rd_base_1,
		v_chanvadds_9$start_rd_base_2,
		v_chanvadds_9$start_rd_limit_1,
		v_chanvadds_9$start_rd_limit_2,
		v_chanvadds_9$start_wr_base,
		v_chanvadds_9$start_wr_limit;
  wire [2 : 0] v_chanvadds_9$start_chan;
  wire [1 : 0] v_chanvadds_9$start_aeid;
  wire v_chanvadds_9$EN_mc_client_flush_request_get,
       v_chanvadds_9$EN_mc_client_flush_response_put,
       v_chanvadds_9$EN_mc_client_req_rsp_request_get,
       v_chanvadds_9$EN_mc_client_req_rsp_response_put,
       v_chanvadds_9$EN_result,
       v_chanvadds_9$EN_start,
       v_chanvadds_9$RDY_mc_client_flush_request_get,
       v_chanvadds_9$RDY_mc_client_flush_response_put,
       v_chanvadds_9$RDY_mc_client_req_rsp_request_get,
       v_chanvadds_9$RDY_mc_client_req_rsp_response_put,
       v_chanvadds_9$RDY_result,
       v_chanvadds_9$RDY_start,
       v_chanvadds_9$mc_client_flush_request_get,
       v_chanvadds_9$mc_client_flush_response_put,
       v_chanvadds_9$start_evenNotOdd;

  // rule scheduling signals
  wire CAN_FIRE_RL_fsm_action_l221c10,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_12,
       WILL_FIRE_RL_ClientServerRequest_16,
       WILL_FIRE_RL_ClientServerRequest_4,
       WILL_FIRE_RL_ClientServerRequest_8,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_12,
       WILL_FIRE_RL_ClientServerResponse_16,
       WILL_FIRE_RL_ClientServerResponse_4,
       WILL_FIRE_RL_ClientServerResponse_8,
       WILL_FIRE_RL_fsm_action_l221c10,
       WILL_FIRE_RL_fsm_action_l266c22,
       WILL_FIRE_RL_fsm_action_l267c22,
       WILL_FIRE_RL_fsm_fsm_start,
       WILL_FIRE_RL_fsm_idle_l219c7;

  // inputs to muxes for submodule ports
  wire [152 : 0] MUX_f_reqs_0$enq_1__VAL_1,
		 MUX_f_reqs_0$enq_1__VAL_2,
		 MUX_f_reqs_2$enq_1__VAL_1,
		 MUX_f_reqs_2$enq_1__VAL_2,
		 MUX_f_reqs_4$enq_1__VAL_1,
		 MUX_f_reqs_4$enq_1__VAL_2,
		 MUX_f_reqs_6$enq_1__VAL_1,
		 MUX_f_reqs_6$enq_1__VAL_2,
		 MUX_f_reqs_8$enq_1__VAL_1,
		 MUX_f_reqs_8$enq_1__VAL_2;
  wire [63 : 0] MUX_rg_partial_sum$write_1__VAL_1;
  wire [4 : 0] MUX_rg_mc$write_1__VAL_1;
  wire MUX_rg_partial_sum$write_1__SEL_1, MUX_rg_partial_sum$write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h47723;
  reg [31 : 0] v__h40886, v__h40892;
  reg [6 : 0] CASE_f_reqs_0D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q16,
	      CASE_f_reqs_10D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q6,
	      CASE_f_reqs_11D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q5,
	      CASE_f_reqs_12D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q4,
	      CASE_f_reqs_13D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q3,
	      CASE_f_reqs_14D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q2,
	      CASE_f_reqs_15D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q1,
	      CASE_f_reqs_1D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q15,
	      CASE_f_reqs_2D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q14,
	      CASE_f_reqs_3D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q13,
	      CASE_f_reqs_4D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q12,
	      CASE_f_reqs_5D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q11,
	      CASE_f_reqs_6D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q10,
	      CASE_f_reqs_7D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q9,
	      CASE_f_reqs_8D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q8,
	      CASE_f_reqs_9D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q7,
	      CASE_v_chanvadds_0mc_client_req_rsp_request_g_ETC__q17,
	      CASE_v_chanvadds_10mc_client_req_rsp_request__ETC__q22,
	      CASE_v_chanvadds_11mc_client_req_rsp_request__ETC__q24,
	      CASE_v_chanvadds_12mc_client_req_rsp_request__ETC__q26,
	      CASE_v_chanvadds_13mc_client_req_rsp_request__ETC__q25,
	      CASE_v_chanvadds_14mc_client_req_rsp_request__ETC__q27,
	      CASE_v_chanvadds_15mc_client_req_rsp_request__ETC__q28,
	      CASE_v_chanvadds_1mc_client_req_rsp_request_g_ETC__q23,
	      CASE_v_chanvadds_2mc_client_req_rsp_request_g_ETC__q18,
	      CASE_v_chanvadds_3mc_client_req_rsp_request_g_ETC__q29,
	      CASE_v_chanvadds_4mc_client_req_rsp_request_g_ETC__q19,
	      CASE_v_chanvadds_5mc_client_req_rsp_request_g_ETC__q30,
	      CASE_v_chanvadds_6mc_client_req_rsp_request_g_ETC__q20,
	      CASE_v_chanvadds_7mc_client_req_rsp_request_g_ETC__q31,
	      CASE_v_chanvadds_8mc_client_req_rsp_request_g_ETC__q21,
	      CASE_v_chanvadds_9mc_client_req_rsp_request_g_ETC__q32;
  reg [2 : 0] CASE_f_rsps_0D_OUT_BITS_101_TO_99_2_f_rsps_0_ETC__q49,
	      CASE_f_rsps_10D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q51,
	      CASE_f_rsps_11D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q52,
	      CASE_f_rsps_12D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q53,
	      CASE_f_rsps_13D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q54,
	      CASE_f_rsps_14D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q55,
	      CASE_f_rsps_15D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q56,
	      CASE_f_rsps_1D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q50,
	      CASE_f_rsps_2D_OUT_BITS_101_TO_99_2_f_rsps_2_ETC__q57,
	      CASE_f_rsps_3D_OUT_BITS_101_TO_99_2_f_rsps_3_ETC__q58,
	      CASE_f_rsps_4D_OUT_BITS_101_TO_99_2_f_rsps_4_ETC__q59,
	      CASE_f_rsps_5D_OUT_BITS_101_TO_99_2_f_rsps_5_ETC__q60,
	      CASE_f_rsps_6D_OUT_BITS_101_TO_99_2_f_rsps_6_ETC__q61,
	      CASE_f_rsps_7D_OUT_BITS_101_TO_99_2_f_rsps_7_ETC__q62,
	      CASE_f_rsps_8D_OUT_BITS_101_TO_99_2_f_rsps_8_ETC__q63,
	      CASE_f_rsps_9D_OUT_BITS_101_TO_99_2_f_rsps_9_ETC__q64,
	      CASE_mc_ifcs_0_req_rsp_response_put_BITS_101_T_ETC__q33,
	      CASE_mc_ifcs_10_req_rsp_response_put_BITS_101__ETC__q34,
	      CASE_mc_ifcs_11_req_rsp_response_put_BITS_101__ETC__q36,
	      CASE_mc_ifcs_12_req_rsp_response_put_BITS_101__ETC__q37,
	      CASE_mc_ifcs_13_req_rsp_response_put_BITS_101__ETC__q38,
	      CASE_mc_ifcs_14_req_rsp_response_put_BITS_101__ETC__q39,
	      CASE_mc_ifcs_15_req_rsp_response_put_BITS_101__ETC__q41,
	      CASE_mc_ifcs_1_req_rsp_response_put_BITS_101_T_ETC__q35,
	      CASE_mc_ifcs_2_req_rsp_response_put_BITS_101_T_ETC__q40,
	      CASE_mc_ifcs_3_req_rsp_response_put_BITS_101_T_ETC__q42,
	      CASE_mc_ifcs_4_req_rsp_response_put_BITS_101_T_ETC__q43,
	      CASE_mc_ifcs_5_req_rsp_response_put_BITS_101_T_ETC__q44,
	      CASE_mc_ifcs_6_req_rsp_response_put_BITS_101_T_ETC__q45,
	      CASE_mc_ifcs_7_req_rsp_response_put_BITS_101_T_ETC__q46,
	      CASE_mc_ifcs_8_req_rsp_response_put_BITS_101_T_ETC__q48,
	      CASE_mc_ifcs_9_req_rsp_response_put_BITS_101_T_ETC__q47;
  reg CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505;
  wire [47 : 0] addr__h39529,
		addr__h39586,
		addr__h39631,
		addr__h48611,
		rd_base_1__h41007,
		rd_base_1__h41783,
		rd_base_1__h42559,
		rd_base_1__h43335,
		rd_base_1__h44111,
		rd_base_1__h44887,
		rd_base_1__h45663,
		rd_base_1__h46439,
		rd_base_2__h41009,
		rd_base_2__h41785,
		rd_base_2__h42561,
		rd_base_2__h43337,
		rd_base_2__h44113,
		rd_base_2__h44889,
		rd_base_2__h45665,
		rd_base_2__h46441,
		wr_base__h41011,
		wr_base__h41787,
		wr_base__h42563,
		wr_base__h43339,
		wr_base__h44115,
		wr_base__h44891,
		wr_base__h45667,
		wr_base__h46443,
		y__h41138;
  wire [38 : 0] upper__h41040,
		upper__h41164,
		upper__h41263,
		upper__h41816,
		upper__h41940,
		upper__h42039,
		upper__h42592,
		upper__h42716,
		upper__h42815,
		upper__h43368,
		upper__h43492,
		upper__h43591,
		upper__h44144,
		upper__h44268,
		upper__h44367,
		upper__h44920,
		upper__h45044,
		upper__h45143,
		upper__h45696,
		upper__h45820,
		upper__h45919;
  wire [5 : 0] lower__h41041,
	       lower__h41165,
	       lower__h41264,
	       lower__h41817,
	       lower__h41941,
	       lower__h42040,
	       lower__h42593,
	       lower__h42717,
	       lower__h42816,
	       lower__h43369,
	       lower__h43493,
	       lower__h43592,
	       lower__h44145,
	       lower__h44269,
	       lower__h44368,
	       lower__h44921,
	       lower__h45045,
	       lower__h45144,
	       lower__h45697,
	       lower__h45821,
	       lower__h45920,
	       lower__h46473,
	       lower__h46597,
	       lower__h46696;
  wire fsm_abort_whas__188_AND_fsm_abort_wget__189_19_ETC___d1575,
       rg_mc_488_ULT_16___d1506,
       v_chanvadds_13_RDY_start__247_AND_v_chanvadds__ETC___d1255,
       v_chanvadds_1_RDY_start__235_AND_v_chanvadds_2_ETC___d1267,
       v_chanvadds_7_RDY_start__241_AND_v_chanvadds_8_ETC___d1261;

  // action method start
  assign RDY_start =
	     fsm_abort_whas__188_AND_fsm_abort_wget__189_19_ETC___d1575 &&
	     !fsm_start_reg ;

  // action method waitTillDone
  assign RDY_waitTillDone =
	     fsm_abort_whas__188_AND_fsm_abort_wget__189_19_ETC___d1575 &&
	     !fsm_start_reg ;

  // actionvalue method mc_ifcs_0_req_rsp_request_get
  assign mc_ifcs_0_req_rsp_request_get =
	     { CASE_f_reqs_0D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q16,
	       f_reqs_0$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_0_req_rsp_request_get = f_reqs_0$EMPTY_N ;

  // action method mc_ifcs_0_req_rsp_response_put
  assign RDY_mc_ifcs_0_req_rsp_response_put = f_rsps_0$FULL_N ;

  // actionvalue method mc_ifcs_0_flush_request_get
  assign mc_ifcs_0_flush_request_get = f_flush_reqs_0$D_OUT ;
  assign RDY_mc_ifcs_0_flush_request_get = f_flush_reqs_0$EMPTY_N ;

  // action method mc_ifcs_0_flush_response_put
  assign RDY_mc_ifcs_0_flush_response_put = f_flush_rsps_0$FULL_N ;

  // actionvalue method mc_ifcs_1_req_rsp_request_get
  assign mc_ifcs_1_req_rsp_request_get =
	     { CASE_f_reqs_1D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q15,
	       f_reqs_1$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_1_req_rsp_request_get = f_reqs_1$EMPTY_N ;

  // action method mc_ifcs_1_req_rsp_response_put
  assign RDY_mc_ifcs_1_req_rsp_response_put = f_rsps_1$FULL_N ;

  // actionvalue method mc_ifcs_1_flush_request_get
  assign mc_ifcs_1_flush_request_get = f_flush_reqs_1$D_OUT ;
  assign RDY_mc_ifcs_1_flush_request_get = f_flush_reqs_1$EMPTY_N ;

  // action method mc_ifcs_1_flush_response_put
  assign RDY_mc_ifcs_1_flush_response_put = f_flush_rsps_1$FULL_N ;

  // actionvalue method mc_ifcs_2_req_rsp_request_get
  assign mc_ifcs_2_req_rsp_request_get =
	     { CASE_f_reqs_2D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q14,
	       f_reqs_2$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_2_req_rsp_request_get = f_reqs_2$EMPTY_N ;

  // action method mc_ifcs_2_req_rsp_response_put
  assign RDY_mc_ifcs_2_req_rsp_response_put = f_rsps_2$FULL_N ;

  // actionvalue method mc_ifcs_2_flush_request_get
  assign mc_ifcs_2_flush_request_get = f_flush_reqs_2$D_OUT ;
  assign RDY_mc_ifcs_2_flush_request_get = f_flush_reqs_2$EMPTY_N ;

  // action method mc_ifcs_2_flush_response_put
  assign RDY_mc_ifcs_2_flush_response_put = f_flush_rsps_2$FULL_N ;

  // actionvalue method mc_ifcs_3_req_rsp_request_get
  assign mc_ifcs_3_req_rsp_request_get =
	     { CASE_f_reqs_3D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q13,
	       f_reqs_3$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_3_req_rsp_request_get = f_reqs_3$EMPTY_N ;

  // action method mc_ifcs_3_req_rsp_response_put
  assign RDY_mc_ifcs_3_req_rsp_response_put = f_rsps_3$FULL_N ;

  // actionvalue method mc_ifcs_3_flush_request_get
  assign mc_ifcs_3_flush_request_get = f_flush_reqs_3$D_OUT ;
  assign RDY_mc_ifcs_3_flush_request_get = f_flush_reqs_3$EMPTY_N ;

  // action method mc_ifcs_3_flush_response_put
  assign RDY_mc_ifcs_3_flush_response_put = f_flush_rsps_3$FULL_N ;

  // actionvalue method mc_ifcs_4_req_rsp_request_get
  assign mc_ifcs_4_req_rsp_request_get =
	     { CASE_f_reqs_4D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q12,
	       f_reqs_4$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_4_req_rsp_request_get = f_reqs_4$EMPTY_N ;

  // action method mc_ifcs_4_req_rsp_response_put
  assign RDY_mc_ifcs_4_req_rsp_response_put = f_rsps_4$FULL_N ;

  // actionvalue method mc_ifcs_4_flush_request_get
  assign mc_ifcs_4_flush_request_get = f_flush_reqs_4$D_OUT ;
  assign RDY_mc_ifcs_4_flush_request_get = f_flush_reqs_4$EMPTY_N ;

  // action method mc_ifcs_4_flush_response_put
  assign RDY_mc_ifcs_4_flush_response_put = f_flush_rsps_4$FULL_N ;

  // actionvalue method mc_ifcs_5_req_rsp_request_get
  assign mc_ifcs_5_req_rsp_request_get =
	     { CASE_f_reqs_5D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q11,
	       f_reqs_5$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_5_req_rsp_request_get = f_reqs_5$EMPTY_N ;

  // action method mc_ifcs_5_req_rsp_response_put
  assign RDY_mc_ifcs_5_req_rsp_response_put = f_rsps_5$FULL_N ;

  // actionvalue method mc_ifcs_5_flush_request_get
  assign mc_ifcs_5_flush_request_get = f_flush_reqs_5$D_OUT ;
  assign RDY_mc_ifcs_5_flush_request_get = f_flush_reqs_5$EMPTY_N ;

  // action method mc_ifcs_5_flush_response_put
  assign RDY_mc_ifcs_5_flush_response_put = f_flush_rsps_5$FULL_N ;

  // actionvalue method mc_ifcs_6_req_rsp_request_get
  assign mc_ifcs_6_req_rsp_request_get =
	     { CASE_f_reqs_6D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q10,
	       f_reqs_6$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_6_req_rsp_request_get = f_reqs_6$EMPTY_N ;

  // action method mc_ifcs_6_req_rsp_response_put
  assign RDY_mc_ifcs_6_req_rsp_response_put = f_rsps_6$FULL_N ;

  // actionvalue method mc_ifcs_6_flush_request_get
  assign mc_ifcs_6_flush_request_get = f_flush_reqs_6$D_OUT ;
  assign RDY_mc_ifcs_6_flush_request_get = f_flush_reqs_6$EMPTY_N ;

  // action method mc_ifcs_6_flush_response_put
  assign RDY_mc_ifcs_6_flush_response_put = f_flush_rsps_6$FULL_N ;

  // actionvalue method mc_ifcs_7_req_rsp_request_get
  assign mc_ifcs_7_req_rsp_request_get =
	     { CASE_f_reqs_7D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q9,
	       f_reqs_7$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_7_req_rsp_request_get = f_reqs_7$EMPTY_N ;

  // action method mc_ifcs_7_req_rsp_response_put
  assign RDY_mc_ifcs_7_req_rsp_response_put = f_rsps_7$FULL_N ;

  // actionvalue method mc_ifcs_7_flush_request_get
  assign mc_ifcs_7_flush_request_get = f_flush_reqs_7$D_OUT ;
  assign RDY_mc_ifcs_7_flush_request_get = f_flush_reqs_7$EMPTY_N ;

  // action method mc_ifcs_7_flush_response_put
  assign RDY_mc_ifcs_7_flush_response_put = f_flush_rsps_7$FULL_N ;

  // actionvalue method mc_ifcs_8_req_rsp_request_get
  assign mc_ifcs_8_req_rsp_request_get =
	     { CASE_f_reqs_8D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q8,
	       f_reqs_8$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_8_req_rsp_request_get = f_reqs_8$EMPTY_N ;

  // action method mc_ifcs_8_req_rsp_response_put
  assign RDY_mc_ifcs_8_req_rsp_response_put = f_rsps_8$FULL_N ;

  // actionvalue method mc_ifcs_8_flush_request_get
  assign mc_ifcs_8_flush_request_get = f_flush_reqs_8$D_OUT ;
  assign RDY_mc_ifcs_8_flush_request_get = f_flush_reqs_8$EMPTY_N ;

  // action method mc_ifcs_8_flush_response_put
  assign RDY_mc_ifcs_8_flush_response_put = f_flush_rsps_8$FULL_N ;

  // actionvalue method mc_ifcs_9_req_rsp_request_get
  assign mc_ifcs_9_req_rsp_request_get =
	     { CASE_f_reqs_9D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q7,
	       f_reqs_9$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_9_req_rsp_request_get = f_reqs_9$EMPTY_N ;

  // action method mc_ifcs_9_req_rsp_response_put
  assign RDY_mc_ifcs_9_req_rsp_response_put = f_rsps_9$FULL_N ;

  // actionvalue method mc_ifcs_9_flush_request_get
  assign mc_ifcs_9_flush_request_get = f_flush_reqs_9$D_OUT ;
  assign RDY_mc_ifcs_9_flush_request_get = f_flush_reqs_9$EMPTY_N ;

  // action method mc_ifcs_9_flush_response_put
  assign RDY_mc_ifcs_9_flush_response_put = f_flush_rsps_9$FULL_N ;

  // actionvalue method mc_ifcs_10_req_rsp_request_get
  assign mc_ifcs_10_req_rsp_request_get =
	     { CASE_f_reqs_10D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q6,
	       f_reqs_10$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_10_req_rsp_request_get = f_reqs_10$EMPTY_N ;

  // action method mc_ifcs_10_req_rsp_response_put
  assign RDY_mc_ifcs_10_req_rsp_response_put = f_rsps_10$FULL_N ;

  // actionvalue method mc_ifcs_10_flush_request_get
  assign mc_ifcs_10_flush_request_get = f_flush_reqs_10$D_OUT ;
  assign RDY_mc_ifcs_10_flush_request_get = f_flush_reqs_10$EMPTY_N ;

  // action method mc_ifcs_10_flush_response_put
  assign RDY_mc_ifcs_10_flush_response_put = f_flush_rsps_10$FULL_N ;

  // actionvalue method mc_ifcs_11_req_rsp_request_get
  assign mc_ifcs_11_req_rsp_request_get =
	     { CASE_f_reqs_11D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q5,
	       f_reqs_11$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_11_req_rsp_request_get = f_reqs_11$EMPTY_N ;

  // action method mc_ifcs_11_req_rsp_response_put
  assign RDY_mc_ifcs_11_req_rsp_response_put = f_rsps_11$FULL_N ;

  // actionvalue method mc_ifcs_11_flush_request_get
  assign mc_ifcs_11_flush_request_get = f_flush_reqs_11$D_OUT ;
  assign RDY_mc_ifcs_11_flush_request_get = f_flush_reqs_11$EMPTY_N ;

  // action method mc_ifcs_11_flush_response_put
  assign RDY_mc_ifcs_11_flush_response_put = f_flush_rsps_11$FULL_N ;

  // actionvalue method mc_ifcs_12_req_rsp_request_get
  assign mc_ifcs_12_req_rsp_request_get =
	     { CASE_f_reqs_12D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q4,
	       f_reqs_12$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_12_req_rsp_request_get = f_reqs_12$EMPTY_N ;

  // action method mc_ifcs_12_req_rsp_response_put
  assign RDY_mc_ifcs_12_req_rsp_response_put = f_rsps_12$FULL_N ;

  // actionvalue method mc_ifcs_12_flush_request_get
  assign mc_ifcs_12_flush_request_get = f_flush_reqs_12$D_OUT ;
  assign RDY_mc_ifcs_12_flush_request_get = f_flush_reqs_12$EMPTY_N ;

  // action method mc_ifcs_12_flush_response_put
  assign RDY_mc_ifcs_12_flush_response_put = f_flush_rsps_12$FULL_N ;

  // actionvalue method mc_ifcs_13_req_rsp_request_get
  assign mc_ifcs_13_req_rsp_request_get =
	     { CASE_f_reqs_13D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q3,
	       f_reqs_13$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_13_req_rsp_request_get = f_reqs_13$EMPTY_N ;

  // action method mc_ifcs_13_req_rsp_response_put
  assign RDY_mc_ifcs_13_req_rsp_response_put = f_rsps_13$FULL_N ;

  // actionvalue method mc_ifcs_13_flush_request_get
  assign mc_ifcs_13_flush_request_get = f_flush_reqs_13$D_OUT ;
  assign RDY_mc_ifcs_13_flush_request_get = f_flush_reqs_13$EMPTY_N ;

  // action method mc_ifcs_13_flush_response_put
  assign RDY_mc_ifcs_13_flush_response_put = f_flush_rsps_13$FULL_N ;

  // actionvalue method mc_ifcs_14_req_rsp_request_get
  assign mc_ifcs_14_req_rsp_request_get =
	     { CASE_f_reqs_14D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q2,
	       f_reqs_14$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_14_req_rsp_request_get = f_reqs_14$EMPTY_N ;

  // action method mc_ifcs_14_req_rsp_response_put
  assign RDY_mc_ifcs_14_req_rsp_response_put = f_rsps_14$FULL_N ;

  // actionvalue method mc_ifcs_14_flush_request_get
  assign mc_ifcs_14_flush_request_get = f_flush_reqs_14$D_OUT ;
  assign RDY_mc_ifcs_14_flush_request_get = f_flush_reqs_14$EMPTY_N ;

  // action method mc_ifcs_14_flush_response_put
  assign RDY_mc_ifcs_14_flush_response_put = f_flush_rsps_14$FULL_N ;

  // actionvalue method mc_ifcs_15_req_rsp_request_get
  assign mc_ifcs_15_req_rsp_request_get =
	     { CASE_f_reqs_15D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q1,
	       f_reqs_15$D_OUT[145:0] } ;
  assign RDY_mc_ifcs_15_req_rsp_request_get = f_reqs_15$EMPTY_N ;

  // action method mc_ifcs_15_req_rsp_response_put
  assign RDY_mc_ifcs_15_req_rsp_response_put = f_rsps_15$FULL_N ;

  // actionvalue method mc_ifcs_15_flush_request_get
  assign mc_ifcs_15_flush_request_get = f_flush_reqs_15$D_OUT ;
  assign RDY_mc_ifcs_15_flush_request_get = f_flush_reqs_15$EMPTY_N ;

  // action method mc_ifcs_15_flush_response_put
  assign RDY_mc_ifcs_15_flush_response_put = f_flush_rsps_15$FULL_N ;

  // submodule f_flush_reqs_0
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_0(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_reqs_0$D_IN),
							 .ENQ(f_flush_reqs_0$ENQ),
							 .DEQ(f_flush_reqs_0$DEQ),
							 .CLR(f_flush_reqs_0$CLR),
							 .D_OUT(f_flush_reqs_0$D_OUT),
							 .FULL_N(f_flush_reqs_0$FULL_N),
							 .EMPTY_N(f_flush_reqs_0$EMPTY_N));

  // submodule f_flush_reqs_1
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_1(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_reqs_1$D_IN),
							 .ENQ(f_flush_reqs_1$ENQ),
							 .DEQ(f_flush_reqs_1$DEQ),
							 .CLR(f_flush_reqs_1$CLR),
							 .D_OUT(f_flush_reqs_1$D_OUT),
							 .FULL_N(f_flush_reqs_1$FULL_N),
							 .EMPTY_N(f_flush_reqs_1$EMPTY_N));

  // submodule f_flush_reqs_10
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_10(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_reqs_10$D_IN),
							  .ENQ(f_flush_reqs_10$ENQ),
							  .DEQ(f_flush_reqs_10$DEQ),
							  .CLR(f_flush_reqs_10$CLR),
							  .D_OUT(f_flush_reqs_10$D_OUT),
							  .FULL_N(f_flush_reqs_10$FULL_N),
							  .EMPTY_N(f_flush_reqs_10$EMPTY_N));

  // submodule f_flush_reqs_11
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_11(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_reqs_11$D_IN),
							  .ENQ(f_flush_reqs_11$ENQ),
							  .DEQ(f_flush_reqs_11$DEQ),
							  .CLR(f_flush_reqs_11$CLR),
							  .D_OUT(f_flush_reqs_11$D_OUT),
							  .FULL_N(f_flush_reqs_11$FULL_N),
							  .EMPTY_N(f_flush_reqs_11$EMPTY_N));

  // submodule f_flush_reqs_12
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_12(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_reqs_12$D_IN),
							  .ENQ(f_flush_reqs_12$ENQ),
							  .DEQ(f_flush_reqs_12$DEQ),
							  .CLR(f_flush_reqs_12$CLR),
							  .D_OUT(f_flush_reqs_12$D_OUT),
							  .FULL_N(f_flush_reqs_12$FULL_N),
							  .EMPTY_N(f_flush_reqs_12$EMPTY_N));

  // submodule f_flush_reqs_13
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_13(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_reqs_13$D_IN),
							  .ENQ(f_flush_reqs_13$ENQ),
							  .DEQ(f_flush_reqs_13$DEQ),
							  .CLR(f_flush_reqs_13$CLR),
							  .D_OUT(f_flush_reqs_13$D_OUT),
							  .FULL_N(f_flush_reqs_13$FULL_N),
							  .EMPTY_N(f_flush_reqs_13$EMPTY_N));

  // submodule f_flush_reqs_14
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_14(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_reqs_14$D_IN),
							  .ENQ(f_flush_reqs_14$ENQ),
							  .DEQ(f_flush_reqs_14$DEQ),
							  .CLR(f_flush_reqs_14$CLR),
							  .D_OUT(f_flush_reqs_14$D_OUT),
							  .FULL_N(f_flush_reqs_14$FULL_N),
							  .EMPTY_N(f_flush_reqs_14$EMPTY_N));

  // submodule f_flush_reqs_15
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_15(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_reqs_15$D_IN),
							  .ENQ(f_flush_reqs_15$ENQ),
							  .DEQ(f_flush_reqs_15$DEQ),
							  .CLR(f_flush_reqs_15$CLR),
							  .D_OUT(f_flush_reqs_15$D_OUT),
							  .FULL_N(f_flush_reqs_15$FULL_N),
							  .EMPTY_N(f_flush_reqs_15$EMPTY_N));

  // submodule f_flush_reqs_2
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_2(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_reqs_2$D_IN),
							 .ENQ(f_flush_reqs_2$ENQ),
							 .DEQ(f_flush_reqs_2$DEQ),
							 .CLR(f_flush_reqs_2$CLR),
							 .D_OUT(f_flush_reqs_2$D_OUT),
							 .FULL_N(f_flush_reqs_2$FULL_N),
							 .EMPTY_N(f_flush_reqs_2$EMPTY_N));

  // submodule f_flush_reqs_3
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_3(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_reqs_3$D_IN),
							 .ENQ(f_flush_reqs_3$ENQ),
							 .DEQ(f_flush_reqs_3$DEQ),
							 .CLR(f_flush_reqs_3$CLR),
							 .D_OUT(f_flush_reqs_3$D_OUT),
							 .FULL_N(f_flush_reqs_3$FULL_N),
							 .EMPTY_N(f_flush_reqs_3$EMPTY_N));

  // submodule f_flush_reqs_4
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_4(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_reqs_4$D_IN),
							 .ENQ(f_flush_reqs_4$ENQ),
							 .DEQ(f_flush_reqs_4$DEQ),
							 .CLR(f_flush_reqs_4$CLR),
							 .D_OUT(f_flush_reqs_4$D_OUT),
							 .FULL_N(f_flush_reqs_4$FULL_N),
							 .EMPTY_N(f_flush_reqs_4$EMPTY_N));

  // submodule f_flush_reqs_5
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_5(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_reqs_5$D_IN),
							 .ENQ(f_flush_reqs_5$ENQ),
							 .DEQ(f_flush_reqs_5$DEQ),
							 .CLR(f_flush_reqs_5$CLR),
							 .D_OUT(f_flush_reqs_5$D_OUT),
							 .FULL_N(f_flush_reqs_5$FULL_N),
							 .EMPTY_N(f_flush_reqs_5$EMPTY_N));

  // submodule f_flush_reqs_6
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_6(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_reqs_6$D_IN),
							 .ENQ(f_flush_reqs_6$ENQ),
							 .DEQ(f_flush_reqs_6$DEQ),
							 .CLR(f_flush_reqs_6$CLR),
							 .D_OUT(f_flush_reqs_6$D_OUT),
							 .FULL_N(f_flush_reqs_6$FULL_N),
							 .EMPTY_N(f_flush_reqs_6$EMPTY_N));

  // submodule f_flush_reqs_7
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_7(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_reqs_7$D_IN),
							 .ENQ(f_flush_reqs_7$ENQ),
							 .DEQ(f_flush_reqs_7$DEQ),
							 .CLR(f_flush_reqs_7$CLR),
							 .D_OUT(f_flush_reqs_7$D_OUT),
							 .FULL_N(f_flush_reqs_7$FULL_N),
							 .EMPTY_N(f_flush_reqs_7$EMPTY_N));

  // submodule f_flush_reqs_8
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_8(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_reqs_8$D_IN),
							 .ENQ(f_flush_reqs_8$ENQ),
							 .DEQ(f_flush_reqs_8$DEQ),
							 .CLR(f_flush_reqs_8$CLR),
							 .D_OUT(f_flush_reqs_8$D_OUT),
							 .FULL_N(f_flush_reqs_8$FULL_N),
							 .EMPTY_N(f_flush_reqs_8$EMPTY_N));

  // submodule f_flush_reqs_9
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_reqs_9(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_reqs_9$D_IN),
							 .ENQ(f_flush_reqs_9$ENQ),
							 .DEQ(f_flush_reqs_9$DEQ),
							 .CLR(f_flush_reqs_9$CLR),
							 .D_OUT(f_flush_reqs_9$D_OUT),
							 .FULL_N(f_flush_reqs_9$FULL_N),
							 .EMPTY_N(f_flush_reqs_9$EMPTY_N));

  // submodule f_flush_rsps_0
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_0(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_rsps_0$D_IN),
							 .ENQ(f_flush_rsps_0$ENQ),
							 .DEQ(f_flush_rsps_0$DEQ),
							 .CLR(f_flush_rsps_0$CLR),
							 .D_OUT(f_flush_rsps_0$D_OUT),
							 .FULL_N(f_flush_rsps_0$FULL_N),
							 .EMPTY_N(f_flush_rsps_0$EMPTY_N));

  // submodule f_flush_rsps_1
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_1(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_rsps_1$D_IN),
							 .ENQ(f_flush_rsps_1$ENQ),
							 .DEQ(f_flush_rsps_1$DEQ),
							 .CLR(f_flush_rsps_1$CLR),
							 .D_OUT(f_flush_rsps_1$D_OUT),
							 .FULL_N(f_flush_rsps_1$FULL_N),
							 .EMPTY_N(f_flush_rsps_1$EMPTY_N));

  // submodule f_flush_rsps_10
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_10(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_rsps_10$D_IN),
							  .ENQ(f_flush_rsps_10$ENQ),
							  .DEQ(f_flush_rsps_10$DEQ),
							  .CLR(f_flush_rsps_10$CLR),
							  .D_OUT(f_flush_rsps_10$D_OUT),
							  .FULL_N(f_flush_rsps_10$FULL_N),
							  .EMPTY_N(f_flush_rsps_10$EMPTY_N));

  // submodule f_flush_rsps_11
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_11(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_rsps_11$D_IN),
							  .ENQ(f_flush_rsps_11$ENQ),
							  .DEQ(f_flush_rsps_11$DEQ),
							  .CLR(f_flush_rsps_11$CLR),
							  .D_OUT(f_flush_rsps_11$D_OUT),
							  .FULL_N(f_flush_rsps_11$FULL_N),
							  .EMPTY_N(f_flush_rsps_11$EMPTY_N));

  // submodule f_flush_rsps_12
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_12(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_rsps_12$D_IN),
							  .ENQ(f_flush_rsps_12$ENQ),
							  .DEQ(f_flush_rsps_12$DEQ),
							  .CLR(f_flush_rsps_12$CLR),
							  .D_OUT(f_flush_rsps_12$D_OUT),
							  .FULL_N(f_flush_rsps_12$FULL_N),
							  .EMPTY_N(f_flush_rsps_12$EMPTY_N));

  // submodule f_flush_rsps_13
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_13(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_rsps_13$D_IN),
							  .ENQ(f_flush_rsps_13$ENQ),
							  .DEQ(f_flush_rsps_13$DEQ),
							  .CLR(f_flush_rsps_13$CLR),
							  .D_OUT(f_flush_rsps_13$D_OUT),
							  .FULL_N(f_flush_rsps_13$FULL_N),
							  .EMPTY_N(f_flush_rsps_13$EMPTY_N));

  // submodule f_flush_rsps_14
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_14(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_rsps_14$D_IN),
							  .ENQ(f_flush_rsps_14$ENQ),
							  .DEQ(f_flush_rsps_14$DEQ),
							  .CLR(f_flush_rsps_14$CLR),
							  .D_OUT(f_flush_rsps_14$D_OUT),
							  .FULL_N(f_flush_rsps_14$FULL_N),
							  .EMPTY_N(f_flush_rsps_14$EMPTY_N));

  // submodule f_flush_rsps_15
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_15(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_flush_rsps_15$D_IN),
							  .ENQ(f_flush_rsps_15$ENQ),
							  .DEQ(f_flush_rsps_15$DEQ),
							  .CLR(f_flush_rsps_15$CLR),
							  .D_OUT(f_flush_rsps_15$D_OUT),
							  .FULL_N(f_flush_rsps_15$FULL_N),
							  .EMPTY_N(f_flush_rsps_15$EMPTY_N));

  // submodule f_flush_rsps_2
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_2(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_rsps_2$D_IN),
							 .ENQ(f_flush_rsps_2$ENQ),
							 .DEQ(f_flush_rsps_2$DEQ),
							 .CLR(f_flush_rsps_2$CLR),
							 .D_OUT(f_flush_rsps_2$D_OUT),
							 .FULL_N(f_flush_rsps_2$FULL_N),
							 .EMPTY_N(f_flush_rsps_2$EMPTY_N));

  // submodule f_flush_rsps_3
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_3(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_rsps_3$D_IN),
							 .ENQ(f_flush_rsps_3$ENQ),
							 .DEQ(f_flush_rsps_3$DEQ),
							 .CLR(f_flush_rsps_3$CLR),
							 .D_OUT(f_flush_rsps_3$D_OUT),
							 .FULL_N(f_flush_rsps_3$FULL_N),
							 .EMPTY_N(f_flush_rsps_3$EMPTY_N));

  // submodule f_flush_rsps_4
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_4(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_rsps_4$D_IN),
							 .ENQ(f_flush_rsps_4$ENQ),
							 .DEQ(f_flush_rsps_4$DEQ),
							 .CLR(f_flush_rsps_4$CLR),
							 .D_OUT(f_flush_rsps_4$D_OUT),
							 .FULL_N(f_flush_rsps_4$FULL_N),
							 .EMPTY_N(f_flush_rsps_4$EMPTY_N));

  // submodule f_flush_rsps_5
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_5(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_rsps_5$D_IN),
							 .ENQ(f_flush_rsps_5$ENQ),
							 .DEQ(f_flush_rsps_5$DEQ),
							 .CLR(f_flush_rsps_5$CLR),
							 .D_OUT(f_flush_rsps_5$D_OUT),
							 .FULL_N(f_flush_rsps_5$FULL_N),
							 .EMPTY_N(f_flush_rsps_5$EMPTY_N));

  // submodule f_flush_rsps_6
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_6(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_rsps_6$D_IN),
							 .ENQ(f_flush_rsps_6$ENQ),
							 .DEQ(f_flush_rsps_6$DEQ),
							 .CLR(f_flush_rsps_6$CLR),
							 .D_OUT(f_flush_rsps_6$D_OUT),
							 .FULL_N(f_flush_rsps_6$FULL_N),
							 .EMPTY_N(f_flush_rsps_6$EMPTY_N));

  // submodule f_flush_rsps_7
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_7(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_rsps_7$D_IN),
							 .ENQ(f_flush_rsps_7$ENQ),
							 .DEQ(f_flush_rsps_7$DEQ),
							 .CLR(f_flush_rsps_7$CLR),
							 .D_OUT(f_flush_rsps_7$D_OUT),
							 .FULL_N(f_flush_rsps_7$FULL_N),
							 .EMPTY_N(f_flush_rsps_7$EMPTY_N));

  // submodule f_flush_rsps_8
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_8(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_rsps_8$D_IN),
							 .ENQ(f_flush_rsps_8$ENQ),
							 .DEQ(f_flush_rsps_8$DEQ),
							 .CLR(f_flush_rsps_8$CLR),
							 .D_OUT(f_flush_rsps_8$D_OUT),
							 .FULL_N(f_flush_rsps_8$FULL_N),
							 .EMPTY_N(f_flush_rsps_8$EMPTY_N));

  // submodule f_flush_rsps_9
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_flush_rsps_9(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_flush_rsps_9$D_IN),
							 .ENQ(f_flush_rsps_9$ENQ),
							 .DEQ(f_flush_rsps_9$DEQ),
							 .CLR(f_flush_rsps_9$CLR),
							 .D_OUT(f_flush_rsps_9$D_OUT),
							 .FULL_N(f_flush_rsps_9$FULL_N),
							 .EMPTY_N(f_flush_rsps_9$EMPTY_N));

  // submodule f_reqs_0
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_0(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_reqs_0$D_IN),
						     .ENQ(f_reqs_0$ENQ),
						     .DEQ(f_reqs_0$DEQ),
						     .CLR(f_reqs_0$CLR),
						     .D_OUT(f_reqs_0$D_OUT),
						     .FULL_N(f_reqs_0$FULL_N),
						     .EMPTY_N(f_reqs_0$EMPTY_N));

  // submodule f_reqs_1
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_1(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_reqs_1$D_IN),
						     .ENQ(f_reqs_1$ENQ),
						     .DEQ(f_reqs_1$DEQ),
						     .CLR(f_reqs_1$CLR),
						     .D_OUT(f_reqs_1$D_OUT),
						     .FULL_N(f_reqs_1$FULL_N),
						     .EMPTY_N(f_reqs_1$EMPTY_N));

  // submodule f_reqs_10
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_10(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reqs_10$D_IN),
						      .ENQ(f_reqs_10$ENQ),
						      .DEQ(f_reqs_10$DEQ),
						      .CLR(f_reqs_10$CLR),
						      .D_OUT(f_reqs_10$D_OUT),
						      .FULL_N(f_reqs_10$FULL_N),
						      .EMPTY_N(f_reqs_10$EMPTY_N));

  // submodule f_reqs_11
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_11(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reqs_11$D_IN),
						      .ENQ(f_reqs_11$ENQ),
						      .DEQ(f_reqs_11$DEQ),
						      .CLR(f_reqs_11$CLR),
						      .D_OUT(f_reqs_11$D_OUT),
						      .FULL_N(f_reqs_11$FULL_N),
						      .EMPTY_N(f_reqs_11$EMPTY_N));

  // submodule f_reqs_12
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_12(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reqs_12$D_IN),
						      .ENQ(f_reqs_12$ENQ),
						      .DEQ(f_reqs_12$DEQ),
						      .CLR(f_reqs_12$CLR),
						      .D_OUT(f_reqs_12$D_OUT),
						      .FULL_N(f_reqs_12$FULL_N),
						      .EMPTY_N(f_reqs_12$EMPTY_N));

  // submodule f_reqs_13
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_13(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reqs_13$D_IN),
						      .ENQ(f_reqs_13$ENQ),
						      .DEQ(f_reqs_13$DEQ),
						      .CLR(f_reqs_13$CLR),
						      .D_OUT(f_reqs_13$D_OUT),
						      .FULL_N(f_reqs_13$FULL_N),
						      .EMPTY_N(f_reqs_13$EMPTY_N));

  // submodule f_reqs_14
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_14(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reqs_14$D_IN),
						      .ENQ(f_reqs_14$ENQ),
						      .DEQ(f_reqs_14$DEQ),
						      .CLR(f_reqs_14$CLR),
						      .D_OUT(f_reqs_14$D_OUT),
						      .FULL_N(f_reqs_14$FULL_N),
						      .EMPTY_N(f_reqs_14$EMPTY_N));

  // submodule f_reqs_15
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_15(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reqs_15$D_IN),
						      .ENQ(f_reqs_15$ENQ),
						      .DEQ(f_reqs_15$DEQ),
						      .CLR(f_reqs_15$CLR),
						      .D_OUT(f_reqs_15$D_OUT),
						      .FULL_N(f_reqs_15$FULL_N),
						      .EMPTY_N(f_reqs_15$EMPTY_N));

  // submodule f_reqs_2
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_2(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_reqs_2$D_IN),
						     .ENQ(f_reqs_2$ENQ),
						     .DEQ(f_reqs_2$DEQ),
						     .CLR(f_reqs_2$CLR),
						     .D_OUT(f_reqs_2$D_OUT),
						     .FULL_N(f_reqs_2$FULL_N),
						     .EMPTY_N(f_reqs_2$EMPTY_N));

  // submodule f_reqs_3
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_3(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_reqs_3$D_IN),
						     .ENQ(f_reqs_3$ENQ),
						     .DEQ(f_reqs_3$DEQ),
						     .CLR(f_reqs_3$CLR),
						     .D_OUT(f_reqs_3$D_OUT),
						     .FULL_N(f_reqs_3$FULL_N),
						     .EMPTY_N(f_reqs_3$EMPTY_N));

  // submodule f_reqs_4
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_4(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_reqs_4$D_IN),
						     .ENQ(f_reqs_4$ENQ),
						     .DEQ(f_reqs_4$DEQ),
						     .CLR(f_reqs_4$CLR),
						     .D_OUT(f_reqs_4$D_OUT),
						     .FULL_N(f_reqs_4$FULL_N),
						     .EMPTY_N(f_reqs_4$EMPTY_N));

  // submodule f_reqs_5
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_5(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_reqs_5$D_IN),
						     .ENQ(f_reqs_5$ENQ),
						     .DEQ(f_reqs_5$DEQ),
						     .CLR(f_reqs_5$CLR),
						     .D_OUT(f_reqs_5$D_OUT),
						     .FULL_N(f_reqs_5$FULL_N),
						     .EMPTY_N(f_reqs_5$EMPTY_N));

  // submodule f_reqs_6
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_6(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_reqs_6$D_IN),
						     .ENQ(f_reqs_6$ENQ),
						     .DEQ(f_reqs_6$DEQ),
						     .CLR(f_reqs_6$CLR),
						     .D_OUT(f_reqs_6$D_OUT),
						     .FULL_N(f_reqs_6$FULL_N),
						     .EMPTY_N(f_reqs_6$EMPTY_N));

  // submodule f_reqs_7
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_7(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_reqs_7$D_IN),
						     .ENQ(f_reqs_7$ENQ),
						     .DEQ(f_reqs_7$DEQ),
						     .CLR(f_reqs_7$CLR),
						     .D_OUT(f_reqs_7$D_OUT),
						     .FULL_N(f_reqs_7$FULL_N),
						     .EMPTY_N(f_reqs_7$EMPTY_N));

  // submodule f_reqs_8
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_8(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_reqs_8$D_IN),
						     .ENQ(f_reqs_8$ENQ),
						     .DEQ(f_reqs_8$DEQ),
						     .CLR(f_reqs_8$CLR),
						     .D_OUT(f_reqs_8$D_OUT),
						     .FULL_N(f_reqs_8$FULL_N),
						     .EMPTY_N(f_reqs_8$EMPTY_N));

  // submodule f_reqs_9
  FIFO2 #(.width(32'd153), .guarded(32'd1)) f_reqs_9(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_reqs_9$D_IN),
						     .ENQ(f_reqs_9$ENQ),
						     .DEQ(f_reqs_9$DEQ),
						     .CLR(f_reqs_9$CLR),
						     .D_OUT(f_reqs_9$D_OUT),
						     .FULL_N(f_reqs_9$FULL_N),
						     .EMPTY_N(f_reqs_9$EMPTY_N));

  // submodule f_rsps_0
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_0(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_rsps_0$D_IN),
						     .ENQ(f_rsps_0$ENQ),
						     .DEQ(f_rsps_0$DEQ),
						     .CLR(f_rsps_0$CLR),
						     .D_OUT(f_rsps_0$D_OUT),
						     .FULL_N(f_rsps_0$FULL_N),
						     .EMPTY_N(f_rsps_0$EMPTY_N));

  // submodule f_rsps_1
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_1(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_rsps_1$D_IN),
						     .ENQ(f_rsps_1$ENQ),
						     .DEQ(f_rsps_1$DEQ),
						     .CLR(f_rsps_1$CLR),
						     .D_OUT(f_rsps_1$D_OUT),
						     .FULL_N(f_rsps_1$FULL_N),
						     .EMPTY_N(f_rsps_1$EMPTY_N));

  // submodule f_rsps_10
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_10(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_rsps_10$D_IN),
						      .ENQ(f_rsps_10$ENQ),
						      .DEQ(f_rsps_10$DEQ),
						      .CLR(f_rsps_10$CLR),
						      .D_OUT(f_rsps_10$D_OUT),
						      .FULL_N(f_rsps_10$FULL_N),
						      .EMPTY_N(f_rsps_10$EMPTY_N));

  // submodule f_rsps_11
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_11(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_rsps_11$D_IN),
						      .ENQ(f_rsps_11$ENQ),
						      .DEQ(f_rsps_11$DEQ),
						      .CLR(f_rsps_11$CLR),
						      .D_OUT(f_rsps_11$D_OUT),
						      .FULL_N(f_rsps_11$FULL_N),
						      .EMPTY_N(f_rsps_11$EMPTY_N));

  // submodule f_rsps_12
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_12(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_rsps_12$D_IN),
						      .ENQ(f_rsps_12$ENQ),
						      .DEQ(f_rsps_12$DEQ),
						      .CLR(f_rsps_12$CLR),
						      .D_OUT(f_rsps_12$D_OUT),
						      .FULL_N(f_rsps_12$FULL_N),
						      .EMPTY_N(f_rsps_12$EMPTY_N));

  // submodule f_rsps_13
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_13(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_rsps_13$D_IN),
						      .ENQ(f_rsps_13$ENQ),
						      .DEQ(f_rsps_13$DEQ),
						      .CLR(f_rsps_13$CLR),
						      .D_OUT(f_rsps_13$D_OUT),
						      .FULL_N(f_rsps_13$FULL_N),
						      .EMPTY_N(f_rsps_13$EMPTY_N));

  // submodule f_rsps_14
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_14(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_rsps_14$D_IN),
						      .ENQ(f_rsps_14$ENQ),
						      .DEQ(f_rsps_14$DEQ),
						      .CLR(f_rsps_14$CLR),
						      .D_OUT(f_rsps_14$D_OUT),
						      .FULL_N(f_rsps_14$FULL_N),
						      .EMPTY_N(f_rsps_14$EMPTY_N));

  // submodule f_rsps_15
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_15(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_rsps_15$D_IN),
						      .ENQ(f_rsps_15$ENQ),
						      .DEQ(f_rsps_15$DEQ),
						      .CLR(f_rsps_15$CLR),
						      .D_OUT(f_rsps_15$D_OUT),
						      .FULL_N(f_rsps_15$FULL_N),
						      .EMPTY_N(f_rsps_15$EMPTY_N));

  // submodule f_rsps_2
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_2(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_rsps_2$D_IN),
						     .ENQ(f_rsps_2$ENQ),
						     .DEQ(f_rsps_2$DEQ),
						     .CLR(f_rsps_2$CLR),
						     .D_OUT(f_rsps_2$D_OUT),
						     .FULL_N(f_rsps_2$FULL_N),
						     .EMPTY_N(f_rsps_2$EMPTY_N));

  // submodule f_rsps_3
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_3(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_rsps_3$D_IN),
						     .ENQ(f_rsps_3$ENQ),
						     .DEQ(f_rsps_3$DEQ),
						     .CLR(f_rsps_3$CLR),
						     .D_OUT(f_rsps_3$D_OUT),
						     .FULL_N(f_rsps_3$FULL_N),
						     .EMPTY_N(f_rsps_3$EMPTY_N));

  // submodule f_rsps_4
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_4(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_rsps_4$D_IN),
						     .ENQ(f_rsps_4$ENQ),
						     .DEQ(f_rsps_4$DEQ),
						     .CLR(f_rsps_4$CLR),
						     .D_OUT(f_rsps_4$D_OUT),
						     .FULL_N(f_rsps_4$FULL_N),
						     .EMPTY_N(f_rsps_4$EMPTY_N));

  // submodule f_rsps_5
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_5(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_rsps_5$D_IN),
						     .ENQ(f_rsps_5$ENQ),
						     .DEQ(f_rsps_5$DEQ),
						     .CLR(f_rsps_5$CLR),
						     .D_OUT(f_rsps_5$D_OUT),
						     .FULL_N(f_rsps_5$FULL_N),
						     .EMPTY_N(f_rsps_5$EMPTY_N));

  // submodule f_rsps_6
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_6(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_rsps_6$D_IN),
						     .ENQ(f_rsps_6$ENQ),
						     .DEQ(f_rsps_6$DEQ),
						     .CLR(f_rsps_6$CLR),
						     .D_OUT(f_rsps_6$D_OUT),
						     .FULL_N(f_rsps_6$FULL_N),
						     .EMPTY_N(f_rsps_6$EMPTY_N));

  // submodule f_rsps_7
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_7(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_rsps_7$D_IN),
						     .ENQ(f_rsps_7$ENQ),
						     .DEQ(f_rsps_7$DEQ),
						     .CLR(f_rsps_7$CLR),
						     .D_OUT(f_rsps_7$D_OUT),
						     .FULL_N(f_rsps_7$FULL_N),
						     .EMPTY_N(f_rsps_7$EMPTY_N));

  // submodule f_rsps_8
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_8(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_rsps_8$D_IN),
						     .ENQ(f_rsps_8$ENQ),
						     .DEQ(f_rsps_8$DEQ),
						     .CLR(f_rsps_8$CLR),
						     .D_OUT(f_rsps_8$D_OUT),
						     .FULL_N(f_rsps_8$FULL_N),
						     .EMPTY_N(f_rsps_8$EMPTY_N));

  // submodule f_rsps_9
  FIFO2 #(.width(32'd102), .guarded(32'd1)) f_rsps_9(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_rsps_9$D_IN),
						     .ENQ(f_rsps_9$ENQ),
						     .DEQ(f_rsps_9$DEQ),
						     .CLR(f_rsps_9$CLR),
						     .D_OUT(f_rsps_9$D_OUT),
						     .FULL_N(f_rsps_9$FULL_N),
						     .EMPTY_N(f_rsps_9$EMPTY_N));

  // submodule v_chanvadds_0
  mkChanVadd v_chanvadds_0(.CLK(CLK),
			   .RST_N(RST_N),
			   .mc_client_flush_response_put(v_chanvadds_0$mc_client_flush_response_put),
			   .mc_client_req_rsp_response_put(v_chanvadds_0$mc_client_req_rsp_response_put),
			   .start_aeid(v_chanvadds_0$start_aeid),
			   .start_chan(v_chanvadds_0$start_chan),
			   .start_evenNotOdd(v_chanvadds_0$start_evenNotOdd),
			   .start_rd_base_1(v_chanvadds_0$start_rd_base_1),
			   .start_rd_base_2(v_chanvadds_0$start_rd_base_2),
			   .start_rd_limit_1(v_chanvadds_0$start_rd_limit_1),
			   .start_rd_limit_2(v_chanvadds_0$start_rd_limit_2),
			   .start_wr_base(v_chanvadds_0$start_wr_base),
			   .start_wr_limit(v_chanvadds_0$start_wr_limit),
			   .EN_start(v_chanvadds_0$EN_start),
			   .EN_result(v_chanvadds_0$EN_result),
			   .EN_mc_client_req_rsp_request_get(v_chanvadds_0$EN_mc_client_req_rsp_request_get),
			   .EN_mc_client_req_rsp_response_put(v_chanvadds_0$EN_mc_client_req_rsp_response_put),
			   .EN_mc_client_flush_request_get(v_chanvadds_0$EN_mc_client_flush_request_get),
			   .EN_mc_client_flush_response_put(v_chanvadds_0$EN_mc_client_flush_response_put),
			   .RDY_start(v_chanvadds_0$RDY_start),
			   .result(v_chanvadds_0$result),
			   .RDY_result(v_chanvadds_0$RDY_result),
			   .mc_client_req_rsp_request_get(v_chanvadds_0$mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_request_get(v_chanvadds_0$RDY_mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_response_put(v_chanvadds_0$RDY_mc_client_req_rsp_response_put),
			   .mc_client_flush_request_get(v_chanvadds_0$mc_client_flush_request_get),
			   .RDY_mc_client_flush_request_get(v_chanvadds_0$RDY_mc_client_flush_request_get),
			   .RDY_mc_client_flush_response_put(v_chanvadds_0$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_1
  mkChanVadd v_chanvadds_1(.CLK(CLK),
			   .RST_N(RST_N),
			   .mc_client_flush_response_put(v_chanvadds_1$mc_client_flush_response_put),
			   .mc_client_req_rsp_response_put(v_chanvadds_1$mc_client_req_rsp_response_put),
			   .start_aeid(v_chanvadds_1$start_aeid),
			   .start_chan(v_chanvadds_1$start_chan),
			   .start_evenNotOdd(v_chanvadds_1$start_evenNotOdd),
			   .start_rd_base_1(v_chanvadds_1$start_rd_base_1),
			   .start_rd_base_2(v_chanvadds_1$start_rd_base_2),
			   .start_rd_limit_1(v_chanvadds_1$start_rd_limit_1),
			   .start_rd_limit_2(v_chanvadds_1$start_rd_limit_2),
			   .start_wr_base(v_chanvadds_1$start_wr_base),
			   .start_wr_limit(v_chanvadds_1$start_wr_limit),
			   .EN_start(v_chanvadds_1$EN_start),
			   .EN_result(v_chanvadds_1$EN_result),
			   .EN_mc_client_req_rsp_request_get(v_chanvadds_1$EN_mc_client_req_rsp_request_get),
			   .EN_mc_client_req_rsp_response_put(v_chanvadds_1$EN_mc_client_req_rsp_response_put),
			   .EN_mc_client_flush_request_get(v_chanvadds_1$EN_mc_client_flush_request_get),
			   .EN_mc_client_flush_response_put(v_chanvadds_1$EN_mc_client_flush_response_put),
			   .RDY_start(v_chanvadds_1$RDY_start),
			   .result(v_chanvadds_1$result),
			   .RDY_result(v_chanvadds_1$RDY_result),
			   .mc_client_req_rsp_request_get(v_chanvadds_1$mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_request_get(v_chanvadds_1$RDY_mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_response_put(v_chanvadds_1$RDY_mc_client_req_rsp_response_put),
			   .mc_client_flush_request_get(v_chanvadds_1$mc_client_flush_request_get),
			   .RDY_mc_client_flush_request_get(v_chanvadds_1$RDY_mc_client_flush_request_get),
			   .RDY_mc_client_flush_response_put(v_chanvadds_1$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_10
  mkChanVadd v_chanvadds_10(.CLK(CLK),
			    .RST_N(RST_N),
			    .mc_client_flush_response_put(v_chanvadds_10$mc_client_flush_response_put),
			    .mc_client_req_rsp_response_put(v_chanvadds_10$mc_client_req_rsp_response_put),
			    .start_aeid(v_chanvadds_10$start_aeid),
			    .start_chan(v_chanvadds_10$start_chan),
			    .start_evenNotOdd(v_chanvadds_10$start_evenNotOdd),
			    .start_rd_base_1(v_chanvadds_10$start_rd_base_1),
			    .start_rd_base_2(v_chanvadds_10$start_rd_base_2),
			    .start_rd_limit_1(v_chanvadds_10$start_rd_limit_1),
			    .start_rd_limit_2(v_chanvadds_10$start_rd_limit_2),
			    .start_wr_base(v_chanvadds_10$start_wr_base),
			    .start_wr_limit(v_chanvadds_10$start_wr_limit),
			    .EN_start(v_chanvadds_10$EN_start),
			    .EN_result(v_chanvadds_10$EN_result),
			    .EN_mc_client_req_rsp_request_get(v_chanvadds_10$EN_mc_client_req_rsp_request_get),
			    .EN_mc_client_req_rsp_response_put(v_chanvadds_10$EN_mc_client_req_rsp_response_put),
			    .EN_mc_client_flush_request_get(v_chanvadds_10$EN_mc_client_flush_request_get),
			    .EN_mc_client_flush_response_put(v_chanvadds_10$EN_mc_client_flush_response_put),
			    .RDY_start(v_chanvadds_10$RDY_start),
			    .result(v_chanvadds_10$result),
			    .RDY_result(v_chanvadds_10$RDY_result),
			    .mc_client_req_rsp_request_get(v_chanvadds_10$mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_request_get(v_chanvadds_10$RDY_mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_response_put(v_chanvadds_10$RDY_mc_client_req_rsp_response_put),
			    .mc_client_flush_request_get(v_chanvadds_10$mc_client_flush_request_get),
			    .RDY_mc_client_flush_request_get(v_chanvadds_10$RDY_mc_client_flush_request_get),
			    .RDY_mc_client_flush_response_put(v_chanvadds_10$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_11
  mkChanVadd v_chanvadds_11(.CLK(CLK),
			    .RST_N(RST_N),
			    .mc_client_flush_response_put(v_chanvadds_11$mc_client_flush_response_put),
			    .mc_client_req_rsp_response_put(v_chanvadds_11$mc_client_req_rsp_response_put),
			    .start_aeid(v_chanvadds_11$start_aeid),
			    .start_chan(v_chanvadds_11$start_chan),
			    .start_evenNotOdd(v_chanvadds_11$start_evenNotOdd),
			    .start_rd_base_1(v_chanvadds_11$start_rd_base_1),
			    .start_rd_base_2(v_chanvadds_11$start_rd_base_2),
			    .start_rd_limit_1(v_chanvadds_11$start_rd_limit_1),
			    .start_rd_limit_2(v_chanvadds_11$start_rd_limit_2),
			    .start_wr_base(v_chanvadds_11$start_wr_base),
			    .start_wr_limit(v_chanvadds_11$start_wr_limit),
			    .EN_start(v_chanvadds_11$EN_start),
			    .EN_result(v_chanvadds_11$EN_result),
			    .EN_mc_client_req_rsp_request_get(v_chanvadds_11$EN_mc_client_req_rsp_request_get),
			    .EN_mc_client_req_rsp_response_put(v_chanvadds_11$EN_mc_client_req_rsp_response_put),
			    .EN_mc_client_flush_request_get(v_chanvadds_11$EN_mc_client_flush_request_get),
			    .EN_mc_client_flush_response_put(v_chanvadds_11$EN_mc_client_flush_response_put),
			    .RDY_start(v_chanvadds_11$RDY_start),
			    .result(v_chanvadds_11$result),
			    .RDY_result(v_chanvadds_11$RDY_result),
			    .mc_client_req_rsp_request_get(v_chanvadds_11$mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_request_get(v_chanvadds_11$RDY_mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_response_put(v_chanvadds_11$RDY_mc_client_req_rsp_response_put),
			    .mc_client_flush_request_get(v_chanvadds_11$mc_client_flush_request_get),
			    .RDY_mc_client_flush_request_get(v_chanvadds_11$RDY_mc_client_flush_request_get),
			    .RDY_mc_client_flush_response_put(v_chanvadds_11$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_12
  mkChanVadd v_chanvadds_12(.CLK(CLK),
			    .RST_N(RST_N),
			    .mc_client_flush_response_put(v_chanvadds_12$mc_client_flush_response_put),
			    .mc_client_req_rsp_response_put(v_chanvadds_12$mc_client_req_rsp_response_put),
			    .start_aeid(v_chanvadds_12$start_aeid),
			    .start_chan(v_chanvadds_12$start_chan),
			    .start_evenNotOdd(v_chanvadds_12$start_evenNotOdd),
			    .start_rd_base_1(v_chanvadds_12$start_rd_base_1),
			    .start_rd_base_2(v_chanvadds_12$start_rd_base_2),
			    .start_rd_limit_1(v_chanvadds_12$start_rd_limit_1),
			    .start_rd_limit_2(v_chanvadds_12$start_rd_limit_2),
			    .start_wr_base(v_chanvadds_12$start_wr_base),
			    .start_wr_limit(v_chanvadds_12$start_wr_limit),
			    .EN_start(v_chanvadds_12$EN_start),
			    .EN_result(v_chanvadds_12$EN_result),
			    .EN_mc_client_req_rsp_request_get(v_chanvadds_12$EN_mc_client_req_rsp_request_get),
			    .EN_mc_client_req_rsp_response_put(v_chanvadds_12$EN_mc_client_req_rsp_response_put),
			    .EN_mc_client_flush_request_get(v_chanvadds_12$EN_mc_client_flush_request_get),
			    .EN_mc_client_flush_response_put(v_chanvadds_12$EN_mc_client_flush_response_put),
			    .RDY_start(v_chanvadds_12$RDY_start),
			    .result(v_chanvadds_12$result),
			    .RDY_result(v_chanvadds_12$RDY_result),
			    .mc_client_req_rsp_request_get(v_chanvadds_12$mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_request_get(v_chanvadds_12$RDY_mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_response_put(v_chanvadds_12$RDY_mc_client_req_rsp_response_put),
			    .mc_client_flush_request_get(v_chanvadds_12$mc_client_flush_request_get),
			    .RDY_mc_client_flush_request_get(v_chanvadds_12$RDY_mc_client_flush_request_get),
			    .RDY_mc_client_flush_response_put(v_chanvadds_12$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_13
  mkChanVadd v_chanvadds_13(.CLK(CLK),
			    .RST_N(RST_N),
			    .mc_client_flush_response_put(v_chanvadds_13$mc_client_flush_response_put),
			    .mc_client_req_rsp_response_put(v_chanvadds_13$mc_client_req_rsp_response_put),
			    .start_aeid(v_chanvadds_13$start_aeid),
			    .start_chan(v_chanvadds_13$start_chan),
			    .start_evenNotOdd(v_chanvadds_13$start_evenNotOdd),
			    .start_rd_base_1(v_chanvadds_13$start_rd_base_1),
			    .start_rd_base_2(v_chanvadds_13$start_rd_base_2),
			    .start_rd_limit_1(v_chanvadds_13$start_rd_limit_1),
			    .start_rd_limit_2(v_chanvadds_13$start_rd_limit_2),
			    .start_wr_base(v_chanvadds_13$start_wr_base),
			    .start_wr_limit(v_chanvadds_13$start_wr_limit),
			    .EN_start(v_chanvadds_13$EN_start),
			    .EN_result(v_chanvadds_13$EN_result),
			    .EN_mc_client_req_rsp_request_get(v_chanvadds_13$EN_mc_client_req_rsp_request_get),
			    .EN_mc_client_req_rsp_response_put(v_chanvadds_13$EN_mc_client_req_rsp_response_put),
			    .EN_mc_client_flush_request_get(v_chanvadds_13$EN_mc_client_flush_request_get),
			    .EN_mc_client_flush_response_put(v_chanvadds_13$EN_mc_client_flush_response_put),
			    .RDY_start(v_chanvadds_13$RDY_start),
			    .result(v_chanvadds_13$result),
			    .RDY_result(v_chanvadds_13$RDY_result),
			    .mc_client_req_rsp_request_get(v_chanvadds_13$mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_request_get(v_chanvadds_13$RDY_mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_response_put(v_chanvadds_13$RDY_mc_client_req_rsp_response_put),
			    .mc_client_flush_request_get(v_chanvadds_13$mc_client_flush_request_get),
			    .RDY_mc_client_flush_request_get(v_chanvadds_13$RDY_mc_client_flush_request_get),
			    .RDY_mc_client_flush_response_put(v_chanvadds_13$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_14
  mkChanVadd v_chanvadds_14(.CLK(CLK),
			    .RST_N(RST_N),
			    .mc_client_flush_response_put(v_chanvadds_14$mc_client_flush_response_put),
			    .mc_client_req_rsp_response_put(v_chanvadds_14$mc_client_req_rsp_response_put),
			    .start_aeid(v_chanvadds_14$start_aeid),
			    .start_chan(v_chanvadds_14$start_chan),
			    .start_evenNotOdd(v_chanvadds_14$start_evenNotOdd),
			    .start_rd_base_1(v_chanvadds_14$start_rd_base_1),
			    .start_rd_base_2(v_chanvadds_14$start_rd_base_2),
			    .start_rd_limit_1(v_chanvadds_14$start_rd_limit_1),
			    .start_rd_limit_2(v_chanvadds_14$start_rd_limit_2),
			    .start_wr_base(v_chanvadds_14$start_wr_base),
			    .start_wr_limit(v_chanvadds_14$start_wr_limit),
			    .EN_start(v_chanvadds_14$EN_start),
			    .EN_result(v_chanvadds_14$EN_result),
			    .EN_mc_client_req_rsp_request_get(v_chanvadds_14$EN_mc_client_req_rsp_request_get),
			    .EN_mc_client_req_rsp_response_put(v_chanvadds_14$EN_mc_client_req_rsp_response_put),
			    .EN_mc_client_flush_request_get(v_chanvadds_14$EN_mc_client_flush_request_get),
			    .EN_mc_client_flush_response_put(v_chanvadds_14$EN_mc_client_flush_response_put),
			    .RDY_start(v_chanvadds_14$RDY_start),
			    .result(v_chanvadds_14$result),
			    .RDY_result(v_chanvadds_14$RDY_result),
			    .mc_client_req_rsp_request_get(v_chanvadds_14$mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_request_get(v_chanvadds_14$RDY_mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_response_put(v_chanvadds_14$RDY_mc_client_req_rsp_response_put),
			    .mc_client_flush_request_get(v_chanvadds_14$mc_client_flush_request_get),
			    .RDY_mc_client_flush_request_get(v_chanvadds_14$RDY_mc_client_flush_request_get),
			    .RDY_mc_client_flush_response_put(v_chanvadds_14$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_15
  mkChanVadd v_chanvadds_15(.CLK(CLK),
			    .RST_N(RST_N),
			    .mc_client_flush_response_put(v_chanvadds_15$mc_client_flush_response_put),
			    .mc_client_req_rsp_response_put(v_chanvadds_15$mc_client_req_rsp_response_put),
			    .start_aeid(v_chanvadds_15$start_aeid),
			    .start_chan(v_chanvadds_15$start_chan),
			    .start_evenNotOdd(v_chanvadds_15$start_evenNotOdd),
			    .start_rd_base_1(v_chanvadds_15$start_rd_base_1),
			    .start_rd_base_2(v_chanvadds_15$start_rd_base_2),
			    .start_rd_limit_1(v_chanvadds_15$start_rd_limit_1),
			    .start_rd_limit_2(v_chanvadds_15$start_rd_limit_2),
			    .start_wr_base(v_chanvadds_15$start_wr_base),
			    .start_wr_limit(v_chanvadds_15$start_wr_limit),
			    .EN_start(v_chanvadds_15$EN_start),
			    .EN_result(v_chanvadds_15$EN_result),
			    .EN_mc_client_req_rsp_request_get(v_chanvadds_15$EN_mc_client_req_rsp_request_get),
			    .EN_mc_client_req_rsp_response_put(v_chanvadds_15$EN_mc_client_req_rsp_response_put),
			    .EN_mc_client_flush_request_get(v_chanvadds_15$EN_mc_client_flush_request_get),
			    .EN_mc_client_flush_response_put(v_chanvadds_15$EN_mc_client_flush_response_put),
			    .RDY_start(v_chanvadds_15$RDY_start),
			    .result(v_chanvadds_15$result),
			    .RDY_result(v_chanvadds_15$RDY_result),
			    .mc_client_req_rsp_request_get(v_chanvadds_15$mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_request_get(v_chanvadds_15$RDY_mc_client_req_rsp_request_get),
			    .RDY_mc_client_req_rsp_response_put(v_chanvadds_15$RDY_mc_client_req_rsp_response_put),
			    .mc_client_flush_request_get(v_chanvadds_15$mc_client_flush_request_get),
			    .RDY_mc_client_flush_request_get(v_chanvadds_15$RDY_mc_client_flush_request_get),
			    .RDY_mc_client_flush_response_put(v_chanvadds_15$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_2
  mkChanVadd v_chanvadds_2(.CLK(CLK),
			   .RST_N(RST_N),
			   .mc_client_flush_response_put(v_chanvadds_2$mc_client_flush_response_put),
			   .mc_client_req_rsp_response_put(v_chanvadds_2$mc_client_req_rsp_response_put),
			   .start_aeid(v_chanvadds_2$start_aeid),
			   .start_chan(v_chanvadds_2$start_chan),
			   .start_evenNotOdd(v_chanvadds_2$start_evenNotOdd),
			   .start_rd_base_1(v_chanvadds_2$start_rd_base_1),
			   .start_rd_base_2(v_chanvadds_2$start_rd_base_2),
			   .start_rd_limit_1(v_chanvadds_2$start_rd_limit_1),
			   .start_rd_limit_2(v_chanvadds_2$start_rd_limit_2),
			   .start_wr_base(v_chanvadds_2$start_wr_base),
			   .start_wr_limit(v_chanvadds_2$start_wr_limit),
			   .EN_start(v_chanvadds_2$EN_start),
			   .EN_result(v_chanvadds_2$EN_result),
			   .EN_mc_client_req_rsp_request_get(v_chanvadds_2$EN_mc_client_req_rsp_request_get),
			   .EN_mc_client_req_rsp_response_put(v_chanvadds_2$EN_mc_client_req_rsp_response_put),
			   .EN_mc_client_flush_request_get(v_chanvadds_2$EN_mc_client_flush_request_get),
			   .EN_mc_client_flush_response_put(v_chanvadds_2$EN_mc_client_flush_response_put),
			   .RDY_start(v_chanvadds_2$RDY_start),
			   .result(v_chanvadds_2$result),
			   .RDY_result(v_chanvadds_2$RDY_result),
			   .mc_client_req_rsp_request_get(v_chanvadds_2$mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_request_get(v_chanvadds_2$RDY_mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_response_put(v_chanvadds_2$RDY_mc_client_req_rsp_response_put),
			   .mc_client_flush_request_get(v_chanvadds_2$mc_client_flush_request_get),
			   .RDY_mc_client_flush_request_get(v_chanvadds_2$RDY_mc_client_flush_request_get),
			   .RDY_mc_client_flush_response_put(v_chanvadds_2$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_3
  mkChanVadd v_chanvadds_3(.CLK(CLK),
			   .RST_N(RST_N),
			   .mc_client_flush_response_put(v_chanvadds_3$mc_client_flush_response_put),
			   .mc_client_req_rsp_response_put(v_chanvadds_3$mc_client_req_rsp_response_put),
			   .start_aeid(v_chanvadds_3$start_aeid),
			   .start_chan(v_chanvadds_3$start_chan),
			   .start_evenNotOdd(v_chanvadds_3$start_evenNotOdd),
			   .start_rd_base_1(v_chanvadds_3$start_rd_base_1),
			   .start_rd_base_2(v_chanvadds_3$start_rd_base_2),
			   .start_rd_limit_1(v_chanvadds_3$start_rd_limit_1),
			   .start_rd_limit_2(v_chanvadds_3$start_rd_limit_2),
			   .start_wr_base(v_chanvadds_3$start_wr_base),
			   .start_wr_limit(v_chanvadds_3$start_wr_limit),
			   .EN_start(v_chanvadds_3$EN_start),
			   .EN_result(v_chanvadds_3$EN_result),
			   .EN_mc_client_req_rsp_request_get(v_chanvadds_3$EN_mc_client_req_rsp_request_get),
			   .EN_mc_client_req_rsp_response_put(v_chanvadds_3$EN_mc_client_req_rsp_response_put),
			   .EN_mc_client_flush_request_get(v_chanvadds_3$EN_mc_client_flush_request_get),
			   .EN_mc_client_flush_response_put(v_chanvadds_3$EN_mc_client_flush_response_put),
			   .RDY_start(v_chanvadds_3$RDY_start),
			   .result(v_chanvadds_3$result),
			   .RDY_result(v_chanvadds_3$RDY_result),
			   .mc_client_req_rsp_request_get(v_chanvadds_3$mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_request_get(v_chanvadds_3$RDY_mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_response_put(v_chanvadds_3$RDY_mc_client_req_rsp_response_put),
			   .mc_client_flush_request_get(v_chanvadds_3$mc_client_flush_request_get),
			   .RDY_mc_client_flush_request_get(v_chanvadds_3$RDY_mc_client_flush_request_get),
			   .RDY_mc_client_flush_response_put(v_chanvadds_3$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_4
  mkChanVadd v_chanvadds_4(.CLK(CLK),
			   .RST_N(RST_N),
			   .mc_client_flush_response_put(v_chanvadds_4$mc_client_flush_response_put),
			   .mc_client_req_rsp_response_put(v_chanvadds_4$mc_client_req_rsp_response_put),
			   .start_aeid(v_chanvadds_4$start_aeid),
			   .start_chan(v_chanvadds_4$start_chan),
			   .start_evenNotOdd(v_chanvadds_4$start_evenNotOdd),
			   .start_rd_base_1(v_chanvadds_4$start_rd_base_1),
			   .start_rd_base_2(v_chanvadds_4$start_rd_base_2),
			   .start_rd_limit_1(v_chanvadds_4$start_rd_limit_1),
			   .start_rd_limit_2(v_chanvadds_4$start_rd_limit_2),
			   .start_wr_base(v_chanvadds_4$start_wr_base),
			   .start_wr_limit(v_chanvadds_4$start_wr_limit),
			   .EN_start(v_chanvadds_4$EN_start),
			   .EN_result(v_chanvadds_4$EN_result),
			   .EN_mc_client_req_rsp_request_get(v_chanvadds_4$EN_mc_client_req_rsp_request_get),
			   .EN_mc_client_req_rsp_response_put(v_chanvadds_4$EN_mc_client_req_rsp_response_put),
			   .EN_mc_client_flush_request_get(v_chanvadds_4$EN_mc_client_flush_request_get),
			   .EN_mc_client_flush_response_put(v_chanvadds_4$EN_mc_client_flush_response_put),
			   .RDY_start(v_chanvadds_4$RDY_start),
			   .result(v_chanvadds_4$result),
			   .RDY_result(v_chanvadds_4$RDY_result),
			   .mc_client_req_rsp_request_get(v_chanvadds_4$mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_request_get(v_chanvadds_4$RDY_mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_response_put(v_chanvadds_4$RDY_mc_client_req_rsp_response_put),
			   .mc_client_flush_request_get(v_chanvadds_4$mc_client_flush_request_get),
			   .RDY_mc_client_flush_request_get(v_chanvadds_4$RDY_mc_client_flush_request_get),
			   .RDY_mc_client_flush_response_put(v_chanvadds_4$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_5
  mkChanVadd v_chanvadds_5(.CLK(CLK),
			   .RST_N(RST_N),
			   .mc_client_flush_response_put(v_chanvadds_5$mc_client_flush_response_put),
			   .mc_client_req_rsp_response_put(v_chanvadds_5$mc_client_req_rsp_response_put),
			   .start_aeid(v_chanvadds_5$start_aeid),
			   .start_chan(v_chanvadds_5$start_chan),
			   .start_evenNotOdd(v_chanvadds_5$start_evenNotOdd),
			   .start_rd_base_1(v_chanvadds_5$start_rd_base_1),
			   .start_rd_base_2(v_chanvadds_5$start_rd_base_2),
			   .start_rd_limit_1(v_chanvadds_5$start_rd_limit_1),
			   .start_rd_limit_2(v_chanvadds_5$start_rd_limit_2),
			   .start_wr_base(v_chanvadds_5$start_wr_base),
			   .start_wr_limit(v_chanvadds_5$start_wr_limit),
			   .EN_start(v_chanvadds_5$EN_start),
			   .EN_result(v_chanvadds_5$EN_result),
			   .EN_mc_client_req_rsp_request_get(v_chanvadds_5$EN_mc_client_req_rsp_request_get),
			   .EN_mc_client_req_rsp_response_put(v_chanvadds_5$EN_mc_client_req_rsp_response_put),
			   .EN_mc_client_flush_request_get(v_chanvadds_5$EN_mc_client_flush_request_get),
			   .EN_mc_client_flush_response_put(v_chanvadds_5$EN_mc_client_flush_response_put),
			   .RDY_start(v_chanvadds_5$RDY_start),
			   .result(v_chanvadds_5$result),
			   .RDY_result(v_chanvadds_5$RDY_result),
			   .mc_client_req_rsp_request_get(v_chanvadds_5$mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_request_get(v_chanvadds_5$RDY_mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_response_put(v_chanvadds_5$RDY_mc_client_req_rsp_response_put),
			   .mc_client_flush_request_get(v_chanvadds_5$mc_client_flush_request_get),
			   .RDY_mc_client_flush_request_get(v_chanvadds_5$RDY_mc_client_flush_request_get),
			   .RDY_mc_client_flush_response_put(v_chanvadds_5$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_6
  mkChanVadd v_chanvadds_6(.CLK(CLK),
			   .RST_N(RST_N),
			   .mc_client_flush_response_put(v_chanvadds_6$mc_client_flush_response_put),
			   .mc_client_req_rsp_response_put(v_chanvadds_6$mc_client_req_rsp_response_put),
			   .start_aeid(v_chanvadds_6$start_aeid),
			   .start_chan(v_chanvadds_6$start_chan),
			   .start_evenNotOdd(v_chanvadds_6$start_evenNotOdd),
			   .start_rd_base_1(v_chanvadds_6$start_rd_base_1),
			   .start_rd_base_2(v_chanvadds_6$start_rd_base_2),
			   .start_rd_limit_1(v_chanvadds_6$start_rd_limit_1),
			   .start_rd_limit_2(v_chanvadds_6$start_rd_limit_2),
			   .start_wr_base(v_chanvadds_6$start_wr_base),
			   .start_wr_limit(v_chanvadds_6$start_wr_limit),
			   .EN_start(v_chanvadds_6$EN_start),
			   .EN_result(v_chanvadds_6$EN_result),
			   .EN_mc_client_req_rsp_request_get(v_chanvadds_6$EN_mc_client_req_rsp_request_get),
			   .EN_mc_client_req_rsp_response_put(v_chanvadds_6$EN_mc_client_req_rsp_response_put),
			   .EN_mc_client_flush_request_get(v_chanvadds_6$EN_mc_client_flush_request_get),
			   .EN_mc_client_flush_response_put(v_chanvadds_6$EN_mc_client_flush_response_put),
			   .RDY_start(v_chanvadds_6$RDY_start),
			   .result(v_chanvadds_6$result),
			   .RDY_result(v_chanvadds_6$RDY_result),
			   .mc_client_req_rsp_request_get(v_chanvadds_6$mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_request_get(v_chanvadds_6$RDY_mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_response_put(v_chanvadds_6$RDY_mc_client_req_rsp_response_put),
			   .mc_client_flush_request_get(v_chanvadds_6$mc_client_flush_request_get),
			   .RDY_mc_client_flush_request_get(v_chanvadds_6$RDY_mc_client_flush_request_get),
			   .RDY_mc_client_flush_response_put(v_chanvadds_6$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_7
  mkChanVadd v_chanvadds_7(.CLK(CLK),
			   .RST_N(RST_N),
			   .mc_client_flush_response_put(v_chanvadds_7$mc_client_flush_response_put),
			   .mc_client_req_rsp_response_put(v_chanvadds_7$mc_client_req_rsp_response_put),
			   .start_aeid(v_chanvadds_7$start_aeid),
			   .start_chan(v_chanvadds_7$start_chan),
			   .start_evenNotOdd(v_chanvadds_7$start_evenNotOdd),
			   .start_rd_base_1(v_chanvadds_7$start_rd_base_1),
			   .start_rd_base_2(v_chanvadds_7$start_rd_base_2),
			   .start_rd_limit_1(v_chanvadds_7$start_rd_limit_1),
			   .start_rd_limit_2(v_chanvadds_7$start_rd_limit_2),
			   .start_wr_base(v_chanvadds_7$start_wr_base),
			   .start_wr_limit(v_chanvadds_7$start_wr_limit),
			   .EN_start(v_chanvadds_7$EN_start),
			   .EN_result(v_chanvadds_7$EN_result),
			   .EN_mc_client_req_rsp_request_get(v_chanvadds_7$EN_mc_client_req_rsp_request_get),
			   .EN_mc_client_req_rsp_response_put(v_chanvadds_7$EN_mc_client_req_rsp_response_put),
			   .EN_mc_client_flush_request_get(v_chanvadds_7$EN_mc_client_flush_request_get),
			   .EN_mc_client_flush_response_put(v_chanvadds_7$EN_mc_client_flush_response_put),
			   .RDY_start(v_chanvadds_7$RDY_start),
			   .result(v_chanvadds_7$result),
			   .RDY_result(v_chanvadds_7$RDY_result),
			   .mc_client_req_rsp_request_get(v_chanvadds_7$mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_request_get(v_chanvadds_7$RDY_mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_response_put(v_chanvadds_7$RDY_mc_client_req_rsp_response_put),
			   .mc_client_flush_request_get(v_chanvadds_7$mc_client_flush_request_get),
			   .RDY_mc_client_flush_request_get(v_chanvadds_7$RDY_mc_client_flush_request_get),
			   .RDY_mc_client_flush_response_put(v_chanvadds_7$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_8
  mkChanVadd v_chanvadds_8(.CLK(CLK),
			   .RST_N(RST_N),
			   .mc_client_flush_response_put(v_chanvadds_8$mc_client_flush_response_put),
			   .mc_client_req_rsp_response_put(v_chanvadds_8$mc_client_req_rsp_response_put),
			   .start_aeid(v_chanvadds_8$start_aeid),
			   .start_chan(v_chanvadds_8$start_chan),
			   .start_evenNotOdd(v_chanvadds_8$start_evenNotOdd),
			   .start_rd_base_1(v_chanvadds_8$start_rd_base_1),
			   .start_rd_base_2(v_chanvadds_8$start_rd_base_2),
			   .start_rd_limit_1(v_chanvadds_8$start_rd_limit_1),
			   .start_rd_limit_2(v_chanvadds_8$start_rd_limit_2),
			   .start_wr_base(v_chanvadds_8$start_wr_base),
			   .start_wr_limit(v_chanvadds_8$start_wr_limit),
			   .EN_start(v_chanvadds_8$EN_start),
			   .EN_result(v_chanvadds_8$EN_result),
			   .EN_mc_client_req_rsp_request_get(v_chanvadds_8$EN_mc_client_req_rsp_request_get),
			   .EN_mc_client_req_rsp_response_put(v_chanvadds_8$EN_mc_client_req_rsp_response_put),
			   .EN_mc_client_flush_request_get(v_chanvadds_8$EN_mc_client_flush_request_get),
			   .EN_mc_client_flush_response_put(v_chanvadds_8$EN_mc_client_flush_response_put),
			   .RDY_start(v_chanvadds_8$RDY_start),
			   .result(v_chanvadds_8$result),
			   .RDY_result(v_chanvadds_8$RDY_result),
			   .mc_client_req_rsp_request_get(v_chanvadds_8$mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_request_get(v_chanvadds_8$RDY_mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_response_put(v_chanvadds_8$RDY_mc_client_req_rsp_response_put),
			   .mc_client_flush_request_get(v_chanvadds_8$mc_client_flush_request_get),
			   .RDY_mc_client_flush_request_get(v_chanvadds_8$RDY_mc_client_flush_request_get),
			   .RDY_mc_client_flush_response_put(v_chanvadds_8$RDY_mc_client_flush_response_put));

  // submodule v_chanvadds_9
  mkChanVadd v_chanvadds_9(.CLK(CLK),
			   .RST_N(RST_N),
			   .mc_client_flush_response_put(v_chanvadds_9$mc_client_flush_response_put),
			   .mc_client_req_rsp_response_put(v_chanvadds_9$mc_client_req_rsp_response_put),
			   .start_aeid(v_chanvadds_9$start_aeid),
			   .start_chan(v_chanvadds_9$start_chan),
			   .start_evenNotOdd(v_chanvadds_9$start_evenNotOdd),
			   .start_rd_base_1(v_chanvadds_9$start_rd_base_1),
			   .start_rd_base_2(v_chanvadds_9$start_rd_base_2),
			   .start_rd_limit_1(v_chanvadds_9$start_rd_limit_1),
			   .start_rd_limit_2(v_chanvadds_9$start_rd_limit_2),
			   .start_wr_base(v_chanvadds_9$start_wr_base),
			   .start_wr_limit(v_chanvadds_9$start_wr_limit),
			   .EN_start(v_chanvadds_9$EN_start),
			   .EN_result(v_chanvadds_9$EN_result),
			   .EN_mc_client_req_rsp_request_get(v_chanvadds_9$EN_mc_client_req_rsp_request_get),
			   .EN_mc_client_req_rsp_response_put(v_chanvadds_9$EN_mc_client_req_rsp_response_put),
			   .EN_mc_client_flush_request_get(v_chanvadds_9$EN_mc_client_flush_request_get),
			   .EN_mc_client_flush_response_put(v_chanvadds_9$EN_mc_client_flush_response_put),
			   .RDY_start(v_chanvadds_9$RDY_start),
			   .result(v_chanvadds_9$result),
			   .RDY_result(v_chanvadds_9$RDY_result),
			   .mc_client_req_rsp_request_get(v_chanvadds_9$mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_request_get(v_chanvadds_9$RDY_mc_client_req_rsp_request_get),
			   .RDY_mc_client_req_rsp_response_put(v_chanvadds_9$RDY_mc_client_req_rsp_response_put),
			   .mc_client_flush_request_get(v_chanvadds_9$mc_client_flush_request_get),
			   .RDY_mc_client_flush_request_get(v_chanvadds_9$RDY_mc_client_flush_request_get),
			   .RDY_mc_client_flush_response_put(v_chanvadds_9$RDY_mc_client_flush_response_put));

  // rule RL_ClientServerRequest
  assign WILL_FIRE_RL_ClientServerRequest =
	     v_chanvadds_0$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_0$FULL_N ;

  // rule RL_ClientServerResponse
  assign WILL_FIRE_RL_ClientServerResponse =
	     v_chanvadds_0$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_0$EMPTY_N ;

  // rule RL_ClientServerRequest_4
  assign WILL_FIRE_RL_ClientServerRequest_4 =
	     v_chanvadds_2$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_2$FULL_N ;

  // rule RL_ClientServerResponse_4
  assign WILL_FIRE_RL_ClientServerResponse_4 =
	     v_chanvadds_2$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_2$EMPTY_N ;

  // rule RL_ClientServerRequest_8
  assign WILL_FIRE_RL_ClientServerRequest_8 =
	     v_chanvadds_4$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_4$FULL_N ;

  // rule RL_ClientServerResponse_8
  assign WILL_FIRE_RL_ClientServerResponse_8 =
	     v_chanvadds_4$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_4$EMPTY_N ;

  // rule RL_ClientServerRequest_12
  assign WILL_FIRE_RL_ClientServerRequest_12 =
	     v_chanvadds_6$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_6$FULL_N ;

  // rule RL_ClientServerResponse_12
  assign WILL_FIRE_RL_ClientServerResponse_12 =
	     v_chanvadds_6$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_6$EMPTY_N ;

  // rule RL_ClientServerRequest_16
  assign WILL_FIRE_RL_ClientServerRequest_16 =
	     v_chanvadds_8$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_8$FULL_N ;

  // rule RL_ClientServerResponse_16
  assign WILL_FIRE_RL_ClientServerResponse_16 =
	     v_chanvadds_8$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_8$EMPTY_N ;

  // rule RL_fsm_action_l266c22
  assign WILL_FIRE_RL_fsm_action_l266c22 =
	     f_reqs_8$FULL_N && !rg_mc_488_ULT_16___d1506 &&
	     (fsm_state_mkFSMstate == 4'd3 || fsm_state_mkFSMstate == 4'd5) &&
	     !WILL_FIRE_RL_ClientServerRequest_16 ;

  // rule RL_fsm_action_l267c22
  assign WILL_FIRE_RL_fsm_action_l267c22 =
	     f_rsps_8$EMPTY_N && fsm_state_mkFSMstate == 4'd6 &&
	     !WILL_FIRE_RL_ClientServerResponse_16 ;

  // rule RL_fsm_fsm_start
  assign WILL_FIRE_RL_fsm_fsm_start =
	     fsm_abort_whas__188_AND_fsm_abort_wget__189_19_ETC___d1575 &&
	     fsm_start_reg ;

  // rule RL_fsm_action_l221c10
  assign CAN_FIRE_RL_fsm_action_l221c10 =
	     f_reqs_0$FULL_N && f_reqs_2$FULL_N && f_reqs_4$FULL_N &&
	     f_reqs_6$FULL_N &&
	     fsm_start_wire$whas &&
	     (fsm_state_mkFSMstate == 4'd0 || fsm_state_mkFSMstate == 4'd7) ;
  assign WILL_FIRE_RL_fsm_action_l221c10 =
	     CAN_FIRE_RL_fsm_action_l221c10 &&
	     !WILL_FIRE_RL_ClientServerRequest_12 &&
	     !WILL_FIRE_RL_ClientServerRequest_8 &&
	     !WILL_FIRE_RL_ClientServerRequest_4 &&
	     !WILL_FIRE_RL_ClientServerRequest ;

  // rule RL_fsm_idle_l219c7
  assign WILL_FIRE_RL_fsm_idle_l219c7 =
	     !fsm_start_wire$whas && fsm_state_mkFSMstate == 4'd7 ;

  // inputs to muxes for submodule ports
  assign MUX_rg_partial_sum$write_1__SEL_1 =
	     CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 &&
	     rg_mc_488_ULT_16___d1506 &&
	     (fsm_state_mkFSMstate == 4'd3 || fsm_state_mkFSMstate == 4'd5) ;
  assign MUX_rg_partial_sum$write_1__SEL_2 =
	     v_chanvadds_0$RDY_start &&
	     v_chanvadds_1_RDY_start__235_AND_v_chanvadds_2_ETC___d1267 &&
	     fsm_state_mkFSMstate == 4'd1 &&
	     !WILL_FIRE_RL_ClientServerResponse_12 &&
	     !WILL_FIRE_RL_ClientServerResponse_8 &&
	     !WILL_FIRE_RL_ClientServerResponse_4 &&
	     !WILL_FIRE_RL_ClientServerResponse ;
  assign MUX_f_reqs_0$enq_1__VAL_1 =
	     { CASE_v_chanvadds_0mc_client_req_rsp_request_g_ETC__q17,
	       v_chanvadds_0$mc_client_req_rsp_request_get[145:0] } ;
  assign MUX_f_reqs_0$enq_1__VAL_2 =
	     { 9'd67, rg_param_block_addr, 96'h00000000AAAAAAAAAAAAAAAA } ;
  assign MUX_f_reqs_2$enq_1__VAL_1 =
	     { CASE_v_chanvadds_2mc_client_req_rsp_request_g_ETC__q18,
	       v_chanvadds_2$mc_client_req_rsp_request_get[145:0] } ;
  assign MUX_f_reqs_2$enq_1__VAL_2 =
	     { 9'd67, addr__h39529, 96'h00000000AAAAAAAAAAAAAAAA } ;
  assign MUX_f_reqs_4$enq_1__VAL_1 =
	     { CASE_v_chanvadds_4mc_client_req_rsp_request_g_ETC__q19,
	       v_chanvadds_4$mc_client_req_rsp_request_get[145:0] } ;
  assign MUX_f_reqs_4$enq_1__VAL_2 =
	     { 9'd67, addr__h39586, 96'h00000000AAAAAAAAAAAAAAAA } ;
  assign MUX_f_reqs_6$enq_1__VAL_1 =
	     { CASE_v_chanvadds_6mc_client_req_rsp_request_g_ETC__q20,
	       v_chanvadds_6$mc_client_req_rsp_request_get[145:0] } ;
  assign MUX_f_reqs_6$enq_1__VAL_2 =
	     { 9'd67, addr__h39631, 96'h00000000AAAAAAAAAAAAAAAA } ;
  assign MUX_f_reqs_8$enq_1__VAL_1 =
	     { CASE_v_chanvadds_8mc_client_req_rsp_request_g_ETC__q21,
	       v_chanvadds_8$mc_client_req_rsp_request_get[145:0] } ;
  assign MUX_f_reqs_8$enq_1__VAL_2 =
	     { 9'd131, addr__h48611, 32'd0, rg_partial_sum } ;
  assign MUX_rg_mc$write_1__VAL_1 = rg_mc + 5'd1 ;
  assign MUX_rg_partial_sum$write_1__VAL_1 = rg_partial_sum + v__h47723 ;

  // inlined wires
  assign fsm_start_wire$whas =
	     WILL_FIRE_RL_fsm_fsm_start ||
	     fsm_start_reg_1 && !fsm_state_fired ;
  assign fsm_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_idle_l219c7 ||
	     WILL_FIRE_RL_fsm_action_l267c22 ||
	     WILL_FIRE_RL_fsm_action_l266c22 ||
	     fsm_state_mkFSMstate == 4'd4 ||
	     MUX_rg_partial_sum$write_1__SEL_1 ||
	     fsm_state_mkFSMstate == 4'd2 ||
	     MUX_rg_partial_sum$write_1__SEL_2 ||
	     WILL_FIRE_RL_fsm_action_l221c10 ;

  // register fsm_start_reg
  assign fsm_start_reg$D_IN = !WILL_FIRE_RL_fsm_fsm_start ;
  assign fsm_start_reg$EN = WILL_FIRE_RL_fsm_fsm_start || EN_start ;

  // register fsm_start_reg_1
  assign fsm_start_reg_1$D_IN = fsm_start_wire$whas ;
  assign fsm_start_reg_1$EN = 1'd1 ;

  // register fsm_state_can_overlap
  assign fsm_state_can_overlap$D_IN =
	     fsm_state_set_pw$whas || fsm_state_can_overlap ;
  assign fsm_state_can_overlap$EN = 1'd1 ;

  // register fsm_state_fired
  assign fsm_state_fired$D_IN = fsm_state_set_pw$whas ;
  assign fsm_state_fired$EN = 1'd1 ;

  // register fsm_state_mkFSMstate
  always@(WILL_FIRE_RL_fsm_idle_l219c7 or
	  WILL_FIRE_RL_fsm_action_l221c10 or
	  MUX_rg_partial_sum$write_1__SEL_2 or
	  fsm_state_mkFSMstate or
	  MUX_rg_partial_sum$write_1__SEL_1 or
	  WILL_FIRE_RL_fsm_action_l266c22 or WILL_FIRE_RL_fsm_action_l267c22)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fsm_idle_l219c7: fsm_state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_fsm_action_l221c10: fsm_state_mkFSMstate$D_IN = 4'd1;
      MUX_rg_partial_sum$write_1__SEL_2: fsm_state_mkFSMstate$D_IN = 4'd2;
      fsm_state_mkFSMstate == 4'd2: fsm_state_mkFSMstate$D_IN = 4'd3;
      MUX_rg_partial_sum$write_1__SEL_1: fsm_state_mkFSMstate$D_IN = 4'd4;
      fsm_state_mkFSMstate == 4'd4: fsm_state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_fsm_action_l266c22: fsm_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_fsm_action_l267c22: fsm_state_mkFSMstate$D_IN = 4'd7;
      default: fsm_state_mkFSMstate$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign fsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_idle_l219c7 ||
	     WILL_FIRE_RL_fsm_action_l221c10 ||
	     MUX_rg_partial_sum$write_1__SEL_2 ||
	     fsm_state_mkFSMstate == 4'd2 ||
	     MUX_rg_partial_sum$write_1__SEL_1 ||
	     fsm_state_mkFSMstate == 4'd4 ||
	     WILL_FIRE_RL_fsm_action_l266c22 ||
	     WILL_FIRE_RL_fsm_action_l267c22 ;

  // register rg_fpga_id
  assign rg_fpga_id$D_IN = start_fpga_id ;
  assign rg_fpga_id$EN = EN_start ;

  // register rg_mc
  assign rg_mc$D_IN =
	     (fsm_state_mkFSMstate == 4'd4) ?
	       MUX_rg_mc$write_1__VAL_1 :
	       5'd0 ;
  assign rg_mc$EN =
	     fsm_state_mkFSMstate == 4'd4 || fsm_state_mkFSMstate == 4'd2 ;

  // register rg_param_block_addr
  assign rg_param_block_addr$D_IN =
	     start_param_block_addr[47:0] + { 43'd0, start_fpga_id, 3'd0 } ;
  assign rg_param_block_addr$EN = EN_start ;

  // register rg_partial_sum
  assign rg_partial_sum$D_IN =
	     MUX_rg_partial_sum$write_1__SEL_1 ?
	       MUX_rg_partial_sum$write_1__VAL_1 :
	       64'd0 ;
  assign rg_partial_sum$EN =
	     MUX_rg_partial_sum$write_1__SEL_1 ||
	     MUX_rg_partial_sum$write_1__SEL_2 ;

  // submodule f_flush_reqs_0
  assign f_flush_reqs_0$D_IN = v_chanvadds_0$mc_client_flush_request_get ;
  assign f_flush_reqs_0$ENQ =
	     v_chanvadds_0$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_0$FULL_N ;
  assign f_flush_reqs_0$DEQ = EN_mc_ifcs_0_flush_request_get ;
  assign f_flush_reqs_0$CLR = 1'b0 ;

  // submodule f_flush_reqs_1
  assign f_flush_reqs_1$D_IN = v_chanvadds_1$mc_client_flush_request_get ;
  assign f_flush_reqs_1$ENQ =
	     v_chanvadds_1$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_1$FULL_N ;
  assign f_flush_reqs_1$DEQ = EN_mc_ifcs_1_flush_request_get ;
  assign f_flush_reqs_1$CLR = 1'b0 ;

  // submodule f_flush_reqs_10
  assign f_flush_reqs_10$D_IN = v_chanvadds_10$mc_client_flush_request_get ;
  assign f_flush_reqs_10$ENQ =
	     v_chanvadds_10$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_10$FULL_N ;
  assign f_flush_reqs_10$DEQ = EN_mc_ifcs_10_flush_request_get ;
  assign f_flush_reqs_10$CLR = 1'b0 ;

  // submodule f_flush_reqs_11
  assign f_flush_reqs_11$D_IN = v_chanvadds_11$mc_client_flush_request_get ;
  assign f_flush_reqs_11$ENQ =
	     v_chanvadds_11$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_11$FULL_N ;
  assign f_flush_reqs_11$DEQ = EN_mc_ifcs_11_flush_request_get ;
  assign f_flush_reqs_11$CLR = 1'b0 ;

  // submodule f_flush_reqs_12
  assign f_flush_reqs_12$D_IN = v_chanvadds_12$mc_client_flush_request_get ;
  assign f_flush_reqs_12$ENQ =
	     v_chanvadds_12$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_12$FULL_N ;
  assign f_flush_reqs_12$DEQ = EN_mc_ifcs_12_flush_request_get ;
  assign f_flush_reqs_12$CLR = 1'b0 ;

  // submodule f_flush_reqs_13
  assign f_flush_reqs_13$D_IN = v_chanvadds_13$mc_client_flush_request_get ;
  assign f_flush_reqs_13$ENQ =
	     v_chanvadds_13$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_13$FULL_N ;
  assign f_flush_reqs_13$DEQ = EN_mc_ifcs_13_flush_request_get ;
  assign f_flush_reqs_13$CLR = 1'b0 ;

  // submodule f_flush_reqs_14
  assign f_flush_reqs_14$D_IN = v_chanvadds_14$mc_client_flush_request_get ;
  assign f_flush_reqs_14$ENQ =
	     v_chanvadds_14$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_14$FULL_N ;
  assign f_flush_reqs_14$DEQ = EN_mc_ifcs_14_flush_request_get ;
  assign f_flush_reqs_14$CLR = 1'b0 ;

  // submodule f_flush_reqs_15
  assign f_flush_reqs_15$D_IN = v_chanvadds_15$mc_client_flush_request_get ;
  assign f_flush_reqs_15$ENQ =
	     v_chanvadds_15$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_15$FULL_N ;
  assign f_flush_reqs_15$DEQ = EN_mc_ifcs_15_flush_request_get ;
  assign f_flush_reqs_15$CLR = 1'b0 ;

  // submodule f_flush_reqs_2
  assign f_flush_reqs_2$D_IN = v_chanvadds_2$mc_client_flush_request_get ;
  assign f_flush_reqs_2$ENQ =
	     v_chanvadds_2$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_2$FULL_N ;
  assign f_flush_reqs_2$DEQ = EN_mc_ifcs_2_flush_request_get ;
  assign f_flush_reqs_2$CLR = 1'b0 ;

  // submodule f_flush_reqs_3
  assign f_flush_reqs_3$D_IN = v_chanvadds_3$mc_client_flush_request_get ;
  assign f_flush_reqs_3$ENQ =
	     v_chanvadds_3$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_3$FULL_N ;
  assign f_flush_reqs_3$DEQ = EN_mc_ifcs_3_flush_request_get ;
  assign f_flush_reqs_3$CLR = 1'b0 ;

  // submodule f_flush_reqs_4
  assign f_flush_reqs_4$D_IN = v_chanvadds_4$mc_client_flush_request_get ;
  assign f_flush_reqs_4$ENQ =
	     v_chanvadds_4$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_4$FULL_N ;
  assign f_flush_reqs_4$DEQ = EN_mc_ifcs_4_flush_request_get ;
  assign f_flush_reqs_4$CLR = 1'b0 ;

  // submodule f_flush_reqs_5
  assign f_flush_reqs_5$D_IN = v_chanvadds_5$mc_client_flush_request_get ;
  assign f_flush_reqs_5$ENQ =
	     v_chanvadds_5$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_5$FULL_N ;
  assign f_flush_reqs_5$DEQ = EN_mc_ifcs_5_flush_request_get ;
  assign f_flush_reqs_5$CLR = 1'b0 ;

  // submodule f_flush_reqs_6
  assign f_flush_reqs_6$D_IN = v_chanvadds_6$mc_client_flush_request_get ;
  assign f_flush_reqs_6$ENQ =
	     v_chanvadds_6$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_6$FULL_N ;
  assign f_flush_reqs_6$DEQ = EN_mc_ifcs_6_flush_request_get ;
  assign f_flush_reqs_6$CLR = 1'b0 ;

  // submodule f_flush_reqs_7
  assign f_flush_reqs_7$D_IN = v_chanvadds_7$mc_client_flush_request_get ;
  assign f_flush_reqs_7$ENQ =
	     v_chanvadds_7$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_7$FULL_N ;
  assign f_flush_reqs_7$DEQ = EN_mc_ifcs_7_flush_request_get ;
  assign f_flush_reqs_7$CLR = 1'b0 ;

  // submodule f_flush_reqs_8
  assign f_flush_reqs_8$D_IN = v_chanvadds_8$mc_client_flush_request_get ;
  assign f_flush_reqs_8$ENQ =
	     v_chanvadds_8$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_8$FULL_N ;
  assign f_flush_reqs_8$DEQ = EN_mc_ifcs_8_flush_request_get ;
  assign f_flush_reqs_8$CLR = 1'b0 ;

  // submodule f_flush_reqs_9
  assign f_flush_reqs_9$D_IN = v_chanvadds_9$mc_client_flush_request_get ;
  assign f_flush_reqs_9$ENQ =
	     v_chanvadds_9$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_9$FULL_N ;
  assign f_flush_reqs_9$DEQ = EN_mc_ifcs_9_flush_request_get ;
  assign f_flush_reqs_9$CLR = 1'b0 ;

  // submodule f_flush_rsps_0
  assign f_flush_rsps_0$D_IN = mc_ifcs_0_flush_response_put ;
  assign f_flush_rsps_0$ENQ = EN_mc_ifcs_0_flush_response_put ;
  assign f_flush_rsps_0$DEQ =
	     v_chanvadds_0$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_0$EMPTY_N ;
  assign f_flush_rsps_0$CLR = 1'b0 ;

  // submodule f_flush_rsps_1
  assign f_flush_rsps_1$D_IN = mc_ifcs_1_flush_response_put ;
  assign f_flush_rsps_1$ENQ = EN_mc_ifcs_1_flush_response_put ;
  assign f_flush_rsps_1$DEQ =
	     v_chanvadds_1$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_1$EMPTY_N ;
  assign f_flush_rsps_1$CLR = 1'b0 ;

  // submodule f_flush_rsps_10
  assign f_flush_rsps_10$D_IN = mc_ifcs_10_flush_response_put ;
  assign f_flush_rsps_10$ENQ = EN_mc_ifcs_10_flush_response_put ;
  assign f_flush_rsps_10$DEQ =
	     v_chanvadds_10$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_10$EMPTY_N ;
  assign f_flush_rsps_10$CLR = 1'b0 ;

  // submodule f_flush_rsps_11
  assign f_flush_rsps_11$D_IN = mc_ifcs_11_flush_response_put ;
  assign f_flush_rsps_11$ENQ = EN_mc_ifcs_11_flush_response_put ;
  assign f_flush_rsps_11$DEQ =
	     v_chanvadds_11$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_11$EMPTY_N ;
  assign f_flush_rsps_11$CLR = 1'b0 ;

  // submodule f_flush_rsps_12
  assign f_flush_rsps_12$D_IN = mc_ifcs_12_flush_response_put ;
  assign f_flush_rsps_12$ENQ = EN_mc_ifcs_12_flush_response_put ;
  assign f_flush_rsps_12$DEQ =
	     v_chanvadds_12$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_12$EMPTY_N ;
  assign f_flush_rsps_12$CLR = 1'b0 ;

  // submodule f_flush_rsps_13
  assign f_flush_rsps_13$D_IN = mc_ifcs_13_flush_response_put ;
  assign f_flush_rsps_13$ENQ = EN_mc_ifcs_13_flush_response_put ;
  assign f_flush_rsps_13$DEQ =
	     v_chanvadds_13$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_13$EMPTY_N ;
  assign f_flush_rsps_13$CLR = 1'b0 ;

  // submodule f_flush_rsps_14
  assign f_flush_rsps_14$D_IN = mc_ifcs_14_flush_response_put ;
  assign f_flush_rsps_14$ENQ = EN_mc_ifcs_14_flush_response_put ;
  assign f_flush_rsps_14$DEQ =
	     v_chanvadds_14$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_14$EMPTY_N ;
  assign f_flush_rsps_14$CLR = 1'b0 ;

  // submodule f_flush_rsps_15
  assign f_flush_rsps_15$D_IN = mc_ifcs_15_flush_response_put ;
  assign f_flush_rsps_15$ENQ = EN_mc_ifcs_15_flush_response_put ;
  assign f_flush_rsps_15$DEQ =
	     v_chanvadds_15$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_15$EMPTY_N ;
  assign f_flush_rsps_15$CLR = 1'b0 ;

  // submodule f_flush_rsps_2
  assign f_flush_rsps_2$D_IN = mc_ifcs_2_flush_response_put ;
  assign f_flush_rsps_2$ENQ = EN_mc_ifcs_2_flush_response_put ;
  assign f_flush_rsps_2$DEQ =
	     v_chanvadds_2$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_2$EMPTY_N ;
  assign f_flush_rsps_2$CLR = 1'b0 ;

  // submodule f_flush_rsps_3
  assign f_flush_rsps_3$D_IN = mc_ifcs_3_flush_response_put ;
  assign f_flush_rsps_3$ENQ = EN_mc_ifcs_3_flush_response_put ;
  assign f_flush_rsps_3$DEQ =
	     v_chanvadds_3$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_3$EMPTY_N ;
  assign f_flush_rsps_3$CLR = 1'b0 ;

  // submodule f_flush_rsps_4
  assign f_flush_rsps_4$D_IN = mc_ifcs_4_flush_response_put ;
  assign f_flush_rsps_4$ENQ = EN_mc_ifcs_4_flush_response_put ;
  assign f_flush_rsps_4$DEQ =
	     v_chanvadds_4$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_4$EMPTY_N ;
  assign f_flush_rsps_4$CLR = 1'b0 ;

  // submodule f_flush_rsps_5
  assign f_flush_rsps_5$D_IN = mc_ifcs_5_flush_response_put ;
  assign f_flush_rsps_5$ENQ = EN_mc_ifcs_5_flush_response_put ;
  assign f_flush_rsps_5$DEQ =
	     v_chanvadds_5$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_5$EMPTY_N ;
  assign f_flush_rsps_5$CLR = 1'b0 ;

  // submodule f_flush_rsps_6
  assign f_flush_rsps_6$D_IN = mc_ifcs_6_flush_response_put ;
  assign f_flush_rsps_6$ENQ = EN_mc_ifcs_6_flush_response_put ;
  assign f_flush_rsps_6$DEQ =
	     v_chanvadds_6$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_6$EMPTY_N ;
  assign f_flush_rsps_6$CLR = 1'b0 ;

  // submodule f_flush_rsps_7
  assign f_flush_rsps_7$D_IN = mc_ifcs_7_flush_response_put ;
  assign f_flush_rsps_7$ENQ = EN_mc_ifcs_7_flush_response_put ;
  assign f_flush_rsps_7$DEQ =
	     v_chanvadds_7$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_7$EMPTY_N ;
  assign f_flush_rsps_7$CLR = 1'b0 ;

  // submodule f_flush_rsps_8
  assign f_flush_rsps_8$D_IN = mc_ifcs_8_flush_response_put ;
  assign f_flush_rsps_8$ENQ = EN_mc_ifcs_8_flush_response_put ;
  assign f_flush_rsps_8$DEQ =
	     v_chanvadds_8$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_8$EMPTY_N ;
  assign f_flush_rsps_8$CLR = 1'b0 ;

  // submodule f_flush_rsps_9
  assign f_flush_rsps_9$D_IN = mc_ifcs_9_flush_response_put ;
  assign f_flush_rsps_9$ENQ = EN_mc_ifcs_9_flush_response_put ;
  assign f_flush_rsps_9$DEQ =
	     v_chanvadds_9$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_9$EMPTY_N ;
  assign f_flush_rsps_9$CLR = 1'b0 ;

  // submodule f_reqs_0
  assign f_reqs_0$D_IN =
	     WILL_FIRE_RL_ClientServerRequest ?
	       MUX_f_reqs_0$enq_1__VAL_1 :
	       MUX_f_reqs_0$enq_1__VAL_2 ;
  assign f_reqs_0$ENQ =
	     WILL_FIRE_RL_ClientServerRequest ||
	     WILL_FIRE_RL_fsm_action_l221c10 ;
  assign f_reqs_0$DEQ = EN_mc_ifcs_0_req_rsp_request_get ;
  assign f_reqs_0$CLR = 1'b0 ;

  // submodule f_reqs_1
  assign f_reqs_1$D_IN =
	     { CASE_v_chanvadds_1mc_client_req_rsp_request_g_ETC__q23,
	       v_chanvadds_1$mc_client_req_rsp_request_get[145:0] } ;
  assign f_reqs_1$ENQ =
	     v_chanvadds_1$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_1$FULL_N ;
  assign f_reqs_1$DEQ = EN_mc_ifcs_1_req_rsp_request_get ;
  assign f_reqs_1$CLR = 1'b0 ;

  // submodule f_reqs_10
  assign f_reqs_10$D_IN =
	     { CASE_v_chanvadds_10mc_client_req_rsp_request__ETC__q22,
	       v_chanvadds_10$mc_client_req_rsp_request_get[145:0] } ;
  assign f_reqs_10$ENQ =
	     v_chanvadds_10$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_10$FULL_N ;
  assign f_reqs_10$DEQ = EN_mc_ifcs_10_req_rsp_request_get ;
  assign f_reqs_10$CLR = 1'b0 ;

  // submodule f_reqs_11
  assign f_reqs_11$D_IN =
	     { CASE_v_chanvadds_11mc_client_req_rsp_request__ETC__q24,
	       v_chanvadds_11$mc_client_req_rsp_request_get[145:0] } ;
  assign f_reqs_11$ENQ =
	     v_chanvadds_11$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_11$FULL_N ;
  assign f_reqs_11$DEQ = EN_mc_ifcs_11_req_rsp_request_get ;
  assign f_reqs_11$CLR = 1'b0 ;

  // submodule f_reqs_12
  assign f_reqs_12$D_IN =
	     { CASE_v_chanvadds_12mc_client_req_rsp_request__ETC__q26,
	       v_chanvadds_12$mc_client_req_rsp_request_get[145:0] } ;
  assign f_reqs_12$ENQ =
	     v_chanvadds_12$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_12$FULL_N ;
  assign f_reqs_12$DEQ = EN_mc_ifcs_12_req_rsp_request_get ;
  assign f_reqs_12$CLR = 1'b0 ;

  // submodule f_reqs_13
  assign f_reqs_13$D_IN =
	     { CASE_v_chanvadds_13mc_client_req_rsp_request__ETC__q25,
	       v_chanvadds_13$mc_client_req_rsp_request_get[145:0] } ;
  assign f_reqs_13$ENQ =
	     v_chanvadds_13$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_13$FULL_N ;
  assign f_reqs_13$DEQ = EN_mc_ifcs_13_req_rsp_request_get ;
  assign f_reqs_13$CLR = 1'b0 ;

  // submodule f_reqs_14
  assign f_reqs_14$D_IN =
	     { CASE_v_chanvadds_14mc_client_req_rsp_request__ETC__q27,
	       v_chanvadds_14$mc_client_req_rsp_request_get[145:0] } ;
  assign f_reqs_14$ENQ =
	     v_chanvadds_14$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_14$FULL_N ;
  assign f_reqs_14$DEQ = EN_mc_ifcs_14_req_rsp_request_get ;
  assign f_reqs_14$CLR = 1'b0 ;

  // submodule f_reqs_15
  assign f_reqs_15$D_IN =
	     { CASE_v_chanvadds_15mc_client_req_rsp_request__ETC__q28,
	       v_chanvadds_15$mc_client_req_rsp_request_get[145:0] } ;
  assign f_reqs_15$ENQ =
	     v_chanvadds_15$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_15$FULL_N ;
  assign f_reqs_15$DEQ = EN_mc_ifcs_15_req_rsp_request_get ;
  assign f_reqs_15$CLR = 1'b0 ;

  // submodule f_reqs_2
  assign f_reqs_2$D_IN =
	     WILL_FIRE_RL_ClientServerRequest_4 ?
	       MUX_f_reqs_2$enq_1__VAL_1 :
	       MUX_f_reqs_2$enq_1__VAL_2 ;
  assign f_reqs_2$ENQ =
	     WILL_FIRE_RL_ClientServerRequest_4 ||
	     WILL_FIRE_RL_fsm_action_l221c10 ;
  assign f_reqs_2$DEQ = EN_mc_ifcs_2_req_rsp_request_get ;
  assign f_reqs_2$CLR = 1'b0 ;

  // submodule f_reqs_3
  assign f_reqs_3$D_IN =
	     { CASE_v_chanvadds_3mc_client_req_rsp_request_g_ETC__q29,
	       v_chanvadds_3$mc_client_req_rsp_request_get[145:0] } ;
  assign f_reqs_3$ENQ =
	     v_chanvadds_3$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_3$FULL_N ;
  assign f_reqs_3$DEQ = EN_mc_ifcs_3_req_rsp_request_get ;
  assign f_reqs_3$CLR = 1'b0 ;

  // submodule f_reqs_4
  assign f_reqs_4$D_IN =
	     WILL_FIRE_RL_ClientServerRequest_8 ?
	       MUX_f_reqs_4$enq_1__VAL_1 :
	       MUX_f_reqs_4$enq_1__VAL_2 ;
  assign f_reqs_4$ENQ =
	     WILL_FIRE_RL_ClientServerRequest_8 ||
	     WILL_FIRE_RL_fsm_action_l221c10 ;
  assign f_reqs_4$DEQ = EN_mc_ifcs_4_req_rsp_request_get ;
  assign f_reqs_4$CLR = 1'b0 ;

  // submodule f_reqs_5
  assign f_reqs_5$D_IN =
	     { CASE_v_chanvadds_5mc_client_req_rsp_request_g_ETC__q30,
	       v_chanvadds_5$mc_client_req_rsp_request_get[145:0] } ;
  assign f_reqs_5$ENQ =
	     v_chanvadds_5$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_5$FULL_N ;
  assign f_reqs_5$DEQ = EN_mc_ifcs_5_req_rsp_request_get ;
  assign f_reqs_5$CLR = 1'b0 ;

  // submodule f_reqs_6
  assign f_reqs_6$D_IN =
	     WILL_FIRE_RL_ClientServerRequest_12 ?
	       MUX_f_reqs_6$enq_1__VAL_1 :
	       MUX_f_reqs_6$enq_1__VAL_2 ;
  assign f_reqs_6$ENQ =
	     WILL_FIRE_RL_ClientServerRequest_12 ||
	     WILL_FIRE_RL_fsm_action_l221c10 ;
  assign f_reqs_6$DEQ = EN_mc_ifcs_6_req_rsp_request_get ;
  assign f_reqs_6$CLR = 1'b0 ;

  // submodule f_reqs_7
  assign f_reqs_7$D_IN =
	     { CASE_v_chanvadds_7mc_client_req_rsp_request_g_ETC__q31,
	       v_chanvadds_7$mc_client_req_rsp_request_get[145:0] } ;
  assign f_reqs_7$ENQ =
	     v_chanvadds_7$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_7$FULL_N ;
  assign f_reqs_7$DEQ = EN_mc_ifcs_7_req_rsp_request_get ;
  assign f_reqs_7$CLR = 1'b0 ;

  // submodule f_reqs_8
  assign f_reqs_8$D_IN =
	     WILL_FIRE_RL_ClientServerRequest_16 ?
	       MUX_f_reqs_8$enq_1__VAL_1 :
	       MUX_f_reqs_8$enq_1__VAL_2 ;
  assign f_reqs_8$ENQ =
	     WILL_FIRE_RL_ClientServerRequest_16 ||
	     WILL_FIRE_RL_fsm_action_l266c22 ;
  assign f_reqs_8$DEQ = EN_mc_ifcs_8_req_rsp_request_get ;
  assign f_reqs_8$CLR = 1'b0 ;

  // submodule f_reqs_9
  assign f_reqs_9$D_IN =
	     { CASE_v_chanvadds_9mc_client_req_rsp_request_g_ETC__q32,
	       v_chanvadds_9$mc_client_req_rsp_request_get[145:0] } ;
  assign f_reqs_9$ENQ =
	     v_chanvadds_9$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_9$FULL_N ;
  assign f_reqs_9$DEQ = EN_mc_ifcs_9_req_rsp_request_get ;
  assign f_reqs_9$CLR = 1'b0 ;

  // submodule f_rsps_0
  assign f_rsps_0$D_IN =
	     { CASE_mc_ifcs_0_req_rsp_response_put_BITS_101_T_ETC__q33,
	       mc_ifcs_0_req_rsp_response_put[98:0] } ;
  assign f_rsps_0$ENQ = EN_mc_ifcs_0_req_rsp_response_put ;
  assign f_rsps_0$DEQ =
	     WILL_FIRE_RL_ClientServerResponse ||
	     MUX_rg_partial_sum$write_1__SEL_2 ;
  assign f_rsps_0$CLR = 1'b0 ;

  // submodule f_rsps_1
  assign f_rsps_1$D_IN =
	     { CASE_mc_ifcs_1_req_rsp_response_put_BITS_101_T_ETC__q35,
	       mc_ifcs_1_req_rsp_response_put[98:0] } ;
  assign f_rsps_1$ENQ = EN_mc_ifcs_1_req_rsp_response_put ;
  assign f_rsps_1$DEQ =
	     v_chanvadds_1$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_1$EMPTY_N ;
  assign f_rsps_1$CLR = 1'b0 ;

  // submodule f_rsps_10
  assign f_rsps_10$D_IN =
	     { CASE_mc_ifcs_10_req_rsp_response_put_BITS_101__ETC__q34,
	       mc_ifcs_10_req_rsp_response_put[98:0] } ;
  assign f_rsps_10$ENQ = EN_mc_ifcs_10_req_rsp_response_put ;
  assign f_rsps_10$DEQ =
	     v_chanvadds_10$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_10$EMPTY_N ;
  assign f_rsps_10$CLR = 1'b0 ;

  // submodule f_rsps_11
  assign f_rsps_11$D_IN =
	     { CASE_mc_ifcs_11_req_rsp_response_put_BITS_101__ETC__q36,
	       mc_ifcs_11_req_rsp_response_put[98:0] } ;
  assign f_rsps_11$ENQ = EN_mc_ifcs_11_req_rsp_response_put ;
  assign f_rsps_11$DEQ =
	     v_chanvadds_11$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_11$EMPTY_N ;
  assign f_rsps_11$CLR = 1'b0 ;

  // submodule f_rsps_12
  assign f_rsps_12$D_IN =
	     { CASE_mc_ifcs_12_req_rsp_response_put_BITS_101__ETC__q37,
	       mc_ifcs_12_req_rsp_response_put[98:0] } ;
  assign f_rsps_12$ENQ = EN_mc_ifcs_12_req_rsp_response_put ;
  assign f_rsps_12$DEQ =
	     v_chanvadds_12$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_12$EMPTY_N ;
  assign f_rsps_12$CLR = 1'b0 ;

  // submodule f_rsps_13
  assign f_rsps_13$D_IN =
	     { CASE_mc_ifcs_13_req_rsp_response_put_BITS_101__ETC__q38,
	       mc_ifcs_13_req_rsp_response_put[98:0] } ;
  assign f_rsps_13$ENQ = EN_mc_ifcs_13_req_rsp_response_put ;
  assign f_rsps_13$DEQ =
	     v_chanvadds_13$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_13$EMPTY_N ;
  assign f_rsps_13$CLR = 1'b0 ;

  // submodule f_rsps_14
  assign f_rsps_14$D_IN =
	     { CASE_mc_ifcs_14_req_rsp_response_put_BITS_101__ETC__q39,
	       mc_ifcs_14_req_rsp_response_put[98:0] } ;
  assign f_rsps_14$ENQ = EN_mc_ifcs_14_req_rsp_response_put ;
  assign f_rsps_14$DEQ =
	     v_chanvadds_14$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_14$EMPTY_N ;
  assign f_rsps_14$CLR = 1'b0 ;

  // submodule f_rsps_15
  assign f_rsps_15$D_IN =
	     { CASE_mc_ifcs_15_req_rsp_response_put_BITS_101__ETC__q41,
	       mc_ifcs_15_req_rsp_response_put[98:0] } ;
  assign f_rsps_15$ENQ = EN_mc_ifcs_15_req_rsp_response_put ;
  assign f_rsps_15$DEQ =
	     v_chanvadds_15$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_15$EMPTY_N ;
  assign f_rsps_15$CLR = 1'b0 ;

  // submodule f_rsps_2
  assign f_rsps_2$D_IN =
	     { CASE_mc_ifcs_2_req_rsp_response_put_BITS_101_T_ETC__q40,
	       mc_ifcs_2_req_rsp_response_put[98:0] } ;
  assign f_rsps_2$ENQ = EN_mc_ifcs_2_req_rsp_response_put ;
  assign f_rsps_2$DEQ =
	     WILL_FIRE_RL_ClientServerResponse_4 ||
	     MUX_rg_partial_sum$write_1__SEL_2 ;
  assign f_rsps_2$CLR = 1'b0 ;

  // submodule f_rsps_3
  assign f_rsps_3$D_IN =
	     { CASE_mc_ifcs_3_req_rsp_response_put_BITS_101_T_ETC__q42,
	       mc_ifcs_3_req_rsp_response_put[98:0] } ;
  assign f_rsps_3$ENQ = EN_mc_ifcs_3_req_rsp_response_put ;
  assign f_rsps_3$DEQ =
	     v_chanvadds_3$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_3$EMPTY_N ;
  assign f_rsps_3$CLR = 1'b0 ;

  // submodule f_rsps_4
  assign f_rsps_4$D_IN =
	     { CASE_mc_ifcs_4_req_rsp_response_put_BITS_101_T_ETC__q43,
	       mc_ifcs_4_req_rsp_response_put[98:0] } ;
  assign f_rsps_4$ENQ = EN_mc_ifcs_4_req_rsp_response_put ;
  assign f_rsps_4$DEQ =
	     WILL_FIRE_RL_ClientServerResponse_8 ||
	     MUX_rg_partial_sum$write_1__SEL_2 ;
  assign f_rsps_4$CLR = 1'b0 ;

  // submodule f_rsps_5
  assign f_rsps_5$D_IN =
	     { CASE_mc_ifcs_5_req_rsp_response_put_BITS_101_T_ETC__q44,
	       mc_ifcs_5_req_rsp_response_put[98:0] } ;
  assign f_rsps_5$ENQ = EN_mc_ifcs_5_req_rsp_response_put ;
  assign f_rsps_5$DEQ =
	     v_chanvadds_5$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_5$EMPTY_N ;
  assign f_rsps_5$CLR = 1'b0 ;

  // submodule f_rsps_6
  assign f_rsps_6$D_IN =
	     { CASE_mc_ifcs_6_req_rsp_response_put_BITS_101_T_ETC__q45,
	       mc_ifcs_6_req_rsp_response_put[98:0] } ;
  assign f_rsps_6$ENQ = EN_mc_ifcs_6_req_rsp_response_put ;
  assign f_rsps_6$DEQ =
	     WILL_FIRE_RL_ClientServerResponse_12 ||
	     MUX_rg_partial_sum$write_1__SEL_2 ;
  assign f_rsps_6$CLR = 1'b0 ;

  // submodule f_rsps_7
  assign f_rsps_7$D_IN =
	     { CASE_mc_ifcs_7_req_rsp_response_put_BITS_101_T_ETC__q46,
	       mc_ifcs_7_req_rsp_response_put[98:0] } ;
  assign f_rsps_7$ENQ = EN_mc_ifcs_7_req_rsp_response_put ;
  assign f_rsps_7$DEQ =
	     v_chanvadds_7$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_7$EMPTY_N ;
  assign f_rsps_7$CLR = 1'b0 ;

  // submodule f_rsps_8
  assign f_rsps_8$D_IN =
	     { CASE_mc_ifcs_8_req_rsp_response_put_BITS_101_T_ETC__q48,
	       mc_ifcs_8_req_rsp_response_put[98:0] } ;
  assign f_rsps_8$ENQ = EN_mc_ifcs_8_req_rsp_response_put ;
  assign f_rsps_8$DEQ =
	     WILL_FIRE_RL_ClientServerResponse_16 ||
	     WILL_FIRE_RL_fsm_action_l267c22 ;
  assign f_rsps_8$CLR = 1'b0 ;

  // submodule f_rsps_9
  assign f_rsps_9$D_IN =
	     { CASE_mc_ifcs_9_req_rsp_response_put_BITS_101_T_ETC__q47,
	       mc_ifcs_9_req_rsp_response_put[98:0] } ;
  assign f_rsps_9$ENQ = EN_mc_ifcs_9_req_rsp_response_put ;
  assign f_rsps_9$DEQ =
	     v_chanvadds_9$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_9$EMPTY_N ;
  assign f_rsps_9$CLR = 1'b0 ;

  // submodule v_chanvadds_0
  assign v_chanvadds_0$mc_client_flush_response_put = f_flush_rsps_0$D_OUT ;
  assign v_chanvadds_0$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_0D_OUT_BITS_101_TO_99_2_f_rsps_0_ETC__q49,
	       f_rsps_0$D_OUT[98:0] } ;
  assign v_chanvadds_0$start_aeid = rg_fpga_id ;
  assign v_chanvadds_0$start_chan = 3'd0 ;
  assign v_chanvadds_0$start_evenNotOdd = 1'd1 ;
  assign v_chanvadds_0$start_rd_base_1 = rd_base_1__h41007 ;
  assign v_chanvadds_0$start_rd_base_2 = rd_base_2__h41009 ;
  assign v_chanvadds_0$start_rd_limit_1 = f_rsps_2$D_OUT[47:0] + y__h41138 ;
  assign v_chanvadds_0$start_rd_limit_2 = f_rsps_4$D_OUT[47:0] + y__h41138 ;
  assign v_chanvadds_0$start_wr_base = wr_base__h41011 ;
  assign v_chanvadds_0$start_wr_limit = f_rsps_6$D_OUT[47:0] + y__h41138 ;
  assign v_chanvadds_0$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_0$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd0 ;
  assign v_chanvadds_0$EN_mc_client_req_rsp_request_get =
	     WILL_FIRE_RL_ClientServerRequest ;
  assign v_chanvadds_0$EN_mc_client_req_rsp_response_put =
	     WILL_FIRE_RL_ClientServerResponse ;
  assign v_chanvadds_0$EN_mc_client_flush_request_get =
	     v_chanvadds_0$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_0$FULL_N ;
  assign v_chanvadds_0$EN_mc_client_flush_response_put =
	     v_chanvadds_0$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_0$EMPTY_N ;

  // submodule v_chanvadds_1
  assign v_chanvadds_1$mc_client_flush_response_put = f_flush_rsps_1$D_OUT ;
  assign v_chanvadds_1$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_1D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q50,
	       f_rsps_1$D_OUT[98:0] } ;
  assign v_chanvadds_1$start_aeid = rg_fpga_id ;
  assign v_chanvadds_1$start_chan = 3'd0 ;
  assign v_chanvadds_1$start_evenNotOdd = 1'd0 ;
  assign v_chanvadds_1$start_rd_base_1 = 48'd8 + rd_base_1__h41007 ;
  assign v_chanvadds_1$start_rd_base_2 = 48'd8 + rd_base_2__h41009 ;
  assign v_chanvadds_1$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_1$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_1$start_wr_base = 48'd8 + wr_base__h41011 ;
  assign v_chanvadds_1$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_1$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_1$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd1 ;
  assign v_chanvadds_1$EN_mc_client_req_rsp_request_get =
	     v_chanvadds_1$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_1$FULL_N ;
  assign v_chanvadds_1$EN_mc_client_req_rsp_response_put =
	     v_chanvadds_1$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_1$EMPTY_N ;
  assign v_chanvadds_1$EN_mc_client_flush_request_get =
	     v_chanvadds_1$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_1$FULL_N ;
  assign v_chanvadds_1$EN_mc_client_flush_response_put =
	     v_chanvadds_1$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_1$EMPTY_N ;

  // submodule v_chanvadds_10
  assign v_chanvadds_10$mc_client_flush_response_put = f_flush_rsps_10$D_OUT ;
  assign v_chanvadds_10$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_10D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q51,
	       f_rsps_10$D_OUT[98:0] } ;
  assign v_chanvadds_10$start_aeid = rg_fpga_id ;
  assign v_chanvadds_10$start_chan = 3'd5 ;
  assign v_chanvadds_10$start_evenNotOdd = 1'd1 ;
  assign v_chanvadds_10$start_rd_base_1 = rd_base_1__h44887 ;
  assign v_chanvadds_10$start_rd_base_2 = rd_base_2__h44889 ;
  assign v_chanvadds_10$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_10$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_10$start_wr_base = wr_base__h44891 ;
  assign v_chanvadds_10$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_10$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_10$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd10 ;
  assign v_chanvadds_10$EN_mc_client_req_rsp_request_get =
	     v_chanvadds_10$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_10$FULL_N ;
  assign v_chanvadds_10$EN_mc_client_req_rsp_response_put =
	     v_chanvadds_10$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_10$EMPTY_N ;
  assign v_chanvadds_10$EN_mc_client_flush_request_get =
	     v_chanvadds_10$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_10$FULL_N ;
  assign v_chanvadds_10$EN_mc_client_flush_response_put =
	     v_chanvadds_10$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_10$EMPTY_N ;

  // submodule v_chanvadds_11
  assign v_chanvadds_11$mc_client_flush_response_put = f_flush_rsps_11$D_OUT ;
  assign v_chanvadds_11$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_11D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q52,
	       f_rsps_11$D_OUT[98:0] } ;
  assign v_chanvadds_11$start_aeid = rg_fpga_id ;
  assign v_chanvadds_11$start_chan = 3'd5 ;
  assign v_chanvadds_11$start_evenNotOdd = 1'd0 ;
  assign v_chanvadds_11$start_rd_base_1 = 48'd8 + rd_base_1__h44887 ;
  assign v_chanvadds_11$start_rd_base_2 = 48'd8 + rd_base_2__h44889 ;
  assign v_chanvadds_11$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_11$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_11$start_wr_base = 48'd8 + wr_base__h44891 ;
  assign v_chanvadds_11$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_11$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_11$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd11 ;
  assign v_chanvadds_11$EN_mc_client_req_rsp_request_get =
	     v_chanvadds_11$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_11$FULL_N ;
  assign v_chanvadds_11$EN_mc_client_req_rsp_response_put =
	     v_chanvadds_11$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_11$EMPTY_N ;
  assign v_chanvadds_11$EN_mc_client_flush_request_get =
	     v_chanvadds_11$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_11$FULL_N ;
  assign v_chanvadds_11$EN_mc_client_flush_response_put =
	     v_chanvadds_11$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_11$EMPTY_N ;

  // submodule v_chanvadds_12
  assign v_chanvadds_12$mc_client_flush_response_put = f_flush_rsps_12$D_OUT ;
  assign v_chanvadds_12$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_12D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q53,
	       f_rsps_12$D_OUT[98:0] } ;
  assign v_chanvadds_12$start_aeid = rg_fpga_id ;
  assign v_chanvadds_12$start_chan = 3'd6 ;
  assign v_chanvadds_12$start_evenNotOdd = 1'd1 ;
  assign v_chanvadds_12$start_rd_base_1 = rd_base_1__h45663 ;
  assign v_chanvadds_12$start_rd_base_2 = rd_base_2__h45665 ;
  assign v_chanvadds_12$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_12$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_12$start_wr_base = wr_base__h45667 ;
  assign v_chanvadds_12$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_12$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_12$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd12 ;
  assign v_chanvadds_12$EN_mc_client_req_rsp_request_get =
	     v_chanvadds_12$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_12$FULL_N ;
  assign v_chanvadds_12$EN_mc_client_req_rsp_response_put =
	     v_chanvadds_12$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_12$EMPTY_N ;
  assign v_chanvadds_12$EN_mc_client_flush_request_get =
	     v_chanvadds_12$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_12$FULL_N ;
  assign v_chanvadds_12$EN_mc_client_flush_response_put =
	     v_chanvadds_12$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_12$EMPTY_N ;

  // submodule v_chanvadds_13
  assign v_chanvadds_13$mc_client_flush_response_put = f_flush_rsps_13$D_OUT ;
  assign v_chanvadds_13$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_13D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q54,
	       f_rsps_13$D_OUT[98:0] } ;
  assign v_chanvadds_13$start_aeid = rg_fpga_id ;
  assign v_chanvadds_13$start_chan = 3'd6 ;
  assign v_chanvadds_13$start_evenNotOdd = 1'd0 ;
  assign v_chanvadds_13$start_rd_base_1 = 48'd8 + rd_base_1__h45663 ;
  assign v_chanvadds_13$start_rd_base_2 = 48'd8 + rd_base_2__h45665 ;
  assign v_chanvadds_13$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_13$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_13$start_wr_base = 48'd8 + wr_base__h45667 ;
  assign v_chanvadds_13$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_13$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_13$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd13 ;
  assign v_chanvadds_13$EN_mc_client_req_rsp_request_get =
	     v_chanvadds_13$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_13$FULL_N ;
  assign v_chanvadds_13$EN_mc_client_req_rsp_response_put =
	     v_chanvadds_13$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_13$EMPTY_N ;
  assign v_chanvadds_13$EN_mc_client_flush_request_get =
	     v_chanvadds_13$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_13$FULL_N ;
  assign v_chanvadds_13$EN_mc_client_flush_response_put =
	     v_chanvadds_13$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_13$EMPTY_N ;

  // submodule v_chanvadds_14
  assign v_chanvadds_14$mc_client_flush_response_put = f_flush_rsps_14$D_OUT ;
  assign v_chanvadds_14$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_14D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q55,
	       f_rsps_14$D_OUT[98:0] } ;
  assign v_chanvadds_14$start_aeid = rg_fpga_id ;
  assign v_chanvadds_14$start_chan = 3'd7 ;
  assign v_chanvadds_14$start_evenNotOdd = 1'd1 ;
  assign v_chanvadds_14$start_rd_base_1 = rd_base_1__h46439 ;
  assign v_chanvadds_14$start_rd_base_2 = rd_base_2__h46441 ;
  assign v_chanvadds_14$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_14$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_14$start_wr_base = wr_base__h46443 ;
  assign v_chanvadds_14$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_14$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_14$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd14 ;
  assign v_chanvadds_14$EN_mc_client_req_rsp_request_get =
	     v_chanvadds_14$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_14$FULL_N ;
  assign v_chanvadds_14$EN_mc_client_req_rsp_response_put =
	     v_chanvadds_14$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_14$EMPTY_N ;
  assign v_chanvadds_14$EN_mc_client_flush_request_get =
	     v_chanvadds_14$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_14$FULL_N ;
  assign v_chanvadds_14$EN_mc_client_flush_response_put =
	     v_chanvadds_14$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_14$EMPTY_N ;

  // submodule v_chanvadds_15
  assign v_chanvadds_15$mc_client_flush_response_put = f_flush_rsps_15$D_OUT ;
  assign v_chanvadds_15$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_15D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q56,
	       f_rsps_15$D_OUT[98:0] } ;
  assign v_chanvadds_15$start_aeid = rg_fpga_id ;
  assign v_chanvadds_15$start_chan = 3'd7 ;
  assign v_chanvadds_15$start_evenNotOdd = 1'd0 ;
  assign v_chanvadds_15$start_rd_base_1 = 48'd8 + rd_base_1__h46439 ;
  assign v_chanvadds_15$start_rd_base_2 = 48'd8 + rd_base_2__h46441 ;
  assign v_chanvadds_15$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_15$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_15$start_wr_base = 48'd8 + wr_base__h46443 ;
  assign v_chanvadds_15$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_15$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_15$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd15 ;
  assign v_chanvadds_15$EN_mc_client_req_rsp_request_get =
	     v_chanvadds_15$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_15$FULL_N ;
  assign v_chanvadds_15$EN_mc_client_req_rsp_response_put =
	     v_chanvadds_15$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_15$EMPTY_N ;
  assign v_chanvadds_15$EN_mc_client_flush_request_get =
	     v_chanvadds_15$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_15$FULL_N ;
  assign v_chanvadds_15$EN_mc_client_flush_response_put =
	     v_chanvadds_15$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_15$EMPTY_N ;

  // submodule v_chanvadds_2
  assign v_chanvadds_2$mc_client_flush_response_put = f_flush_rsps_2$D_OUT ;
  assign v_chanvadds_2$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_2D_OUT_BITS_101_TO_99_2_f_rsps_2_ETC__q57,
	       f_rsps_2$D_OUT[98:0] } ;
  assign v_chanvadds_2$start_aeid = rg_fpga_id ;
  assign v_chanvadds_2$start_chan = 3'd1 ;
  assign v_chanvadds_2$start_evenNotOdd = 1'd1 ;
  assign v_chanvadds_2$start_rd_base_1 = rd_base_1__h41783 ;
  assign v_chanvadds_2$start_rd_base_2 = rd_base_2__h41785 ;
  assign v_chanvadds_2$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_2$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_2$start_wr_base = wr_base__h41787 ;
  assign v_chanvadds_2$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_2$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_2$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd2 ;
  assign v_chanvadds_2$EN_mc_client_req_rsp_request_get =
	     WILL_FIRE_RL_ClientServerRequest_4 ;
  assign v_chanvadds_2$EN_mc_client_req_rsp_response_put =
	     WILL_FIRE_RL_ClientServerResponse_4 ;
  assign v_chanvadds_2$EN_mc_client_flush_request_get =
	     v_chanvadds_2$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_2$FULL_N ;
  assign v_chanvadds_2$EN_mc_client_flush_response_put =
	     v_chanvadds_2$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_2$EMPTY_N ;

  // submodule v_chanvadds_3
  assign v_chanvadds_3$mc_client_flush_response_put = f_flush_rsps_3$D_OUT ;
  assign v_chanvadds_3$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_3D_OUT_BITS_101_TO_99_2_f_rsps_3_ETC__q58,
	       f_rsps_3$D_OUT[98:0] } ;
  assign v_chanvadds_3$start_aeid = rg_fpga_id ;
  assign v_chanvadds_3$start_chan = 3'd1 ;
  assign v_chanvadds_3$start_evenNotOdd = 1'd0 ;
  assign v_chanvadds_3$start_rd_base_1 = 48'd8 + rd_base_1__h41783 ;
  assign v_chanvadds_3$start_rd_base_2 = 48'd8 + rd_base_2__h41785 ;
  assign v_chanvadds_3$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_3$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_3$start_wr_base = 48'd8 + wr_base__h41787 ;
  assign v_chanvadds_3$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_3$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_3$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd3 ;
  assign v_chanvadds_3$EN_mc_client_req_rsp_request_get =
	     v_chanvadds_3$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_3$FULL_N ;
  assign v_chanvadds_3$EN_mc_client_req_rsp_response_put =
	     v_chanvadds_3$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_3$EMPTY_N ;
  assign v_chanvadds_3$EN_mc_client_flush_request_get =
	     v_chanvadds_3$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_3$FULL_N ;
  assign v_chanvadds_3$EN_mc_client_flush_response_put =
	     v_chanvadds_3$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_3$EMPTY_N ;

  // submodule v_chanvadds_4
  assign v_chanvadds_4$mc_client_flush_response_put = f_flush_rsps_4$D_OUT ;
  assign v_chanvadds_4$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_4D_OUT_BITS_101_TO_99_2_f_rsps_4_ETC__q59,
	       f_rsps_4$D_OUT[98:0] } ;
  assign v_chanvadds_4$start_aeid = rg_fpga_id ;
  assign v_chanvadds_4$start_chan = 3'd2 ;
  assign v_chanvadds_4$start_evenNotOdd = 1'd1 ;
  assign v_chanvadds_4$start_rd_base_1 = rd_base_1__h42559 ;
  assign v_chanvadds_4$start_rd_base_2 = rd_base_2__h42561 ;
  assign v_chanvadds_4$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_4$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_4$start_wr_base = wr_base__h42563 ;
  assign v_chanvadds_4$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_4$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_4$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd4 ;
  assign v_chanvadds_4$EN_mc_client_req_rsp_request_get =
	     WILL_FIRE_RL_ClientServerRequest_8 ;
  assign v_chanvadds_4$EN_mc_client_req_rsp_response_put =
	     WILL_FIRE_RL_ClientServerResponse_8 ;
  assign v_chanvadds_4$EN_mc_client_flush_request_get =
	     v_chanvadds_4$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_4$FULL_N ;
  assign v_chanvadds_4$EN_mc_client_flush_response_put =
	     v_chanvadds_4$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_4$EMPTY_N ;

  // submodule v_chanvadds_5
  assign v_chanvadds_5$mc_client_flush_response_put = f_flush_rsps_5$D_OUT ;
  assign v_chanvadds_5$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_5D_OUT_BITS_101_TO_99_2_f_rsps_5_ETC__q60,
	       f_rsps_5$D_OUT[98:0] } ;
  assign v_chanvadds_5$start_aeid = rg_fpga_id ;
  assign v_chanvadds_5$start_chan = 3'd2 ;
  assign v_chanvadds_5$start_evenNotOdd = 1'd0 ;
  assign v_chanvadds_5$start_rd_base_1 = 48'd8 + rd_base_1__h42559 ;
  assign v_chanvadds_5$start_rd_base_2 = 48'd8 + rd_base_2__h42561 ;
  assign v_chanvadds_5$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_5$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_5$start_wr_base = 48'd8 + wr_base__h42563 ;
  assign v_chanvadds_5$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_5$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_5$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd5 ;
  assign v_chanvadds_5$EN_mc_client_req_rsp_request_get =
	     v_chanvadds_5$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_5$FULL_N ;
  assign v_chanvadds_5$EN_mc_client_req_rsp_response_put =
	     v_chanvadds_5$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_5$EMPTY_N ;
  assign v_chanvadds_5$EN_mc_client_flush_request_get =
	     v_chanvadds_5$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_5$FULL_N ;
  assign v_chanvadds_5$EN_mc_client_flush_response_put =
	     v_chanvadds_5$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_5$EMPTY_N ;

  // submodule v_chanvadds_6
  assign v_chanvadds_6$mc_client_flush_response_put = f_flush_rsps_6$D_OUT ;
  assign v_chanvadds_6$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_6D_OUT_BITS_101_TO_99_2_f_rsps_6_ETC__q61,
	       f_rsps_6$D_OUT[98:0] } ;
  assign v_chanvadds_6$start_aeid = rg_fpga_id ;
  assign v_chanvadds_6$start_chan = 3'd3 ;
  assign v_chanvadds_6$start_evenNotOdd = 1'd1 ;
  assign v_chanvadds_6$start_rd_base_1 = rd_base_1__h43335 ;
  assign v_chanvadds_6$start_rd_base_2 = rd_base_2__h43337 ;
  assign v_chanvadds_6$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_6$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_6$start_wr_base = wr_base__h43339 ;
  assign v_chanvadds_6$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_6$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_6$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd6 ;
  assign v_chanvadds_6$EN_mc_client_req_rsp_request_get =
	     WILL_FIRE_RL_ClientServerRequest_12 ;
  assign v_chanvadds_6$EN_mc_client_req_rsp_response_put =
	     WILL_FIRE_RL_ClientServerResponse_12 ;
  assign v_chanvadds_6$EN_mc_client_flush_request_get =
	     v_chanvadds_6$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_6$FULL_N ;
  assign v_chanvadds_6$EN_mc_client_flush_response_put =
	     v_chanvadds_6$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_6$EMPTY_N ;

  // submodule v_chanvadds_7
  assign v_chanvadds_7$mc_client_flush_response_put = f_flush_rsps_7$D_OUT ;
  assign v_chanvadds_7$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_7D_OUT_BITS_101_TO_99_2_f_rsps_7_ETC__q62,
	       f_rsps_7$D_OUT[98:0] } ;
  assign v_chanvadds_7$start_aeid = rg_fpga_id ;
  assign v_chanvadds_7$start_chan = 3'd3 ;
  assign v_chanvadds_7$start_evenNotOdd = 1'd0 ;
  assign v_chanvadds_7$start_rd_base_1 = 48'd8 + rd_base_1__h43335 ;
  assign v_chanvadds_7$start_rd_base_2 = 48'd8 + rd_base_2__h43337 ;
  assign v_chanvadds_7$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_7$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_7$start_wr_base = 48'd8 + wr_base__h43339 ;
  assign v_chanvadds_7$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_7$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_7$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd7 ;
  assign v_chanvadds_7$EN_mc_client_req_rsp_request_get =
	     v_chanvadds_7$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_7$FULL_N ;
  assign v_chanvadds_7$EN_mc_client_req_rsp_response_put =
	     v_chanvadds_7$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_7$EMPTY_N ;
  assign v_chanvadds_7$EN_mc_client_flush_request_get =
	     v_chanvadds_7$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_7$FULL_N ;
  assign v_chanvadds_7$EN_mc_client_flush_response_put =
	     v_chanvadds_7$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_7$EMPTY_N ;

  // submodule v_chanvadds_8
  assign v_chanvadds_8$mc_client_flush_response_put = f_flush_rsps_8$D_OUT ;
  assign v_chanvadds_8$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_8D_OUT_BITS_101_TO_99_2_f_rsps_8_ETC__q63,
	       f_rsps_8$D_OUT[98:0] } ;
  assign v_chanvadds_8$start_aeid = rg_fpga_id ;
  assign v_chanvadds_8$start_chan = 3'd4 ;
  assign v_chanvadds_8$start_evenNotOdd = 1'd1 ;
  assign v_chanvadds_8$start_rd_base_1 = rd_base_1__h44111 ;
  assign v_chanvadds_8$start_rd_base_2 = rd_base_2__h44113 ;
  assign v_chanvadds_8$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_8$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_8$start_wr_base = wr_base__h44115 ;
  assign v_chanvadds_8$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_8$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_8$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd8 ;
  assign v_chanvadds_8$EN_mc_client_req_rsp_request_get =
	     WILL_FIRE_RL_ClientServerRequest_16 ;
  assign v_chanvadds_8$EN_mc_client_req_rsp_response_put =
	     WILL_FIRE_RL_ClientServerResponse_16 ;
  assign v_chanvadds_8$EN_mc_client_flush_request_get =
	     v_chanvadds_8$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_8$FULL_N ;
  assign v_chanvadds_8$EN_mc_client_flush_response_put =
	     v_chanvadds_8$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_8$EMPTY_N ;

  // submodule v_chanvadds_9
  assign v_chanvadds_9$mc_client_flush_response_put = f_flush_rsps_9$D_OUT ;
  assign v_chanvadds_9$mc_client_req_rsp_response_put =
	     { CASE_f_rsps_9D_OUT_BITS_101_TO_99_2_f_rsps_9_ETC__q64,
	       f_rsps_9$D_OUT[98:0] } ;
  assign v_chanvadds_9$start_aeid = rg_fpga_id ;
  assign v_chanvadds_9$start_chan = 3'd4 ;
  assign v_chanvadds_9$start_evenNotOdd = 1'd0 ;
  assign v_chanvadds_9$start_rd_base_1 = 48'd8 + rd_base_1__h44111 ;
  assign v_chanvadds_9$start_rd_base_2 = 48'd8 + rd_base_2__h44113 ;
  assign v_chanvadds_9$start_rd_limit_1 = v_chanvadds_0$start_rd_limit_1 ;
  assign v_chanvadds_9$start_rd_limit_2 = v_chanvadds_0$start_rd_limit_2 ;
  assign v_chanvadds_9$start_wr_base = 48'd8 + wr_base__h44115 ;
  assign v_chanvadds_9$start_wr_limit = v_chanvadds_0$start_wr_limit ;
  assign v_chanvadds_9$EN_start = MUX_rg_partial_sum$write_1__SEL_2 ;
  assign v_chanvadds_9$EN_result =
	     MUX_rg_partial_sum$write_1__SEL_1 && rg_mc == 5'd9 ;
  assign v_chanvadds_9$EN_mc_client_req_rsp_request_get =
	     v_chanvadds_9$RDY_mc_client_req_rsp_request_get &&
	     f_reqs_9$FULL_N ;
  assign v_chanvadds_9$EN_mc_client_req_rsp_response_put =
	     v_chanvadds_9$RDY_mc_client_req_rsp_response_put &&
	     f_rsps_9$EMPTY_N ;
  assign v_chanvadds_9$EN_mc_client_flush_request_get =
	     v_chanvadds_9$RDY_mc_client_flush_request_get &&
	     f_flush_reqs_9$FULL_N ;
  assign v_chanvadds_9$EN_mc_client_flush_response_put =
	     v_chanvadds_9$RDY_mc_client_flush_response_put &&
	     f_flush_rsps_9$EMPTY_N ;

  // remaining internal signals
  assign addr__h39529 = rg_param_block_addr + 48'd64 ;
  assign addr__h39586 = rg_param_block_addr + 48'd128 ;
  assign addr__h39631 = rg_param_block_addr + 48'd192 ;
  assign addr__h48611 = rg_param_block_addr + 48'd256 ;
  assign fsm_abort_whas__188_AND_fsm_abort_wget__189_19_ETC___d1575 =
	     (fsm_state_mkFSMstate == 4'd0 || fsm_state_mkFSMstate == 4'd7) &&
	     (!fsm_start_reg_1 || fsm_state_fired) ;
  assign lower__h41041 =
	     (f_rsps_2$D_OUT[8:6] == 3'd0) ? f_rsps_2$D_OUT[5:0] : 6'd0 ;
  assign lower__h41165 =
	     (f_rsps_4$D_OUT[8:6] == 3'd0) ? f_rsps_4$D_OUT[5:0] : 6'd0 ;
  assign lower__h41264 =
	     (f_rsps_6$D_OUT[8:6] == 3'd0) ? f_rsps_6$D_OUT[5:0] : 6'd0 ;
  assign lower__h41817 =
	     (f_rsps_2$D_OUT[8:6] == 3'd1) ? f_rsps_2$D_OUT[5:0] : 6'd0 ;
  assign lower__h41941 =
	     (f_rsps_4$D_OUT[8:6] == 3'd1) ? f_rsps_4$D_OUT[5:0] : 6'd0 ;
  assign lower__h42040 =
	     (f_rsps_6$D_OUT[8:6] == 3'd1) ? f_rsps_6$D_OUT[5:0] : 6'd0 ;
  assign lower__h42593 =
	     (f_rsps_2$D_OUT[8:6] == 3'd2) ? f_rsps_2$D_OUT[5:0] : 6'd0 ;
  assign lower__h42717 =
	     (f_rsps_4$D_OUT[8:6] == 3'd2) ? f_rsps_4$D_OUT[5:0] : 6'd0 ;
  assign lower__h42816 =
	     (f_rsps_6$D_OUT[8:6] == 3'd2) ? f_rsps_6$D_OUT[5:0] : 6'd0 ;
  assign lower__h43369 =
	     (f_rsps_2$D_OUT[8:6] == 3'd3) ? f_rsps_2$D_OUT[5:0] : 6'd0 ;
  assign lower__h43493 =
	     (f_rsps_4$D_OUT[8:6] == 3'd3) ? f_rsps_4$D_OUT[5:0] : 6'd0 ;
  assign lower__h43592 =
	     (f_rsps_6$D_OUT[8:6] == 3'd3) ? f_rsps_6$D_OUT[5:0] : 6'd0 ;
  assign lower__h44145 =
	     (f_rsps_2$D_OUT[8:6] == 3'd4) ? f_rsps_2$D_OUT[5:0] : 6'd0 ;
  assign lower__h44269 =
	     (f_rsps_4$D_OUT[8:6] == 3'd4) ? f_rsps_4$D_OUT[5:0] : 6'd0 ;
  assign lower__h44368 =
	     (f_rsps_6$D_OUT[8:6] == 3'd4) ? f_rsps_6$D_OUT[5:0] : 6'd0 ;
  assign lower__h44921 =
	     (f_rsps_2$D_OUT[8:6] == 3'd5) ? f_rsps_2$D_OUT[5:0] : 6'd0 ;
  assign lower__h45045 =
	     (f_rsps_4$D_OUT[8:6] == 3'd5) ? f_rsps_4$D_OUT[5:0] : 6'd0 ;
  assign lower__h45144 =
	     (f_rsps_6$D_OUT[8:6] == 3'd5) ? f_rsps_6$D_OUT[5:0] : 6'd0 ;
  assign lower__h45697 =
	     (f_rsps_2$D_OUT[8:6] == 3'd6) ? f_rsps_2$D_OUT[5:0] : 6'd0 ;
  assign lower__h45821 =
	     (f_rsps_4$D_OUT[8:6] == 3'd6) ? f_rsps_4$D_OUT[5:0] : 6'd0 ;
  assign lower__h45920 =
	     (f_rsps_6$D_OUT[8:6] == 3'd6) ? f_rsps_6$D_OUT[5:0] : 6'd0 ;
  assign lower__h46473 =
	     (f_rsps_2$D_OUT[8:6] == 3'd7) ? f_rsps_2$D_OUT[5:0] : 6'd0 ;
  assign lower__h46597 =
	     (f_rsps_4$D_OUT[8:6] == 3'd7) ? f_rsps_4$D_OUT[5:0] : 6'd0 ;
  assign lower__h46696 =
	     (f_rsps_6$D_OUT[8:6] == 3'd7) ? f_rsps_6$D_OUT[5:0] : 6'd0 ;
  assign rd_base_1__h41007 = { upper__h41040, 3'd0, lower__h41041 } ;
  assign rd_base_1__h41783 = { upper__h41816, 3'd1, lower__h41817 } ;
  assign rd_base_1__h42559 = { upper__h42592, 3'd2, lower__h42593 } ;
  assign rd_base_1__h43335 = { upper__h43368, 3'd3, lower__h43369 } ;
  assign rd_base_1__h44111 = { upper__h44144, 3'd4, lower__h44145 } ;
  assign rd_base_1__h44887 = { upper__h44920, 3'd5, lower__h44921 } ;
  assign rd_base_1__h45663 = { upper__h45696, 3'd6, lower__h45697 } ;
  assign rd_base_1__h46439 = { f_rsps_2$D_OUT[47:9], 3'd7, lower__h46473 } ;
  assign rd_base_2__h41009 = { upper__h41164, 3'd0, lower__h41165 } ;
  assign rd_base_2__h41785 = { upper__h41940, 3'd1, lower__h41941 } ;
  assign rd_base_2__h42561 = { upper__h42716, 3'd2, lower__h42717 } ;
  assign rd_base_2__h43337 = { upper__h43492, 3'd3, lower__h43493 } ;
  assign rd_base_2__h44113 = { upper__h44268, 3'd4, lower__h44269 } ;
  assign rd_base_2__h44889 = { upper__h45044, 3'd5, lower__h45045 } ;
  assign rd_base_2__h45665 = { upper__h45820, 3'd6, lower__h45821 } ;
  assign rd_base_2__h46441 = { f_rsps_4$D_OUT[47:9], 3'd7, lower__h46597 } ;
  assign rg_mc_488_ULT_16___d1506 = rg_mc < 5'd16 ;
  assign upper__h41040 =
	     f_rsps_2$D_OUT[47:9] +
	     ((f_rsps_2$D_OUT[8:6] == 3'd0) ? 39'd0 : 39'd1) ;
  assign upper__h41164 =
	     f_rsps_4$D_OUT[47:9] +
	     ((f_rsps_4$D_OUT[8:6] == 3'd0) ? 39'd0 : 39'd1) ;
  assign upper__h41263 =
	     f_rsps_6$D_OUT[47:9] +
	     ((f_rsps_6$D_OUT[8:6] == 3'd0) ? 39'd0 : 39'd1) ;
  assign upper__h41816 =
	     f_rsps_2$D_OUT[47:9] +
	     ((f_rsps_2$D_OUT[8:6] <= 3'd1) ? 39'd0 : 39'd1) ;
  assign upper__h41940 =
	     f_rsps_4$D_OUT[47:9] +
	     ((f_rsps_4$D_OUT[8:6] <= 3'd1) ? 39'd0 : 39'd1) ;
  assign upper__h42039 =
	     f_rsps_6$D_OUT[47:9] +
	     ((f_rsps_6$D_OUT[8:6] <= 3'd1) ? 39'd0 : 39'd1) ;
  assign upper__h42592 =
	     f_rsps_2$D_OUT[47:9] +
	     ((f_rsps_2$D_OUT[8:6] <= 3'd2) ? 39'd0 : 39'd1) ;
  assign upper__h42716 =
	     f_rsps_4$D_OUT[47:9] +
	     ((f_rsps_4$D_OUT[8:6] <= 3'd2) ? 39'd0 : 39'd1) ;
  assign upper__h42815 =
	     f_rsps_6$D_OUT[47:9] +
	     ((f_rsps_6$D_OUT[8:6] <= 3'd2) ? 39'd0 : 39'd1) ;
  assign upper__h43368 =
	     f_rsps_2$D_OUT[47:9] +
	     ((f_rsps_2$D_OUT[8:6] <= 3'd3) ? 39'd0 : 39'd1) ;
  assign upper__h43492 =
	     f_rsps_4$D_OUT[47:9] +
	     ((f_rsps_4$D_OUT[8:6] <= 3'd3) ? 39'd0 : 39'd1) ;
  assign upper__h43591 =
	     f_rsps_6$D_OUT[47:9] +
	     ((f_rsps_6$D_OUT[8:6] <= 3'd3) ? 39'd0 : 39'd1) ;
  assign upper__h44144 =
	     f_rsps_2$D_OUT[47:9] +
	     ((f_rsps_2$D_OUT[8:6] <= 3'd4) ? 39'd0 : 39'd1) ;
  assign upper__h44268 =
	     f_rsps_4$D_OUT[47:9] +
	     ((f_rsps_4$D_OUT[8:6] <= 3'd4) ? 39'd0 : 39'd1) ;
  assign upper__h44367 =
	     f_rsps_6$D_OUT[47:9] +
	     ((f_rsps_6$D_OUT[8:6] <= 3'd4) ? 39'd0 : 39'd1) ;
  assign upper__h44920 =
	     f_rsps_2$D_OUT[47:9] +
	     ((f_rsps_2$D_OUT[8:6] <= 3'd5) ? 39'd0 : 39'd1) ;
  assign upper__h45044 =
	     f_rsps_4$D_OUT[47:9] +
	     ((f_rsps_4$D_OUT[8:6] <= 3'd5) ? 39'd0 : 39'd1) ;
  assign upper__h45143 =
	     f_rsps_6$D_OUT[47:9] +
	     ((f_rsps_6$D_OUT[8:6] <= 3'd5) ? 39'd0 : 39'd1) ;
  assign upper__h45696 =
	     f_rsps_2$D_OUT[47:9] +
	     ((f_rsps_2$D_OUT[8:6] == 3'd7) ? 39'd1 : 39'd0) ;
  assign upper__h45820 =
	     f_rsps_4$D_OUT[47:9] +
	     ((f_rsps_4$D_OUT[8:6] == 3'd7) ? 39'd1 : 39'd0) ;
  assign upper__h45919 =
	     f_rsps_6$D_OUT[47:9] +
	     ((f_rsps_6$D_OUT[8:6] == 3'd7) ? 39'd1 : 39'd0) ;
  assign v_chanvadds_13_RDY_start__247_AND_v_chanvadds__ETC___d1255 =
	     v_chanvadds_13$RDY_start && v_chanvadds_14$RDY_start &&
	     v_chanvadds_15$RDY_start &&
	     f_rsps_0$EMPTY_N &&
	     f_rsps_2$EMPTY_N &&
	     f_rsps_4$EMPTY_N &&
	     f_rsps_6$EMPTY_N ;
  assign v_chanvadds_1_RDY_start__235_AND_v_chanvadds_2_ETC___d1267 =
	     v_chanvadds_1$RDY_start && v_chanvadds_2$RDY_start &&
	     v_chanvadds_3$RDY_start &&
	     v_chanvadds_4$RDY_start &&
	     v_chanvadds_5$RDY_start &&
	     v_chanvadds_6$RDY_start &&
	     v_chanvadds_7_RDY_start__241_AND_v_chanvadds_8_ETC___d1261 ;
  assign v_chanvadds_7_RDY_start__241_AND_v_chanvadds_8_ETC___d1261 =
	     v_chanvadds_7$RDY_start && v_chanvadds_8$RDY_start &&
	     v_chanvadds_9$RDY_start &&
	     v_chanvadds_10$RDY_start &&
	     v_chanvadds_11$RDY_start &&
	     v_chanvadds_12$RDY_start &&
	     v_chanvadds_13_RDY_start__247_AND_v_chanvadds__ETC___d1255 ;
  assign wr_base__h41011 = { upper__h41263, 3'd0, lower__h41264 } ;
  assign wr_base__h41787 = { upper__h42039, 3'd1, lower__h42040 } ;
  assign wr_base__h42563 = { upper__h42815, 3'd2, lower__h42816 } ;
  assign wr_base__h43339 = { upper__h43591, 3'd3, lower__h43592 } ;
  assign wr_base__h44115 = { upper__h44367, 3'd4, lower__h44368 } ;
  assign wr_base__h44891 = { upper__h45143, 3'd5, lower__h45144 } ;
  assign wr_base__h45667 = { upper__h45919, 3'd6, lower__h45920 } ;
  assign wr_base__h46443 = { f_rsps_6$D_OUT[47:9], 3'd7, lower__h46696 } ;
  assign y__h41138 = { f_rsps_0$D_OUT[44:0], 3'd0 } ;
  always@(f_reqs_15$D_OUT)
  begin
    case (f_reqs_15$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_15D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q1 =
	      f_reqs_15$D_OUT[152:146];
      default: CASE_f_reqs_15D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q1 = 7'd90;
    endcase
  end
  always@(f_reqs_14$D_OUT)
  begin
    case (f_reqs_14$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_14D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q2 =
	      f_reqs_14$D_OUT[152:146];
      default: CASE_f_reqs_14D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q2 = 7'd90;
    endcase
  end
  always@(f_reqs_13$D_OUT)
  begin
    case (f_reqs_13$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_13D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q3 =
	      f_reqs_13$D_OUT[152:146];
      default: CASE_f_reqs_13D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q3 = 7'd90;
    endcase
  end
  always@(f_reqs_12$D_OUT)
  begin
    case (f_reqs_12$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_12D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q4 =
	      f_reqs_12$D_OUT[152:146];
      default: CASE_f_reqs_12D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q4 = 7'd90;
    endcase
  end
  always@(f_reqs_11$D_OUT)
  begin
    case (f_reqs_11$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_11D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q5 =
	      f_reqs_11$D_OUT[152:146];
      default: CASE_f_reqs_11D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q5 = 7'd90;
    endcase
  end
  always@(f_reqs_10$D_OUT)
  begin
    case (f_reqs_10$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_10D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q6 =
	      f_reqs_10$D_OUT[152:146];
      default: CASE_f_reqs_10D_OUT_BITS_152_TO_146_16_f_reqs_ETC__q6 = 7'd90;
    endcase
  end
  always@(f_reqs_9$D_OUT)
  begin
    case (f_reqs_9$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_9D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q7 =
	      f_reqs_9$D_OUT[152:146];
      default: CASE_f_reqs_9D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q7 = 7'd90;
    endcase
  end
  always@(f_reqs_8$D_OUT)
  begin
    case (f_reqs_8$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_8D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q8 =
	      f_reqs_8$D_OUT[152:146];
      default: CASE_f_reqs_8D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q8 = 7'd90;
    endcase
  end
  always@(f_reqs_7$D_OUT)
  begin
    case (f_reqs_7$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_7D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q9 =
	      f_reqs_7$D_OUT[152:146];
      default: CASE_f_reqs_7D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q9 = 7'd90;
    endcase
  end
  always@(f_reqs_6$D_OUT)
  begin
    case (f_reqs_6$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_6D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q10 =
	      f_reqs_6$D_OUT[152:146];
      default: CASE_f_reqs_6D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q10 = 7'd90;
    endcase
  end
  always@(f_reqs_5$D_OUT)
  begin
    case (f_reqs_5$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_5D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q11 =
	      f_reqs_5$D_OUT[152:146];
      default: CASE_f_reqs_5D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q11 = 7'd90;
    endcase
  end
  always@(f_reqs_4$D_OUT)
  begin
    case (f_reqs_4$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_4D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q12 =
	      f_reqs_4$D_OUT[152:146];
      default: CASE_f_reqs_4D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q12 = 7'd90;
    endcase
  end
  always@(f_reqs_3$D_OUT)
  begin
    case (f_reqs_3$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_3D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q13 =
	      f_reqs_3$D_OUT[152:146];
      default: CASE_f_reqs_3D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q13 = 7'd90;
    endcase
  end
  always@(f_reqs_2$D_OUT)
  begin
    case (f_reqs_2$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_2D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q14 =
	      f_reqs_2$D_OUT[152:146];
      default: CASE_f_reqs_2D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q14 = 7'd90;
    endcase
  end
  always@(f_reqs_1$D_OUT)
  begin
    case (f_reqs_1$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_1D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q15 =
	      f_reqs_1$D_OUT[152:146];
      default: CASE_f_reqs_1D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q15 = 7'd90;
    endcase
  end
  always@(f_reqs_0$D_OUT)
  begin
    case (f_reqs_0$D_OUT[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_f_reqs_0D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q16 =
	      f_reqs_0$D_OUT[152:146];
      default: CASE_f_reqs_0D_OUT_BITS_152_TO_146_16_f_reqs__ETC__q16 = 7'd90;
    endcase
  end
  always@(rg_mc or
	  v_chanvadds_0$result or
	  v_chanvadds_1$result or
	  v_chanvadds_2$result or
	  v_chanvadds_3$result or
	  v_chanvadds_4$result or
	  v_chanvadds_5$result or
	  v_chanvadds_6$result or
	  v_chanvadds_7$result or
	  v_chanvadds_8$result or
	  v_chanvadds_9$result or
	  v_chanvadds_10$result or
	  v_chanvadds_11$result or
	  v_chanvadds_12$result or
	  v_chanvadds_13$result or
	  v_chanvadds_14$result or v_chanvadds_15$result)
  begin
    case (rg_mc)
      5'd0: v__h47723 = v_chanvadds_0$result;
      5'd1: v__h47723 = v_chanvadds_1$result;
      5'd2: v__h47723 = v_chanvadds_2$result;
      5'd3: v__h47723 = v_chanvadds_3$result;
      5'd4: v__h47723 = v_chanvadds_4$result;
      5'd5: v__h47723 = v_chanvadds_5$result;
      5'd6: v__h47723 = v_chanvadds_6$result;
      5'd7: v__h47723 = v_chanvadds_7$result;
      5'd8: v__h47723 = v_chanvadds_8$result;
      5'd9: v__h47723 = v_chanvadds_9$result;
      5'd10: v__h47723 = v_chanvadds_10$result;
      5'd11: v__h47723 = v_chanvadds_11$result;
      5'd12: v__h47723 = v_chanvadds_12$result;
      5'd13: v__h47723 = v_chanvadds_13$result;
      5'd14: v__h47723 = v_chanvadds_14$result;
      5'd15: v__h47723 = v_chanvadds_15$result;
      default: v__h47723 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(rg_mc or
	  v_chanvadds_0$RDY_result or
	  v_chanvadds_1$RDY_result or
	  v_chanvadds_2$RDY_result or
	  v_chanvadds_3$RDY_result or
	  v_chanvadds_4$RDY_result or
	  v_chanvadds_5$RDY_result or
	  v_chanvadds_6$RDY_result or
	  v_chanvadds_7$RDY_result or
	  v_chanvadds_8$RDY_result or
	  v_chanvadds_9$RDY_result or
	  v_chanvadds_10$RDY_result or
	  v_chanvadds_11$RDY_result or
	  v_chanvadds_12$RDY_result or
	  v_chanvadds_13$RDY_result or
	  v_chanvadds_14$RDY_result or v_chanvadds_15$RDY_result)
  begin
    case (rg_mc)
      5'd0:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_0$RDY_result;
      5'd1:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_1$RDY_result;
      5'd2:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_2$RDY_result;
      5'd3:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_3$RDY_result;
      5'd4:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_4$RDY_result;
      5'd5:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_5$RDY_result;
      5'd6:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_6$RDY_result;
      5'd7:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_7$RDY_result;
      5'd8:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_8$RDY_result;
      5'd9:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_9$RDY_result;
      5'd10:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_10$RDY_result;
      5'd11:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_11$RDY_result;
      5'd12:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_12$RDY_result;
      5'd13:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_13$RDY_result;
      5'd14:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_14$RDY_result;
      5'd15:
	  CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
	      v_chanvadds_15$RDY_result;
      default: CASE_rg_mc_488_0_v_chanvadds_0_RDY_result__489_ETC___d1505 =
		   1'd1;
    endcase
  end
  always@(v_chanvadds_0$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_0$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_0mc_client_req_rsp_request_g_ETC__q17 =
	      v_chanvadds_0$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_0mc_client_req_rsp_request_g_ETC__q17 = 7'd90;
    endcase
  end
  always@(v_chanvadds_2$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_2$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_2mc_client_req_rsp_request_g_ETC__q18 =
	      v_chanvadds_2$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_2mc_client_req_rsp_request_g_ETC__q18 = 7'd90;
    endcase
  end
  always@(v_chanvadds_4$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_4$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_4mc_client_req_rsp_request_g_ETC__q19 =
	      v_chanvadds_4$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_4mc_client_req_rsp_request_g_ETC__q19 = 7'd90;
    endcase
  end
  always@(v_chanvadds_6$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_6$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_6mc_client_req_rsp_request_g_ETC__q20 =
	      v_chanvadds_6$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_6mc_client_req_rsp_request_g_ETC__q20 = 7'd90;
    endcase
  end
  always@(v_chanvadds_8$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_8$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_8mc_client_req_rsp_request_g_ETC__q21 =
	      v_chanvadds_8$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_8mc_client_req_rsp_request_g_ETC__q21 = 7'd90;
    endcase
  end
  always@(v_chanvadds_10$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_10$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_10mc_client_req_rsp_request__ETC__q22 =
	      v_chanvadds_10$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_10mc_client_req_rsp_request__ETC__q22 = 7'd90;
    endcase
  end
  always@(v_chanvadds_1$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_1$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_1mc_client_req_rsp_request_g_ETC__q23 =
	      v_chanvadds_1$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_1mc_client_req_rsp_request_g_ETC__q23 = 7'd90;
    endcase
  end
  always@(v_chanvadds_11$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_11$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_11mc_client_req_rsp_request__ETC__q24 =
	      v_chanvadds_11$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_11mc_client_req_rsp_request__ETC__q24 = 7'd90;
    endcase
  end
  always@(v_chanvadds_13$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_13$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_13mc_client_req_rsp_request__ETC__q25 =
	      v_chanvadds_13$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_13mc_client_req_rsp_request__ETC__q25 = 7'd90;
    endcase
  end
  always@(v_chanvadds_12$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_12$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_12mc_client_req_rsp_request__ETC__q26 =
	      v_chanvadds_12$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_12mc_client_req_rsp_request__ETC__q26 = 7'd90;
    endcase
  end
  always@(v_chanvadds_14$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_14$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_14mc_client_req_rsp_request__ETC__q27 =
	      v_chanvadds_14$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_14mc_client_req_rsp_request__ETC__q27 = 7'd90;
    endcase
  end
  always@(v_chanvadds_15$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_15$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_15mc_client_req_rsp_request__ETC__q28 =
	      v_chanvadds_15$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_15mc_client_req_rsp_request__ETC__q28 = 7'd90;
    endcase
  end
  always@(v_chanvadds_3$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_3$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_3mc_client_req_rsp_request_g_ETC__q29 =
	      v_chanvadds_3$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_3mc_client_req_rsp_request_g_ETC__q29 = 7'd90;
    endcase
  end
  always@(v_chanvadds_5$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_5$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_5mc_client_req_rsp_request_g_ETC__q30 =
	      v_chanvadds_5$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_5mc_client_req_rsp_request_g_ETC__q30 = 7'd90;
    endcase
  end
  always@(v_chanvadds_7$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_7$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_7mc_client_req_rsp_request_g_ETC__q31 =
	      v_chanvadds_7$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_7mc_client_req_rsp_request_g_ETC__q31 = 7'd90;
    endcase
  end
  always@(v_chanvadds_9$mc_client_req_rsp_request_get)
  begin
    case (v_chanvadds_9$mc_client_req_rsp_request_get[152:146])
      7'd16,
      7'd32,
      7'd64,
      7'd65,
      7'd66,
      7'd67,
      7'd68,
      7'd69,
      7'd70,
      7'd71,
      7'd72,
      7'd76,
      7'd80,
      7'd81,
      7'd82,
      7'd83,
      7'd84,
      7'd85,
      7'd86,
      7'd87,
      7'd88,
      7'd89:
	  CASE_v_chanvadds_9mc_client_req_rsp_request_g_ETC__q32 =
	      v_chanvadds_9$mc_client_req_rsp_request_get[152:146];
      default: CASE_v_chanvadds_9mc_client_req_rsp_request_g_ETC__q32 = 7'd90;
    endcase
  end
  always@(mc_ifcs_0_req_rsp_response_put)
  begin
    case (mc_ifcs_0_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_0_req_rsp_response_put_BITS_101_T_ETC__q33 =
	      mc_ifcs_0_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_0_req_rsp_response_put_BITS_101_T_ETC__q33 = 3'd6;
    endcase
  end
  always@(mc_ifcs_10_req_rsp_response_put)
  begin
    case (mc_ifcs_10_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_10_req_rsp_response_put_BITS_101__ETC__q34 =
	      mc_ifcs_10_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_10_req_rsp_response_put_BITS_101__ETC__q34 = 3'd6;
    endcase
  end
  always@(mc_ifcs_1_req_rsp_response_put)
  begin
    case (mc_ifcs_1_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_1_req_rsp_response_put_BITS_101_T_ETC__q35 =
	      mc_ifcs_1_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_1_req_rsp_response_put_BITS_101_T_ETC__q35 = 3'd6;
    endcase
  end
  always@(mc_ifcs_11_req_rsp_response_put)
  begin
    case (mc_ifcs_11_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_11_req_rsp_response_put_BITS_101__ETC__q36 =
	      mc_ifcs_11_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_11_req_rsp_response_put_BITS_101__ETC__q36 = 3'd6;
    endcase
  end
  always@(mc_ifcs_12_req_rsp_response_put)
  begin
    case (mc_ifcs_12_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_12_req_rsp_response_put_BITS_101__ETC__q37 =
	      mc_ifcs_12_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_12_req_rsp_response_put_BITS_101__ETC__q37 = 3'd6;
    endcase
  end
  always@(mc_ifcs_13_req_rsp_response_put)
  begin
    case (mc_ifcs_13_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_13_req_rsp_response_put_BITS_101__ETC__q38 =
	      mc_ifcs_13_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_13_req_rsp_response_put_BITS_101__ETC__q38 = 3'd6;
    endcase
  end
  always@(mc_ifcs_14_req_rsp_response_put)
  begin
    case (mc_ifcs_14_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_14_req_rsp_response_put_BITS_101__ETC__q39 =
	      mc_ifcs_14_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_14_req_rsp_response_put_BITS_101__ETC__q39 = 3'd6;
    endcase
  end
  always@(mc_ifcs_2_req_rsp_response_put)
  begin
    case (mc_ifcs_2_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_2_req_rsp_response_put_BITS_101_T_ETC__q40 =
	      mc_ifcs_2_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_2_req_rsp_response_put_BITS_101_T_ETC__q40 = 3'd6;
    endcase
  end
  always@(mc_ifcs_15_req_rsp_response_put)
  begin
    case (mc_ifcs_15_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_15_req_rsp_response_put_BITS_101__ETC__q41 =
	      mc_ifcs_15_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_15_req_rsp_response_put_BITS_101__ETC__q41 = 3'd6;
    endcase
  end
  always@(mc_ifcs_3_req_rsp_response_put)
  begin
    case (mc_ifcs_3_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_3_req_rsp_response_put_BITS_101_T_ETC__q42 =
	      mc_ifcs_3_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_3_req_rsp_response_put_BITS_101_T_ETC__q42 = 3'd6;
    endcase
  end
  always@(mc_ifcs_4_req_rsp_response_put)
  begin
    case (mc_ifcs_4_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_4_req_rsp_response_put_BITS_101_T_ETC__q43 =
	      mc_ifcs_4_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_4_req_rsp_response_put_BITS_101_T_ETC__q43 = 3'd6;
    endcase
  end
  always@(mc_ifcs_5_req_rsp_response_put)
  begin
    case (mc_ifcs_5_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_5_req_rsp_response_put_BITS_101_T_ETC__q44 =
	      mc_ifcs_5_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_5_req_rsp_response_put_BITS_101_T_ETC__q44 = 3'd6;
    endcase
  end
  always@(mc_ifcs_6_req_rsp_response_put)
  begin
    case (mc_ifcs_6_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_6_req_rsp_response_put_BITS_101_T_ETC__q45 =
	      mc_ifcs_6_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_6_req_rsp_response_put_BITS_101_T_ETC__q45 = 3'd6;
    endcase
  end
  always@(mc_ifcs_7_req_rsp_response_put)
  begin
    case (mc_ifcs_7_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_7_req_rsp_response_put_BITS_101_T_ETC__q46 =
	      mc_ifcs_7_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_7_req_rsp_response_put_BITS_101_T_ETC__q46 = 3'd6;
    endcase
  end
  always@(mc_ifcs_9_req_rsp_response_put)
  begin
    case (mc_ifcs_9_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_9_req_rsp_response_put_BITS_101_T_ETC__q47 =
	      mc_ifcs_9_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_9_req_rsp_response_put_BITS_101_T_ETC__q47 = 3'd6;
    endcase
  end
  always@(mc_ifcs_8_req_rsp_response_put)
  begin
    case (mc_ifcs_8_req_rsp_response_put[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_mc_ifcs_8_req_rsp_response_put_BITS_101_T_ETC__q48 =
	      mc_ifcs_8_req_rsp_response_put[101:99];
      default: CASE_mc_ifcs_8_req_rsp_response_put_BITS_101_T_ETC__q48 = 3'd6;
    endcase
  end
  always@(f_rsps_0$D_OUT)
  begin
    case (f_rsps_0$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_0D_OUT_BITS_101_TO_99_2_f_rsps_0_ETC__q49 =
	      f_rsps_0$D_OUT[101:99];
      default: CASE_f_rsps_0D_OUT_BITS_101_TO_99_2_f_rsps_0_ETC__q49 = 3'd6;
    endcase
  end
  always@(f_rsps_1$D_OUT)
  begin
    case (f_rsps_1$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_1D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q50 =
	      f_rsps_1$D_OUT[101:99];
      default: CASE_f_rsps_1D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q50 = 3'd6;
    endcase
  end
  always@(f_rsps_10$D_OUT)
  begin
    case (f_rsps_10$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_10D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q51 =
	      f_rsps_10$D_OUT[101:99];
      default: CASE_f_rsps_10D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q51 = 3'd6;
    endcase
  end
  always@(f_rsps_11$D_OUT)
  begin
    case (f_rsps_11$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_11D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q52 =
	      f_rsps_11$D_OUT[101:99];
      default: CASE_f_rsps_11D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q52 = 3'd6;
    endcase
  end
  always@(f_rsps_12$D_OUT)
  begin
    case (f_rsps_12$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_12D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q53 =
	      f_rsps_12$D_OUT[101:99];
      default: CASE_f_rsps_12D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q53 = 3'd6;
    endcase
  end
  always@(f_rsps_13$D_OUT)
  begin
    case (f_rsps_13$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_13D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q54 =
	      f_rsps_13$D_OUT[101:99];
      default: CASE_f_rsps_13D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q54 = 3'd6;
    endcase
  end
  always@(f_rsps_14$D_OUT)
  begin
    case (f_rsps_14$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_14D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q55 =
	      f_rsps_14$D_OUT[101:99];
      default: CASE_f_rsps_14D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q55 = 3'd6;
    endcase
  end
  always@(f_rsps_15$D_OUT)
  begin
    case (f_rsps_15$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_15D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q56 =
	      f_rsps_15$D_OUT[101:99];
      default: CASE_f_rsps_15D_OUT_BITS_101_TO_99_2_f_rsps_1_ETC__q56 = 3'd6;
    endcase
  end
  always@(f_rsps_2$D_OUT)
  begin
    case (f_rsps_2$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_2D_OUT_BITS_101_TO_99_2_f_rsps_2_ETC__q57 =
	      f_rsps_2$D_OUT[101:99];
      default: CASE_f_rsps_2D_OUT_BITS_101_TO_99_2_f_rsps_2_ETC__q57 = 3'd6;
    endcase
  end
  always@(f_rsps_3$D_OUT)
  begin
    case (f_rsps_3$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_3D_OUT_BITS_101_TO_99_2_f_rsps_3_ETC__q58 =
	      f_rsps_3$D_OUT[101:99];
      default: CASE_f_rsps_3D_OUT_BITS_101_TO_99_2_f_rsps_3_ETC__q58 = 3'd6;
    endcase
  end
  always@(f_rsps_4$D_OUT)
  begin
    case (f_rsps_4$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_4D_OUT_BITS_101_TO_99_2_f_rsps_4_ETC__q59 =
	      f_rsps_4$D_OUT[101:99];
      default: CASE_f_rsps_4D_OUT_BITS_101_TO_99_2_f_rsps_4_ETC__q59 = 3'd6;
    endcase
  end
  always@(f_rsps_5$D_OUT)
  begin
    case (f_rsps_5$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_5D_OUT_BITS_101_TO_99_2_f_rsps_5_ETC__q60 =
	      f_rsps_5$D_OUT[101:99];
      default: CASE_f_rsps_5D_OUT_BITS_101_TO_99_2_f_rsps_5_ETC__q60 = 3'd6;
    endcase
  end
  always@(f_rsps_6$D_OUT)
  begin
    case (f_rsps_6$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_6D_OUT_BITS_101_TO_99_2_f_rsps_6_ETC__q61 =
	      f_rsps_6$D_OUT[101:99];
      default: CASE_f_rsps_6D_OUT_BITS_101_TO_99_2_f_rsps_6_ETC__q61 = 3'd6;
    endcase
  end
  always@(f_rsps_7$D_OUT)
  begin
    case (f_rsps_7$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_7D_OUT_BITS_101_TO_99_2_f_rsps_7_ETC__q62 =
	      f_rsps_7$D_OUT[101:99];
      default: CASE_f_rsps_7D_OUT_BITS_101_TO_99_2_f_rsps_7_ETC__q62 = 3'd6;
    endcase
  end
  always@(f_rsps_8$D_OUT)
  begin
    case (f_rsps_8$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_8D_OUT_BITS_101_TO_99_2_f_rsps_8_ETC__q63 =
	      f_rsps_8$D_OUT[101:99];
      default: CASE_f_rsps_8D_OUT_BITS_101_TO_99_2_f_rsps_8_ETC__q63 = 3'd6;
    endcase
  end
  always@(f_rsps_9$D_OUT)
  begin
    case (f_rsps_9$D_OUT[101:99])
      3'd2, 3'd3, 3'd4, 3'd5:
	  CASE_f_rsps_9D_OUT_BITS_101_TO_99_2_f_rsps_9_ETC__q64 =
	      f_rsps_9$D_OUT[101:99];
      default: CASE_f_rsps_9D_OUT_BITS_101_TO_99_2_f_rsps_9_ETC__q64 = 3'd6;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fsm_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (fsm_start_reg$EN)
	  fsm_start_reg <= `BSV_ASSIGNMENT_DELAY fsm_start_reg$D_IN;
	if (fsm_start_reg_1$EN)
	  fsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY fsm_start_reg_1$D_IN;
	if (fsm_state_can_overlap$EN)
	  fsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_state_can_overlap$D_IN;
	if (fsm_state_fired$EN)
	  fsm_state_fired <= `BSV_ASSIGNMENT_DELAY fsm_state_fired$D_IN;
	if (fsm_state_mkFSMstate$EN)
	  fsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_state_mkFSMstate$D_IN;
      end
    if (rg_fpga_id$EN) rg_fpga_id <= `BSV_ASSIGNMENT_DELAY rg_fpga_id$D_IN;
    if (rg_mc$EN) rg_mc <= `BSV_ASSIGNMENT_DELAY rg_mc$D_IN;
    if (rg_param_block_addr$EN)
      rg_param_block_addr <= `BSV_ASSIGNMENT_DELAY rg_param_block_addr$D_IN;
    if (rg_partial_sum$EN)
      rg_partial_sum <= `BSV_ASSIGNMENT_DELAY rg_partial_sum$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fsm_start_reg = 1'h0;
    fsm_start_reg_1 = 1'h0;
    fsm_state_can_overlap = 1'h0;
    fsm_state_fired = 1'h0;
    fsm_state_mkFSMstate = 4'hA;
    rg_fpga_id = 2'h2;
    rg_mc = 5'h0A;
    rg_param_block_addr = 48'hAAAAAAAAAAAA;
    rg_partial_sum = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$write("INTERNAL ERROR: mkApp_HW2: memory response for parameter-read is of wrong RSP_TYPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] == 3'd3)
	$write("RSP_WR_CMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] == 3'd4)
	$write("RSP_FE_RETRY");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] == 3'd5)
	$write("RSP_FE_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 &&
	  f_rsps_0$D_OUT[101:99] != 3'd2 &&
	  f_rsps_0$D_OUT[101:99] != 3'd3 &&
	  f_rsps_0$D_OUT[101:99] != 3'd4 &&
	  f_rsps_0$D_OUT[101:99] != 3'd5)
	$write("RSP_ATOMIC_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$write("    Response is: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$write("BC_MC_RSP { ", "cmd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] == 3'd3)
	$write("RSP_WR_CMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] == 3'd4)
	$write("RSP_FE_RETRY");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] == 3'd5)
	$write("RSP_FE_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 &&
	  f_rsps_0$D_OUT[101:99] != 3'd2 &&
	  f_rsps_0$D_OUT[101:99] != 3'd3 &&
	  f_rsps_0$D_OUT[101:99] != 3'd4 &&
	  f_rsps_0$D_OUT[101:99] != 3'd5)
	$write("RSP_ATOMIC_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$write(", ", "sub: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_0$D_OUT[98:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$write(", ", "rtnctl: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_0$D_OUT[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_0$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_0$D_OUT[101:99] != 3'd2)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$write("INTERNAL ERROR: mkApp_HW2: memory response for parameter-read is of wrong RSP_TYPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] == 3'd3)
	$write("RSP_WR_CMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] == 3'd4)
	$write("RSP_FE_RETRY");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] == 3'd5)
	$write("RSP_FE_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 &&
	  f_rsps_2$D_OUT[101:99] != 3'd2 &&
	  f_rsps_2$D_OUT[101:99] != 3'd3 &&
	  f_rsps_2$D_OUT[101:99] != 3'd4 &&
	  f_rsps_2$D_OUT[101:99] != 3'd5)
	$write("RSP_ATOMIC_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$write("    Response is: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$write("BC_MC_RSP { ", "cmd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] == 3'd3)
	$write("RSP_WR_CMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] == 3'd4)
	$write("RSP_FE_RETRY");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] == 3'd5)
	$write("RSP_FE_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 &&
	  f_rsps_2$D_OUT[101:99] != 3'd2 &&
	  f_rsps_2$D_OUT[101:99] != 3'd3 &&
	  f_rsps_2$D_OUT[101:99] != 3'd4 &&
	  f_rsps_2$D_OUT[101:99] != 3'd5)
	$write("RSP_ATOMIC_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$write(", ", "sub: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_2$D_OUT[98:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$write(", ", "rtnctl: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_2$D_OUT[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_2$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_2$D_OUT[101:99] != 3'd2)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$write("INTERNAL ERROR: mkApp_HW2: memory response for parameter-read is of wrong RSP_TYPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] == 3'd3)
	$write("RSP_WR_CMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] == 3'd4)
	$write("RSP_FE_RETRY");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] == 3'd5)
	$write("RSP_FE_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 &&
	  f_rsps_4$D_OUT[101:99] != 3'd2 &&
	  f_rsps_4$D_OUT[101:99] != 3'd3 &&
	  f_rsps_4$D_OUT[101:99] != 3'd4 &&
	  f_rsps_4$D_OUT[101:99] != 3'd5)
	$write("RSP_ATOMIC_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$write("    Response is: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$write("BC_MC_RSP { ", "cmd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] == 3'd3)
	$write("RSP_WR_CMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] == 3'd4)
	$write("RSP_FE_RETRY");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] == 3'd5)
	$write("RSP_FE_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 &&
	  f_rsps_4$D_OUT[101:99] != 3'd2 &&
	  f_rsps_4$D_OUT[101:99] != 3'd3 &&
	  f_rsps_4$D_OUT[101:99] != 3'd4 &&
	  f_rsps_4$D_OUT[101:99] != 3'd5)
	$write("RSP_ATOMIC_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$write(", ", "sub: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_4$D_OUT[98:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$write(", ", "rtnctl: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_4$D_OUT[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_4$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_4$D_OUT[101:99] != 3'd2)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$write("INTERNAL ERROR: mkApp_HW2: memory response for parameter-read is of wrong RSP_TYPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] == 3'd3)
	$write("RSP_WR_CMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] == 3'd4)
	$write("RSP_FE_RETRY");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] == 3'd5)
	$write("RSP_FE_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 &&
	  f_rsps_6$D_OUT[101:99] != 3'd2 &&
	  f_rsps_6$D_OUT[101:99] != 3'd3 &&
	  f_rsps_6$D_OUT[101:99] != 3'd4 &&
	  f_rsps_6$D_OUT[101:99] != 3'd5)
	$write("RSP_ATOMIC_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$write("    Response is: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$write("BC_MC_RSP { ", "cmd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] == 3'd3)
	$write("RSP_WR_CMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] == 3'd4)
	$write("RSP_FE_RETRY");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] == 3'd5)
	$write("RSP_FE_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 &&
	  f_rsps_6$D_OUT[101:99] != 3'd2 &&
	  f_rsps_6$D_OUT[101:99] != 3'd3 &&
	  f_rsps_6$D_OUT[101:99] != 3'd4 &&
	  f_rsps_6$D_OUT[101:99] != 3'd5)
	$write("RSP_ATOMIC_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$write(", ", "sub: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_6$D_OUT[98:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$write(", ", "rtnctl: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_6$D_OUT[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$write("'h%h", f_rsps_6$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 && f_rsps_6$D_OUT[101:99] != 3'd2)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2)
	begin
	  v__h40892 = $stime;
	  #0;
	end
    v__h40886 = v__h40892 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2)
	$display("%0d: mkApp_HW2 [%0d]: params are %0d 0x%0h 0x%0h 0x%0h; starting per-MC vadds",
		 v__h40886,
		 rg_fpga_id,
		 f_rsps_0$D_OUT[47:0],
		 f_rsps_2$D_OUT[47:0],
		 f_rsps_4$D_OUT[47:0],
		 f_rsps_6$D_OUT[47:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$write("INTERNAL ERROR: mkApp_HW2: memory response for parameter-write is of wrong RSP_TYPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] == 3'd2)
	$write("RSP_RD_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] == 3'd4)
	$write("RSP_FE_RETRY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] == 3'd5)
	$write("RSP_FE_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3 &&
	  f_rsps_8$D_OUT[101:99] != 3'd2 &&
	  f_rsps_8$D_OUT[101:99] != 3'd4 &&
	  f_rsps_8$D_OUT[101:99] != 3'd5)
	$write("RSP_ATOMIC_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$write("    Response is: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$write("BC_MC_RSP { ", "cmd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] == 3'd2)
	$write("RSP_RD_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] == 3'd4)
	$write("RSP_FE_RETRY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] == 3'd5)
	$write("RSP_FE_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3 &&
	  f_rsps_8$D_OUT[101:99] != 3'd2 &&
	  f_rsps_8$D_OUT[101:99] != 3'd4 &&
	  f_rsps_8$D_OUT[101:99] != 3'd5)
	$write("RSP_ATOMIC_DATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$write(", ", "sub: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$write("'h%h", f_rsps_8$D_OUT[98:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$write(", ", "rtnctl: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$write("'h%h", f_rsps_8$D_OUT[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$write("'h%h", f_rsps_8$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l267c22 && f_rsps_8$D_OUT[101:99] != 3'd3)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_2 &&
	  (fsm_state_mkFSMstate == 4'd2 ||
	   MUX_rg_partial_sum$write_1__SEL_1 ||
	   fsm_state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_fsm_action_l266c22 ||
	   WILL_FIRE_RL_fsm_action_l267c22))
	$display("Error: \"BSV_src/App_HW.bsv\", line 229, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l229c10] and\n  [RL_fsm_action_f_init_l260c10, RL_fsm_action_l260c59,\n  RL_fsm_action_f_update_l260c10, RL_fsm_action_l266c22,\n  RL_fsm_action_l267c22] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (fsm_state_mkFSMstate == 4'd2 &&
	  (MUX_rg_partial_sum$write_1__SEL_1 ||
	   fsm_state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_fsm_action_l266c22 ||
	   WILL_FIRE_RL_fsm_action_l267c22))
	$display("Error: \"BSV_src/App_HW.bsv\", line 260, column 21: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_f_init_l260c10]\n  and [RL_fsm_action_l260c59, RL_fsm_action_f_update_l260c10,\n  RL_fsm_action_l266c22, RL_fsm_action_l267c22] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_rg_partial_sum$write_1__SEL_1 &&
	  (fsm_state_mkFSMstate == 4'd4 || WILL_FIRE_RL_fsm_action_l266c22 ||
	   WILL_FIRE_RL_fsm_action_l267c22))
	$display("Error: \"BSV_src/App_HW.bsv\", line 260, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l260c59] and\n  [RL_fsm_action_f_update_l260c10, RL_fsm_action_l266c22,\n  RL_fsm_action_l267c22] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (fsm_state_mkFSMstate == 4'd4 &&
	  (WILL_FIRE_RL_fsm_action_l266c22 ||
	   WILL_FIRE_RL_fsm_action_l267c22))
	$display("Error: \"BSV_src/App_HW.bsv\", line 260, column 45: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_f_update_l260c10]\n  and [RL_fsm_action_l266c22, RL_fsm_action_l267c22] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l266c22 && WILL_FIRE_RL_fsm_action_l267c22)
	$display("Error: \"BSV_src/App_HW.bsv\", line 266, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l266c22] and\n  [RL_fsm_action_l267c22] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l221c10 &&
	  (MUX_rg_partial_sum$write_1__SEL_2 ||
	   fsm_state_mkFSMstate == 4'd2 ||
	   MUX_rg_partial_sum$write_1__SEL_1 ||
	   fsm_state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_fsm_action_l266c22 ||
	   WILL_FIRE_RL_fsm_action_l267c22))
	$display("Error: \"BSV_src/App_HW.bsv\", line 221, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l221c10] and\n  [RL_fsm_action_l229c10, RL_fsm_action_f_init_l260c10, RL_fsm_action_l260c59,\n  RL_fsm_action_f_update_l260c10, RL_fsm_action_l266c22,\n  RL_fsm_action_l267c22] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkApp_HW2

